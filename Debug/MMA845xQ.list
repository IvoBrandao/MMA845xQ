
MMA845xQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fc0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08006150  08006150  00016150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062e0  080062e0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080062e0  080062e0  000162e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062e8  080062e8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062e8  080062e8  000162e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062ec  080062ec  000162ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080062f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000068  08006358  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  200001b4  08006358  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000189f8  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cbc  00000000  00000000  00038a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e68  00000000  00000000  0003b750  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d30  00000000  00000000  0003c5b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028c4a  00000000  00000000  0003d2e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000de4e  00000000  00000000  00065f32  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ee2fc  00000000  00000000  00073d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016207c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004240  00000000  00000000  001620f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006138 	.word	0x08006138

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006138 	.word	0x08006138

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_uldivmod>:
 80005e8:	b953      	cbnz	r3, 8000600 <__aeabi_uldivmod+0x18>
 80005ea:	b94a      	cbnz	r2, 8000600 <__aeabi_uldivmod+0x18>
 80005ec:	2900      	cmp	r1, #0
 80005ee:	bf08      	it	eq
 80005f0:	2800      	cmpeq	r0, #0
 80005f2:	bf1c      	itt	ne
 80005f4:	f04f 31ff 	movne.w	r1, #4294967295
 80005f8:	f04f 30ff 	movne.w	r0, #4294967295
 80005fc:	f000 b972 	b.w	80008e4 <__aeabi_idiv0>
 8000600:	f1ad 0c08 	sub.w	ip, sp, #8
 8000604:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000608:	f000 f806 	bl	8000618 <__udivmoddi4>
 800060c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000614:	b004      	add	sp, #16
 8000616:	4770      	bx	lr

08000618 <__udivmoddi4>:
 8000618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800061c:	9e08      	ldr	r6, [sp, #32]
 800061e:	4604      	mov	r4, r0
 8000620:	4688      	mov	r8, r1
 8000622:	2b00      	cmp	r3, #0
 8000624:	d14b      	bne.n	80006be <__udivmoddi4+0xa6>
 8000626:	428a      	cmp	r2, r1
 8000628:	4615      	mov	r5, r2
 800062a:	d967      	bls.n	80006fc <__udivmoddi4+0xe4>
 800062c:	fab2 f282 	clz	r2, r2
 8000630:	b14a      	cbz	r2, 8000646 <__udivmoddi4+0x2e>
 8000632:	f1c2 0720 	rsb	r7, r2, #32
 8000636:	fa01 f302 	lsl.w	r3, r1, r2
 800063a:	fa20 f707 	lsr.w	r7, r0, r7
 800063e:	4095      	lsls	r5, r2
 8000640:	ea47 0803 	orr.w	r8, r7, r3
 8000644:	4094      	lsls	r4, r2
 8000646:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800064a:	0c23      	lsrs	r3, r4, #16
 800064c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000650:	fa1f fc85 	uxth.w	ip, r5
 8000654:	fb0e 8817 	mls	r8, lr, r7, r8
 8000658:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800065c:	fb07 f10c 	mul.w	r1, r7, ip
 8000660:	4299      	cmp	r1, r3
 8000662:	d909      	bls.n	8000678 <__udivmoddi4+0x60>
 8000664:	18eb      	adds	r3, r5, r3
 8000666:	f107 30ff 	add.w	r0, r7, #4294967295
 800066a:	f080 811b 	bcs.w	80008a4 <__udivmoddi4+0x28c>
 800066e:	4299      	cmp	r1, r3
 8000670:	f240 8118 	bls.w	80008a4 <__udivmoddi4+0x28c>
 8000674:	3f02      	subs	r7, #2
 8000676:	442b      	add	r3, r5
 8000678:	1a5b      	subs	r3, r3, r1
 800067a:	b2a4      	uxth	r4, r4
 800067c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000680:	fb0e 3310 	mls	r3, lr, r0, r3
 8000684:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000688:	fb00 fc0c 	mul.w	ip, r0, ip
 800068c:	45a4      	cmp	ip, r4
 800068e:	d909      	bls.n	80006a4 <__udivmoddi4+0x8c>
 8000690:	192c      	adds	r4, r5, r4
 8000692:	f100 33ff 	add.w	r3, r0, #4294967295
 8000696:	f080 8107 	bcs.w	80008a8 <__udivmoddi4+0x290>
 800069a:	45a4      	cmp	ip, r4
 800069c:	f240 8104 	bls.w	80008a8 <__udivmoddi4+0x290>
 80006a0:	3802      	subs	r0, #2
 80006a2:	442c      	add	r4, r5
 80006a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006a8:	eba4 040c 	sub.w	r4, r4, ip
 80006ac:	2700      	movs	r7, #0
 80006ae:	b11e      	cbz	r6, 80006b8 <__udivmoddi4+0xa0>
 80006b0:	40d4      	lsrs	r4, r2
 80006b2:	2300      	movs	r3, #0
 80006b4:	e9c6 4300 	strd	r4, r3, [r6]
 80006b8:	4639      	mov	r1, r7
 80006ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006be:	428b      	cmp	r3, r1
 80006c0:	d909      	bls.n	80006d6 <__udivmoddi4+0xbe>
 80006c2:	2e00      	cmp	r6, #0
 80006c4:	f000 80eb 	beq.w	800089e <__udivmoddi4+0x286>
 80006c8:	2700      	movs	r7, #0
 80006ca:	e9c6 0100 	strd	r0, r1, [r6]
 80006ce:	4638      	mov	r0, r7
 80006d0:	4639      	mov	r1, r7
 80006d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006d6:	fab3 f783 	clz	r7, r3
 80006da:	2f00      	cmp	r7, #0
 80006dc:	d147      	bne.n	800076e <__udivmoddi4+0x156>
 80006de:	428b      	cmp	r3, r1
 80006e0:	d302      	bcc.n	80006e8 <__udivmoddi4+0xd0>
 80006e2:	4282      	cmp	r2, r0
 80006e4:	f200 80fa 	bhi.w	80008dc <__udivmoddi4+0x2c4>
 80006e8:	1a84      	subs	r4, r0, r2
 80006ea:	eb61 0303 	sbc.w	r3, r1, r3
 80006ee:	2001      	movs	r0, #1
 80006f0:	4698      	mov	r8, r3
 80006f2:	2e00      	cmp	r6, #0
 80006f4:	d0e0      	beq.n	80006b8 <__udivmoddi4+0xa0>
 80006f6:	e9c6 4800 	strd	r4, r8, [r6]
 80006fa:	e7dd      	b.n	80006b8 <__udivmoddi4+0xa0>
 80006fc:	b902      	cbnz	r2, 8000700 <__udivmoddi4+0xe8>
 80006fe:	deff      	udf	#255	; 0xff
 8000700:	fab2 f282 	clz	r2, r2
 8000704:	2a00      	cmp	r2, #0
 8000706:	f040 808f 	bne.w	8000828 <__udivmoddi4+0x210>
 800070a:	1b49      	subs	r1, r1, r5
 800070c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000710:	fa1f f885 	uxth.w	r8, r5
 8000714:	2701      	movs	r7, #1
 8000716:	fbb1 fcfe 	udiv	ip, r1, lr
 800071a:	0c23      	lsrs	r3, r4, #16
 800071c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000720:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000724:	fb08 f10c 	mul.w	r1, r8, ip
 8000728:	4299      	cmp	r1, r3
 800072a:	d907      	bls.n	800073c <__udivmoddi4+0x124>
 800072c:	18eb      	adds	r3, r5, r3
 800072e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000732:	d202      	bcs.n	800073a <__udivmoddi4+0x122>
 8000734:	4299      	cmp	r1, r3
 8000736:	f200 80cd 	bhi.w	80008d4 <__udivmoddi4+0x2bc>
 800073a:	4684      	mov	ip, r0
 800073c:	1a59      	subs	r1, r3, r1
 800073e:	b2a3      	uxth	r3, r4
 8000740:	fbb1 f0fe 	udiv	r0, r1, lr
 8000744:	fb0e 1410 	mls	r4, lr, r0, r1
 8000748:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800074c:	fb08 f800 	mul.w	r8, r8, r0
 8000750:	45a0      	cmp	r8, r4
 8000752:	d907      	bls.n	8000764 <__udivmoddi4+0x14c>
 8000754:	192c      	adds	r4, r5, r4
 8000756:	f100 33ff 	add.w	r3, r0, #4294967295
 800075a:	d202      	bcs.n	8000762 <__udivmoddi4+0x14a>
 800075c:	45a0      	cmp	r8, r4
 800075e:	f200 80b6 	bhi.w	80008ce <__udivmoddi4+0x2b6>
 8000762:	4618      	mov	r0, r3
 8000764:	eba4 0408 	sub.w	r4, r4, r8
 8000768:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800076c:	e79f      	b.n	80006ae <__udivmoddi4+0x96>
 800076e:	f1c7 0c20 	rsb	ip, r7, #32
 8000772:	40bb      	lsls	r3, r7
 8000774:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000778:	ea4e 0e03 	orr.w	lr, lr, r3
 800077c:	fa01 f407 	lsl.w	r4, r1, r7
 8000780:	fa20 f50c 	lsr.w	r5, r0, ip
 8000784:	fa21 f30c 	lsr.w	r3, r1, ip
 8000788:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800078c:	4325      	orrs	r5, r4
 800078e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000792:	0c2c      	lsrs	r4, r5, #16
 8000794:	fb08 3319 	mls	r3, r8, r9, r3
 8000798:	fa1f fa8e 	uxth.w	sl, lr
 800079c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007a0:	fb09 f40a 	mul.w	r4, r9, sl
 80007a4:	429c      	cmp	r4, r3
 80007a6:	fa02 f207 	lsl.w	r2, r2, r7
 80007aa:	fa00 f107 	lsl.w	r1, r0, r7
 80007ae:	d90b      	bls.n	80007c8 <__udivmoddi4+0x1b0>
 80007b0:	eb1e 0303 	adds.w	r3, lr, r3
 80007b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80007b8:	f080 8087 	bcs.w	80008ca <__udivmoddi4+0x2b2>
 80007bc:	429c      	cmp	r4, r3
 80007be:	f240 8084 	bls.w	80008ca <__udivmoddi4+0x2b2>
 80007c2:	f1a9 0902 	sub.w	r9, r9, #2
 80007c6:	4473      	add	r3, lr
 80007c8:	1b1b      	subs	r3, r3, r4
 80007ca:	b2ad      	uxth	r5, r5
 80007cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80007d0:	fb08 3310 	mls	r3, r8, r0, r3
 80007d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80007d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80007dc:	45a2      	cmp	sl, r4
 80007de:	d908      	bls.n	80007f2 <__udivmoddi4+0x1da>
 80007e0:	eb1e 0404 	adds.w	r4, lr, r4
 80007e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80007e8:	d26b      	bcs.n	80008c2 <__udivmoddi4+0x2aa>
 80007ea:	45a2      	cmp	sl, r4
 80007ec:	d969      	bls.n	80008c2 <__udivmoddi4+0x2aa>
 80007ee:	3802      	subs	r0, #2
 80007f0:	4474      	add	r4, lr
 80007f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007f6:	fba0 8902 	umull	r8, r9, r0, r2
 80007fa:	eba4 040a 	sub.w	r4, r4, sl
 80007fe:	454c      	cmp	r4, r9
 8000800:	46c2      	mov	sl, r8
 8000802:	464b      	mov	r3, r9
 8000804:	d354      	bcc.n	80008b0 <__udivmoddi4+0x298>
 8000806:	d051      	beq.n	80008ac <__udivmoddi4+0x294>
 8000808:	2e00      	cmp	r6, #0
 800080a:	d069      	beq.n	80008e0 <__udivmoddi4+0x2c8>
 800080c:	ebb1 050a 	subs.w	r5, r1, sl
 8000810:	eb64 0403 	sbc.w	r4, r4, r3
 8000814:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000818:	40fd      	lsrs	r5, r7
 800081a:	40fc      	lsrs	r4, r7
 800081c:	ea4c 0505 	orr.w	r5, ip, r5
 8000820:	e9c6 5400 	strd	r5, r4, [r6]
 8000824:	2700      	movs	r7, #0
 8000826:	e747      	b.n	80006b8 <__udivmoddi4+0xa0>
 8000828:	f1c2 0320 	rsb	r3, r2, #32
 800082c:	fa20 f703 	lsr.w	r7, r0, r3
 8000830:	4095      	lsls	r5, r2
 8000832:	fa01 f002 	lsl.w	r0, r1, r2
 8000836:	fa21 f303 	lsr.w	r3, r1, r3
 800083a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800083e:	4338      	orrs	r0, r7
 8000840:	0c01      	lsrs	r1, r0, #16
 8000842:	fbb3 f7fe 	udiv	r7, r3, lr
 8000846:	fa1f f885 	uxth.w	r8, r5
 800084a:	fb0e 3317 	mls	r3, lr, r7, r3
 800084e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000852:	fb07 f308 	mul.w	r3, r7, r8
 8000856:	428b      	cmp	r3, r1
 8000858:	fa04 f402 	lsl.w	r4, r4, r2
 800085c:	d907      	bls.n	800086e <__udivmoddi4+0x256>
 800085e:	1869      	adds	r1, r5, r1
 8000860:	f107 3cff 	add.w	ip, r7, #4294967295
 8000864:	d22f      	bcs.n	80008c6 <__udivmoddi4+0x2ae>
 8000866:	428b      	cmp	r3, r1
 8000868:	d92d      	bls.n	80008c6 <__udivmoddi4+0x2ae>
 800086a:	3f02      	subs	r7, #2
 800086c:	4429      	add	r1, r5
 800086e:	1acb      	subs	r3, r1, r3
 8000870:	b281      	uxth	r1, r0
 8000872:	fbb3 f0fe 	udiv	r0, r3, lr
 8000876:	fb0e 3310 	mls	r3, lr, r0, r3
 800087a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800087e:	fb00 f308 	mul.w	r3, r0, r8
 8000882:	428b      	cmp	r3, r1
 8000884:	d907      	bls.n	8000896 <__udivmoddi4+0x27e>
 8000886:	1869      	adds	r1, r5, r1
 8000888:	f100 3cff 	add.w	ip, r0, #4294967295
 800088c:	d217      	bcs.n	80008be <__udivmoddi4+0x2a6>
 800088e:	428b      	cmp	r3, r1
 8000890:	d915      	bls.n	80008be <__udivmoddi4+0x2a6>
 8000892:	3802      	subs	r0, #2
 8000894:	4429      	add	r1, r5
 8000896:	1ac9      	subs	r1, r1, r3
 8000898:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800089c:	e73b      	b.n	8000716 <__udivmoddi4+0xfe>
 800089e:	4637      	mov	r7, r6
 80008a0:	4630      	mov	r0, r6
 80008a2:	e709      	b.n	80006b8 <__udivmoddi4+0xa0>
 80008a4:	4607      	mov	r7, r0
 80008a6:	e6e7      	b.n	8000678 <__udivmoddi4+0x60>
 80008a8:	4618      	mov	r0, r3
 80008aa:	e6fb      	b.n	80006a4 <__udivmoddi4+0x8c>
 80008ac:	4541      	cmp	r1, r8
 80008ae:	d2ab      	bcs.n	8000808 <__udivmoddi4+0x1f0>
 80008b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80008b4:	eb69 020e 	sbc.w	r2, r9, lr
 80008b8:	3801      	subs	r0, #1
 80008ba:	4613      	mov	r3, r2
 80008bc:	e7a4      	b.n	8000808 <__udivmoddi4+0x1f0>
 80008be:	4660      	mov	r0, ip
 80008c0:	e7e9      	b.n	8000896 <__udivmoddi4+0x27e>
 80008c2:	4618      	mov	r0, r3
 80008c4:	e795      	b.n	80007f2 <__udivmoddi4+0x1da>
 80008c6:	4667      	mov	r7, ip
 80008c8:	e7d1      	b.n	800086e <__udivmoddi4+0x256>
 80008ca:	4681      	mov	r9, r0
 80008cc:	e77c      	b.n	80007c8 <__udivmoddi4+0x1b0>
 80008ce:	3802      	subs	r0, #2
 80008d0:	442c      	add	r4, r5
 80008d2:	e747      	b.n	8000764 <__udivmoddi4+0x14c>
 80008d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80008d8:	442b      	add	r3, r5
 80008da:	e72f      	b.n	800073c <__udivmoddi4+0x124>
 80008dc:	4638      	mov	r0, r7
 80008de:	e708      	b.n	80006f2 <__udivmoddi4+0xda>
 80008e0:	4637      	mov	r7, r6
 80008e2:	e6e9      	b.n	80006b8 <__udivmoddi4+0xa0>

080008e4 <__aeabi_idiv0>:
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <Drv_MMA845x_Init>:

/* * * * * * * * * * * * * * * Module Functions * * * * * * * * * * * * * * * */

/* Global Functions ----------------------------------------------------------*/

Std_ReturnType Drv_MMA845x_Init(MMA845x_HandleTypeDef *hMMA845x) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]

	if (Drv_MMA845x_GetDeviceID(hMMA845x) != E_OK) {
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f000 fb11 	bl	8000f18 <Drv_MMA845x_GetDeviceID>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d003      	beq.n	8000904 <Drv_MMA845x_Init+0x1c>
		_Error_Handler(__FILE__, __LINE__);
 80008fc:	213d      	movs	r1, #61	; 0x3d
 80008fe:	483d      	ldr	r0, [pc, #244]	; (80009f4 <Drv_MMA845x_Init+0x10c>)
 8000900:	f004 fac6 	bl	8004e90 <_Error_Handler>
	}
	/* Control Register 1 configuration */
	if (Drv_MMA845x_EnableStandbyMode(hMMA845x) != E_OK) {
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f000 fc1a 	bl	800113e <Drv_MMA845x_EnableStandbyMode>
 800090a:	4603      	mov	r3, r0
 800090c:	2b01      	cmp	r3, #1
 800090e:	d003      	beq.n	8000918 <Drv_MMA845x_Init+0x30>
		_Error_Handler(__FILE__, __LINE__);
 8000910:	2141      	movs	r1, #65	; 0x41
 8000912:	4838      	ldr	r0, [pc, #224]	; (80009f4 <Drv_MMA845x_Init+0x10c>)
 8000914:	f004 fabc 	bl	8004e90 <_Error_Handler>
	}
	if (Drv_MMA845x_DisableFastreadMode(hMMA845x) != E_OK) {
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f000 fbae 	bl	800107a <Drv_MMA845x_DisableFastreadMode>
 800091e:	4603      	mov	r3, r0
 8000920:	2b01      	cmp	r3, #1
 8000922:	d003      	beq.n	800092c <Drv_MMA845x_Init+0x44>
		_Error_Handler(__FILE__, __LINE__);
 8000924:	2144      	movs	r1, #68	; 0x44
 8000926:	4833      	ldr	r0, [pc, #204]	; (80009f4 <Drv_MMA845x_Init+0x10c>)
 8000928:	f004 fab2 	bl	8004e90 <_Error_Handler>
	}
	if (Drv_MMA845x_EnableLowNoiseMode(hMMA845x) != E_OK) {
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f000 fc37 	bl	80011a0 <Drv_MMA845x_EnableLowNoiseMode>
 8000932:	4603      	mov	r3, r0
 8000934:	2b01      	cmp	r3, #1
 8000936:	d003      	beq.n	8000940 <Drv_MMA845x_Init+0x58>
		_Error_Handler(__FILE__, __LINE__);
 8000938:	2147      	movs	r1, #71	; 0x47
 800093a:	482e      	ldr	r0, [pc, #184]	; (80009f4 <Drv_MMA845x_Init+0x10c>)
 800093c:	f004 faa8 	bl	8004e90 <_Error_Handler>
	}
	if (Drv_MMA845x_SetDataRate(hMMA845x, hMMA845x->Init.DataRate) != E_OK) {
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f000 fc5c 	bl	8001204 <Drv_MMA845x_SetDataRate>
 800094c:	4603      	mov	r3, r0
 800094e:	2b01      	cmp	r3, #1
 8000950:	d003      	beq.n	800095a <Drv_MMA845x_Init+0x72>
		_Error_Handler(__FILE__, __LINE__);
 8000952:	214a      	movs	r1, #74	; 0x4a
 8000954:	4827      	ldr	r0, [pc, #156]	; (80009f4 <Drv_MMA845x_Init+0x10c>)
 8000956:	f004 fa9b 	bl	8004e90 <_Error_Handler>
	}
	if (Drv_MMA845x_SetAutoSleepRate(hMMA845x, hMMA845x->Init.SleepRate)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	78db      	ldrb	r3, [r3, #3]
 800095e:	4619      	mov	r1, r3
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f000 fd75 	bl	8001450 <Drv_MMA845x_SetAutoSleepRate>
 8000966:	4603      	mov	r3, r0
 8000968:	2b01      	cmp	r3, #1
 800096a:	d003      	beq.n	8000974 <Drv_MMA845x_Init+0x8c>
			!= E_OK) {
		_Error_Handler(__FILE__, __LINE__);
 800096c:	214e      	movs	r1, #78	; 0x4e
 800096e:	4821      	ldr	r0, [pc, #132]	; (80009f4 <Drv_MMA845x_Init+0x10c>)
 8000970:	f004 fa8e 	bl	8004e90 <_Error_Handler>
	}

	/* Control Register 2 configuration*/
	if (Drv_MMA845x_SetSleepModePowerScheme(hMMA845x,
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	785b      	ldrb	r3, [r3, #1]
 8000978:	4619      	mov	r1, r3
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f000 fe78 	bl	8001670 <Drv_MMA845x_SetSleepModePowerScheme>
 8000980:	4603      	mov	r3, r0
 8000982:	2b01      	cmp	r3, #1
 8000984:	d003      	beq.n	800098e <Drv_MMA845x_Init+0xa6>
			hMMA845x->Init.SleepSamplingMode) != E_OK) {
		_Error_Handler(__FILE__, __LINE__);
 8000986:	2154      	movs	r1, #84	; 0x54
 8000988:	481a      	ldr	r0, [pc, #104]	; (80009f4 <Drv_MMA845x_Init+0x10c>)
 800098a:	f004 fa81 	bl	8004e90 <_Error_Handler>
	}
	if (Drv_MMA845x_SetActiveModePowerScheme(hMMA845x,
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	789b      	ldrb	r3, [r3, #2]
 8000992:	4619      	mov	r1, r3
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f000 fde3 	bl	8001560 <Drv_MMA845x_SetActiveModePowerScheme>
 800099a:	4603      	mov	r3, r0
 800099c:	2b01      	cmp	r3, #1
 800099e:	d003      	beq.n	80009a8 <Drv_MMA845x_Init+0xc0>
			hMMA845x->Init.ActiveSamplingMode) != E_OK) {
		_Error_Handler(__FILE__, __LINE__);
 80009a0:	2158      	movs	r1, #88	; 0x58
 80009a2:	4814      	ldr	r0, [pc, #80]	; (80009f4 <Drv_MMA845x_Init+0x10c>)
 80009a4:	f004 fa74 	bl	8004e90 <_Error_Handler>
	}

	/* XYZ Data configuration */
	if (Drv_MMA845x_SetDynamicRange(hMMA845x, hMMA845x->Init.DynamicRange)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	791b      	ldrb	r3, [r3, #4]
 80009ac:	4619      	mov	r1, r3
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f000 fad3 	bl	8000f5a <Drv_MMA845x_SetDynamicRange>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d003      	beq.n	80009c2 <Drv_MMA845x_Init+0xda>
			!= E_OK) {
		_Error_Handler(__FILE__, __LINE__);
 80009ba:	215e      	movs	r1, #94	; 0x5e
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <Drv_MMA845x_Init+0x10c>)
 80009be:	f004 fa67 	bl	8004e90 <_Error_Handler>
	}
	if (Drv_MMA845x_DisableHPF(hMMA845x) != E_OK) {
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f000 fb2b 	bl	800101e <Drv_MMA845x_DisableHPF>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d003      	beq.n	80009d6 <Drv_MMA845x_Init+0xee>
		_Error_Handler(__FILE__, __LINE__);
 80009ce:	2161      	movs	r1, #97	; 0x61
 80009d0:	4808      	ldr	r0, [pc, #32]	; (80009f4 <Drv_MMA845x_Init+0x10c>)
 80009d2:	f004 fa5d 	bl	8004e90 <_Error_Handler>
	}

	if(Drv_MMA845x_EnableActiveMode(hMMA845x) != E_OK)
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f000 fb80 	bl	80010dc <Drv_MMA845x_EnableActiveMode>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d003      	beq.n	80009ea <Drv_MMA845x_Init+0x102>
	{
		_Error_Handler(__FILE__, __LINE__);
 80009e2:	2166      	movs	r1, #102	; 0x66
 80009e4:	4803      	ldr	r0, [pc, #12]	; (80009f4 <Drv_MMA845x_Init+0x10c>)
 80009e6:	f004 fa53 	bl	8004e90 <_Error_Handler>
	}

	return (E_OK);
 80009ea:	2301      	movs	r3, #1
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	08006150 	.word	0x08006150

080009f8 <Drv_MMA845x_MainFunction>:
	return 0;
}



Std_ReturnType Drv_MMA845x_MainFunction(MMA845x_HandleTypeDef *hMMA845x) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	// Pooling Mode
	/*
	 ** Poll the ZYXDR status bit and wait for it to set.
	 */
	if (Drv_MMA845x_UpdateStatus(hMMA845x) == E_NOT_OK) {
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f000 f81f 	bl	8000a44 <Drv_MMA845x_UpdateStatus>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d101      	bne.n	8000a10 <Drv_MMA845x_MainFunction+0x18>
		return (E_NOT_OK);
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e015      	b.n	8000a3c <Drv_MMA845x_MainFunction+0x44>
	}

	if (hMMA845x->Status.ZYXOW == 1) {
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d00c      	beq.n	8000a3a <Drv_MMA845x_MainFunction+0x42>

		/*
		 ** Read 14/12/10-bit XYZ results using a 6 byte IIC access.
		 */
		if (Drv_MMA845x_GetXYZ(hMMA845x) == E_OK) {
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f000 f89a 	bl	8000b5a <Drv_MMA845x_GetXYZ>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d104      	bne.n	8000a36 <Drv_MMA845x_MainFunction+0x3e>
			// Process the data
			Drv_MMA845x_RxXYZCpltCallback(hMMA845x);
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f004 f93f 	bl	8004cb0 <Drv_MMA845x_RxXYZCpltCallback>

			return (E_OK);
 8000a32:	2301      	movs	r3, #1
 8000a34:	e002      	b.n	8000a3c <Drv_MMA845x_MainFunction+0x44>
		} else {
			return (E_NOT_OK);
 8000a36:	2300      	movs	r3, #0
 8000a38:	e000      	b.n	8000a3c <Drv_MMA845x_MainFunction+0x44>
		}
	}
	return (E_OK);
 8000a3a:	2301      	movs	r3, #1
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <Drv_MMA845x_UpdateStatus>:
/**
 * @brief Description of the function
 * @param hMMA845x Pointer to the Handling structure.
 * @retval E_OK if the Operation is Successful, E_NOT_OK otherwise
 */
Std_ReturnType Drv_MMA845x_UpdateStatus(MMA845x_HandleTypeDef *hMMA845x) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	uint8_t rxbuf;
	// Check if the handle is set
	if (hMMA845x == 0) {
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d101      	bne.n	8000a56 <Drv_MMA845x_UpdateStatus+0x12>
		return (E_NOT_OK);
 8000a52:	2300      	movs	r3, #0
 8000a54:	e07d      	b.n	8000b52 <Drv_MMA845x_UpdateStatus+0x10e>
	}

	// Read the register From the device
	if (Drv_MMA845x_ReadReg(hMMA845x, REG_MMA845x_STATUS, (uint8_t *) &rxbuf)
 8000a56:	f107 030f 	add.w	r3, r7, #15
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f000 fe8e 	bl	8001780 <Drv_MMA845x_ReadReg>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d172      	bne.n	8000b50 <Drv_MMA845x_UpdateStatus+0x10c>
			== E_OK) {

		hMMA845x->Registers.STATUS = rxbuf;
 8000a6a:	7bfa      	ldrb	r2, [r7, #15]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	71da      	strb	r2, [r3, #7]
		// Update Status Structure
		hMMA845x->Status.ZYXOW = GET_REG_STATUS_ZYXOW(
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	79db      	ldrb	r3, [r3, #7]
 8000a74:	09db      	lsrs	r3, r3, #7
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	b2d9      	uxtb	r1, r3
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 8000a84:	f361 0300 	bfi	r3, r1, #0, #1
 8000a88:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
				hMMA845x->Registers.STATUS);
		hMMA845x->Status.ZOW = GET_REG_STATUS_ZOW(hMMA845x->Registers.STATUS);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	79db      	ldrb	r3, [r3, #7]
 8000a90:	099b      	lsrs	r3, r3, #6
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	b2d9      	uxtb	r1, r3
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 8000aa0:	f361 0341 	bfi	r3, r1, #1, #1
 8000aa4:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
		hMMA845x->Status.YOW = GET_REG_STATUS_YOW(hMMA845x->Registers.STATUS);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	79db      	ldrb	r3, [r3, #7]
 8000aac:	095b      	lsrs	r3, r3, #5
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	b2d9      	uxtb	r1, r3
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 8000abc:	f361 0382 	bfi	r3, r1, #2, #1
 8000ac0:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
		hMMA845x->Status.XOW = GET_REG_STATUS_XOW(hMMA845x->Registers.STATUS);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	79db      	ldrb	r3, [r3, #7]
 8000ac8:	091b      	lsrs	r3, r3, #4
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	b2d9      	uxtb	r1, r3
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 8000ad8:	f361 03c3 	bfi	r3, r1, #3, #1
 8000adc:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
		hMMA845x->Status.ZYXDR = GET_REG_STATUS_ZYXDR(
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	79db      	ldrb	r3, [r3, #7]
 8000ae4:	08db      	lsrs	r3, r3, #3
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	b2d9      	uxtb	r1, r3
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 8000af4:	f361 1304 	bfi	r3, r1, #4, #1
 8000af8:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
				hMMA845x->Registers.STATUS);
		hMMA845x->Status.ZDR = GET_REG_STATUS_ZDR(hMMA845x->Registers.STATUS);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	79db      	ldrb	r3, [r3, #7]
 8000b00:	089b      	lsrs	r3, r3, #2
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	b2d9      	uxtb	r1, r3
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 8000b10:	f361 1345 	bfi	r3, r1, #5, #1
 8000b14:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
		hMMA845x->Status.YDR = GET_REG_STATUS_YDR(hMMA845x->Registers.STATUS);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	79db      	ldrb	r3, [r3, #7]
 8000b1c:	085b      	lsrs	r3, r3, #1
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	b2d9      	uxtb	r1, r3
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 8000b2c:	f361 1386 	bfi	r3, r1, #6, #1
 8000b30:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
		hMMA845x->Status.XDR = GET_REG_STATUS_XDR(hMMA845x->Registers.STATUS);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	79db      	ldrb	r3, [r3, #7]
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	b2d9      	uxtb	r1, r3
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 8000b44:	f361 13c7 	bfi	r3, r1, #7, #1
 8000b48:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a

		return (E_OK);
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e000      	b.n	8000b52 <Drv_MMA845x_UpdateStatus+0x10e>
	}
	return (E_NOT_OK);
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <Drv_MMA845x_GetXYZ>:
/**
 * @brief Description of the function
 * @param hMMA845x Pointer to the Handling structure.
 * @retval E_OK if the Operation is Successful, E_NOT_OK otherwise
 */
Std_ReturnType Drv_MMA845x_GetXYZ(MMA845x_HandleTypeDef *hMMA845x) {
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b084      	sub	sp, #16
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
	uint8_t rxbuf;
	// Check if the handle is set
	if (hMMA845x == 0) {
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d101      	bne.n	8000b6c <Drv_MMA845x_GetXYZ+0x12>
		return (E_NOT_OK);
 8000b68:	2300      	movs	r3, #0
 8000b6a:	e05d      	b.n	8000c28 <Drv_MMA845x_GetXYZ+0xce>
	}

	// Read the register From the device
	if (Drv_MMA845x_ReadReg(hMMA845x, REG_MMA845x_OUT_X_MSB, (uint8_t *) &rxbuf)
 8000b6c:	f107 030f 	add.w	r3, r7, #15
 8000b70:	461a      	mov	r2, r3
 8000b72:	2101      	movs	r1, #1
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f000 fe03 	bl	8001780 <Drv_MMA845x_ReadReg>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d001      	beq.n	8000b84 <Drv_MMA845x_GetXYZ+0x2a>
			!= E_OK) {
		return (E_NOT_OK);
 8000b80:	2300      	movs	r3, #0
 8000b82:	e051      	b.n	8000c28 <Drv_MMA845x_GetXYZ+0xce>
	}
	hMMA845x->Registers.OUT_X_MSB = rxbuf;
 8000b84:	7bfa      	ldrb	r2, [r7, #15]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	721a      	strb	r2, [r3, #8]
	// Read the register From the device
	if (Drv_MMA845x_ReadReg(hMMA845x, REG_MMA845x_OUT_X_LSB, (uint8_t *) &rxbuf)
 8000b8a:	f107 030f 	add.w	r3, r7, #15
 8000b8e:	461a      	mov	r2, r3
 8000b90:	2102      	movs	r1, #2
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f000 fdf4 	bl	8001780 <Drv_MMA845x_ReadReg>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d001      	beq.n	8000ba2 <Drv_MMA845x_GetXYZ+0x48>
			!= E_OK) {
		return (E_NOT_OK);
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e042      	b.n	8000c28 <Drv_MMA845x_GetXYZ+0xce>
	}
	hMMA845x->Registers.OUT_X_LSB = rxbuf;
 8000ba2:	7bfa      	ldrb	r2, [r7, #15]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	725a      	strb	r2, [r3, #9]
	// Read the register From the device
	if (Drv_MMA845x_ReadReg(hMMA845x, REG_MMA845x_OUT_Y_MSB, (uint8_t *) &rxbuf)
 8000ba8:	f107 030f 	add.w	r3, r7, #15
 8000bac:	461a      	mov	r2, r3
 8000bae:	2103      	movs	r1, #3
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f000 fde5 	bl	8001780 <Drv_MMA845x_ReadReg>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d001      	beq.n	8000bc0 <Drv_MMA845x_GetXYZ+0x66>
			!= E_OK) {
		return (E_NOT_OK);
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e033      	b.n	8000c28 <Drv_MMA845x_GetXYZ+0xce>
	}
	hMMA845x->Registers.OUT_Y_MSB = rxbuf;
 8000bc0:	7bfa      	ldrb	r2, [r7, #15]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	729a      	strb	r2, [r3, #10]
	// Read the register From the device
	if (Drv_MMA845x_ReadReg(hMMA845x, REG_MMA845x_OUT_Y_LSB, (uint8_t *) &rxbuf)
 8000bc6:	f107 030f 	add.w	r3, r7, #15
 8000bca:	461a      	mov	r2, r3
 8000bcc:	2104      	movs	r1, #4
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f000 fdd6 	bl	8001780 <Drv_MMA845x_ReadReg>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d001      	beq.n	8000bde <Drv_MMA845x_GetXYZ+0x84>
			!= E_OK) {
		return (E_NOT_OK);
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e024      	b.n	8000c28 <Drv_MMA845x_GetXYZ+0xce>
	}
	hMMA845x->Registers.OUT_Y_LSB = rxbuf;
 8000bde:	7bfa      	ldrb	r2, [r7, #15]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	72da      	strb	r2, [r3, #11]
	// Read the register From the device
	if (Drv_MMA845x_ReadReg(hMMA845x, REG_MMA845x_OUT_Z_MSB, (uint8_t *) &rxbuf)
 8000be4:	f107 030f 	add.w	r3, r7, #15
 8000be8:	461a      	mov	r2, r3
 8000bea:	2105      	movs	r1, #5
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f000 fdc7 	bl	8001780 <Drv_MMA845x_ReadReg>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d001      	beq.n	8000bfc <Drv_MMA845x_GetXYZ+0xa2>
			!= E_OK) {
		return (E_NOT_OK);
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	e015      	b.n	8000c28 <Drv_MMA845x_GetXYZ+0xce>
	}
	hMMA845x->Registers.OUT_Z_MSB = rxbuf;
 8000bfc:	7bfa      	ldrb	r2, [r7, #15]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	731a      	strb	r2, [r3, #12]
	// Read the register From the device
	if (Drv_MMA845x_ReadReg(hMMA845x, REG_MMA845x_OUT_Z_LSB, (uint8_t *) &rxbuf)
 8000c02:	f107 030f 	add.w	r3, r7, #15
 8000c06:	461a      	mov	r2, r3
 8000c08:	2106      	movs	r1, #6
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f000 fdb8 	bl	8001780 <Drv_MMA845x_ReadReg>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d001      	beq.n	8000c1a <Drv_MMA845x_GetXYZ+0xc0>
			!= E_OK) {
		return (E_NOT_OK);
 8000c16:	2300      	movs	r3, #0
 8000c18:	e006      	b.n	8000c28 <Drv_MMA845x_GetXYZ+0xce>
	}
	hMMA845x->Registers.OUT_Z_LSB = rxbuf;
 8000c1a:	7bfa      	ldrb	r2, [r7, #15]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	735a      	strb	r2, [r3, #13]
	Drv_MMA845x_CalulateXYZ(hMMA845x);
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f000 f805 	bl	8000c30 <Drv_MMA845x_CalulateXYZ>
	return (E_OK);
 8000c26:	2301      	movs	r3, #1
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <Drv_MMA845x_CalulateXYZ>:
    union { float f; uint32_t i; } u; u.f = 32768.0f; u.i |= x;
    return u.f - 32768.0f;
}


Std_ReturnType Drv_MMA845x_CalulateXYZ(MMA845x_HandleTypeDef *hMMA845x) {
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

	 union { float f; uint32_t i; } uToFloat32;

	hMMA845x->Data.x = CONVERT_TO_U16(hMMA845x->Registers.OUT_X_MSB,
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	7a5b      	ldrb	r3, [r3, #9]
 8000c3c:	021b      	lsls	r3, r3, #8
 8000c3e:	b21a      	sxth	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	7a1b      	ldrb	r3, [r3, #8]
 8000c44:	b21b      	sxth	r3, r3
 8000c46:	4313      	orrs	r3, r2
 8000c48:	b21a      	sxth	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			hMMA845x->Registers.OUT_X_LSB);
	hMMA845x->Data.y = CONVERT_TO_U16(hMMA845x->Registers.OUT_Y_MSB,
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	7adb      	ldrb	r3, [r3, #11]
 8000c54:	021b      	lsls	r3, r3, #8
 8000c56:	b21a      	sxth	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	7a9b      	ldrb	r3, [r3, #10]
 8000c5c:	b21b      	sxth	r3, r3
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	b21a      	sxth	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			hMMA845x->Registers.OUT_Y_LSB);

	hMMA845x->Data.z = CONVERT_TO_U16(hMMA845x->Registers.OUT_Z_MSB,
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	7b5b      	ldrb	r3, [r3, #13]
 8000c6c:	021b      	lsls	r3, r3, #8
 8000c6e:	b21a      	sxth	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	7b1b      	ldrb	r3, [r3, #12]
 8000c74:	b21b      	sxth	r3, r3
 8000c76:	4313      	orrs	r3, r2
 8000c78:	b21a      	sxth	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			hMMA845x->Registers.OUT_Z_LSB);

	if (hMMA845x->Registers.OUT_X_MSB > 0x7F) {
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	7a1b      	ldrb	r3, [r3, #8]
 8000c84:	b25b      	sxtb	r3, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	da12      	bge.n	8000cb0 <Drv_MMA845x_CalulateXYZ+0x80>
		hMMA845x->Data.x &= 0xFFFC;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8000c90:	f023 0303 	bic.w	r3, r3, #3
 8000c94:	b21a      	sxth	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		hMMA845x->Data.x = ~hMMA845x->Data.x + 1;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	425b      	negs	r3, r3
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	b21a      	sxth	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}
	if (hMMA845x->Registers.OUT_Y_MSB > 0x7F) {
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	7a9b      	ldrb	r3, [r3, #10]
 8000cb4:	b25b      	sxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	da12      	bge.n	8000ce0 <Drv_MMA845x_CalulateXYZ+0xb0>
		hMMA845x->Data.x &= 0xFFFC;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8000cc0:	f023 0303 	bic.w	r3, r3, #3
 8000cc4:	b21a      	sxth	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		hMMA845x->Data.y = ~hMMA845x->Data.y + 1;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	425b      	negs	r3, r3
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	b21a      	sxth	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	}
	if (hMMA845x->Registers.OUT_Z_MSB > 0x7F) {
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	7b1b      	ldrb	r3, [r3, #12]
 8000ce4:	b25b      	sxtb	r3, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	da12      	bge.n	8000d10 <Drv_MMA845x_CalulateXYZ+0xe0>
		hMMA845x->Data.x &= 0xFFFC;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8000cf0:	f023 0303 	bic.w	r3, r3, #3
 8000cf4:	b21a      	sxth	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		hMMA845x->Data.z = ~hMMA845x->Data.z + 1;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	425b      	negs	r3, r3
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	b21a      	sxth	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	//MMA8452Q
	// 1. 12-bit data
	// 2g (1024 counts/g = 1 mg/LSB) 4g (512 counts/g = 2 mg /LSB) 8g (256 counts/g = 3.9 mg/LSB)

	switch (hMMA845x->Init.DynamicRange) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	791b      	ldrb	r3, [r3, #4]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d054      	beq.n	8000dc2 <Drv_MMA845x_CalulateXYZ+0x192>
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	f000 80a1 	beq.w	8000e60 <Drv_MMA845x_CalulateXYZ+0x230>
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f040 80ed 	bne.w	8000efe <Drv_MMA845x_CalulateXYZ+0x2ce>
	case HAL_MMA845x_FULL_SCALE_2G:

		hMMA845x->Data.gx = ((hMMA845x->Registers.OUT_X_MSB & 0x20) >> 5);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	7a1b      	ldrb	r3, [r3, #8]
 8000d28:	115b      	asrs	r3, r3, #5
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	ee07 3a90 	vmov	s15, r3
 8000d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		hMMA845x->Data.gx = (float) hMMA845x->Data.x/ 1024.0;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8000d42:	ee07 3a90 	vmov	s15, r3
 8000d46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d4a:	eddf 6a70 	vldr	s13, [pc, #448]	; 8000f0c <Drv_MMA845x_CalulateXYZ+0x2dc>
 8000d4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		hMMA845x->Data.gy = ((hMMA845x->Registers.OUT_Y_MSB & 0x20) >> 5);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	7a9b      	ldrb	r3, [r3, #10]
 8000d5c:	115b      	asrs	r3, r3, #5
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	ee07 3a90 	vmov	s15, r3
 8000d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		hMMA845x->Data.gy = (float) hMMA845x->Data.y/ 1024.0;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8000d76:	ee07 3a90 	vmov	s15, r3
 8000d7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d7e:	eddf 6a63 	vldr	s13, [pc, #396]	; 8000f0c <Drv_MMA845x_CalulateXYZ+0x2dc>
 8000d82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		hMMA845x->Data.gz = ((hMMA845x->Registers.OUT_Z_MSB & 0x20) >> 5);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	7b1b      	ldrb	r3, [r3, #12]
 8000d90:	115b      	asrs	r3, r3, #5
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	ee07 3a90 	vmov	s15, r3
 8000d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		hMMA845x->Data.gz = (float) hMMA845x->Data.z/ 1024.0;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8000daa:	ee07 3a90 	vmov	s15, r3
 8000dae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000db2:	eddf 6a56 	vldr	s13, [pc, #344]	; 8000f0c <Drv_MMA845x_CalulateXYZ+0x2dc>
 8000db6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		break;
 8000dc0:	e09d      	b.n	8000efe <Drv_MMA845x_CalulateXYZ+0x2ce>

	case HAL_MMA845x_FULL_SCALE_4G:
		hMMA845x->Data.gx = ((hMMA845x->Registers.OUT_X_MSB & 0x30) >> 4);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	7a1b      	ldrb	r3, [r3, #8]
 8000dc6:	111b      	asrs	r3, r3, #4
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	ee07 3a90 	vmov	s15, r3
 8000dd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		hMMA845x->Data.gx = (float) hMMA845x->Data.x/ 512.0;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8000de0:	ee07 3a90 	vmov	s15, r3
 8000de4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000de8:	eddf 6a49 	vldr	s13, [pc, #292]	; 8000f10 <Drv_MMA845x_CalulateXYZ+0x2e0>
 8000dec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		hMMA845x->Data.gy = ((hMMA845x->Registers.OUT_Y_MSB & 0x30) >> 4);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	7a9b      	ldrb	r3, [r3, #10]
 8000dfa:	111b      	asrs	r3, r3, #4
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	ee07 3a90 	vmov	s15, r3
 8000e04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		hMMA845x->Data.gy = (float) hMMA845x->Data.y/ 512.0;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8000e14:	ee07 3a90 	vmov	s15, r3
 8000e18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e1c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8000f10 <Drv_MMA845x_CalulateXYZ+0x2e0>
 8000e20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		hMMA845x->Data.gz = ((hMMA845x->Registers.OUT_Z_MSB & 0x30) >> 4);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	7b1b      	ldrb	r3, [r3, #12]
 8000e2e:	111b      	asrs	r3, r3, #4
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	ee07 3a90 	vmov	s15, r3
 8000e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		hMMA845x->Data.gz = (float) hMMA845x->Data.z/ 512.0;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8000e48:	ee07 3a90 	vmov	s15, r3
 8000e4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e50:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8000f10 <Drv_MMA845x_CalulateXYZ+0x2e0>
 8000e54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		break;
 8000e5e:	e04e      	b.n	8000efe <Drv_MMA845x_CalulateXYZ+0x2ce>

	case HAL_MMA845x_FULL_SCALE_8G:
		hMMA845x->Data.gx = ((hMMA845x->Registers.OUT_X_MSB & 0x38) >> 3);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	7a1b      	ldrb	r3, [r3, #8]
 8000e64:	10db      	asrs	r3, r3, #3
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	ee07 3a90 	vmov	s15, r3
 8000e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		hMMA845x->Data.gx = (float) hMMA845x->Data.x/ 256.0;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8000e7e:	ee07 3a90 	vmov	s15, r3
 8000e82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e86:	eddf 6a23 	vldr	s13, [pc, #140]	; 8000f14 <Drv_MMA845x_CalulateXYZ+0x2e4>
 8000e8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		hMMA845x->Data.gy = ((hMMA845x->Registers.OUT_Y_MSB & 0x38) >> 3);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	7a9b      	ldrb	r3, [r3, #10]
 8000e98:	10db      	asrs	r3, r3, #3
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	ee07 3a90 	vmov	s15, r3
 8000ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		hMMA845x->Data.gy = (float) hMMA845x->Data.y/ 256.0;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8000eb2:	ee07 3a90 	vmov	s15, r3
 8000eb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eba:	eddf 6a16 	vldr	s13, [pc, #88]	; 8000f14 <Drv_MMA845x_CalulateXYZ+0x2e4>
 8000ebe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		hMMA845x->Data.gz = ((hMMA845x->Registers.OUT_Z_MSB & 0x38) >> 3);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	7b1b      	ldrb	r3, [r3, #12]
 8000ecc:	10db      	asrs	r3, r3, #3
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	ee07 3a90 	vmov	s15, r3
 8000ed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		hMMA845x->Data.gz = (float) hMMA845x->Data.z/ 256.0;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8000ee6:	ee07 3a90 	vmov	s15, r3
 8000eea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eee:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000f14 <Drv_MMA845x_CalulateXYZ+0x2e4>
 8000ef2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		break;
 8000efc:	bf00      	nop
	}

	return (E_OK);
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	44800000 	.word	0x44800000
 8000f10:	44000000 	.word	0x44000000
 8000f14:	43800000 	.word	0x43800000

08000f18 <Drv_MMA845x_GetDeviceID>:
/**
 * @brief Description of the function
 * @param hMMA845x Pointer to the Handling structure.
 * @retval E_OK if the Operation is Successful, E_NOT_OK otherwise
 */
Std_ReturnType Drv_MMA845x_GetDeviceID(MMA845x_HandleTypeDef *hMMA845x) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

	uint8_t rxbuf;
	// Check if the handle is set
	if (hMMA845x == 0) {
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <Drv_MMA845x_GetDeviceID+0x12>
		return (E_NOT_OK);
 8000f26:	2300      	movs	r3, #0
 8000f28:	e013      	b.n	8000f52 <Drv_MMA845x_GetDeviceID+0x3a>
	}

// Read the register From the device
	if (Drv_MMA845x_ReadReg(hMMA845x, REG_MMA845x_WHO_AM_I, (uint8_t *) &rxbuf) == E_OK) {
 8000f2a:	f107 030f 	add.w	r3, r7, #15
 8000f2e:	461a      	mov	r2, r3
 8000f30:	210d      	movs	r1, #13
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f000 fc24 	bl	8001780 <Drv_MMA845x_ReadReg>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d108      	bne.n	8000f50 <Drv_MMA845x_GetDeviceID+0x38>

	    hMMA845x->Registers.WHO_AM_I = rxbuf;
 8000f3e:	7bfa      	ldrb	r2, [r7, #15]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	751a      	strb	r2, [r3, #20]

	    // Update Status Structure
		hMMA845x->DeviceID = hMMA845x->Registers.WHO_AM_I;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	7d1a      	ldrb	r2, [r3, #20]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	719a      	strb	r2, [r3, #6]

		return (E_OK);
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e000      	b.n	8000f52 <Drv_MMA845x_GetDeviceID+0x3a>
	}
	return (E_NOT_OK);
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <Drv_MMA845x_SetDynamicRange>:
 * @brief Description of the function
 * @param hMMA845x Pointer to the Handling structure.
 * @retval E_OK if the Operation is Successful, E_NOT_OK otherwise
 */
Std_ReturnType Drv_MMA845x_SetDynamicRange(MMA845x_HandleTypeDef *hMMA845x,
		MMA845x_DynamicRange_TypeDef DynamicRange) {
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b084      	sub	sp, #16
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	460b      	mov	r3, r1
 8000f64:	70fb      	strb	r3, [r7, #3]
	uint8_t rxbuf;
// Check if the handle is set
	if (hMMA845x == 0) {
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d101      	bne.n	8000f70 <Drv_MMA845x_SetDynamicRange+0x16>
		return (E_NOT_OK);
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	e052      	b.n	8001016 <Drv_MMA845x_SetDynamicRange+0xbc>
	}

// Read the register From the device
	if (Drv_MMA845x_ReadReg(hMMA845x, REG_MMA845x_XYZ_DATA_CFG,
 8000f70:	f107 030f 	add.w	r3, r7, #15
 8000f74:	461a      	mov	r2, r3
 8000f76:	210e      	movs	r1, #14
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f000 fc01 	bl	8001780 <Drv_MMA845x_ReadReg>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d147      	bne.n	8001014 <Drv_MMA845x_SetDynamicRange+0xba>
			(uint8_t*) &rxbuf) == E_OK) {
		hMMA845x->Registers.XYZ_DATA_CFG = rxbuf;
 8000f84:	7bfa      	ldrb	r2, [r7, #15]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	755a      	strb	r2, [r3, #21]
		switch (DynamicRange) {
 8000f8a:	78fb      	ldrb	r3, [r7, #3]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d012      	beq.n	8000fb6 <Drv_MMA845x_SetDynamicRange+0x5c>
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d01f      	beq.n	8000fd4 <Drv_MMA845x_SetDynamicRange+0x7a>
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d12c      	bne.n	8000ff2 <Drv_MMA845x_SetDynamicRange+0x98>
		case HAL_MMA845x_FULL_SCALE_2G:
			CLR_REG_XYZ_DATA_CFG_FS0(hMMA845x->Registers.XYZ_DATA_CFG);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	7d5b      	ldrb	r3, [r3, #21]
 8000f9c:	f023 0301 	bic.w	r3, r3, #1
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	755a      	strb	r2, [r3, #21]
			CLR_REG_XYZ_DATA_CFG_FS1(hMMA845x->Registers.XYZ_DATA_CFG);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	7d5b      	ldrb	r3, [r3, #21]
 8000faa:	f023 0302 	bic.w	r3, r3, #2
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	755a      	strb	r2, [r3, #21]

			break;
 8000fb4:	e01f      	b.n	8000ff6 <Drv_MMA845x_SetDynamicRange+0x9c>
		case HAL_MMA845x_FULL_SCALE_4G:
			SET_REG_XYZ_DATA_CFG_FS0(hMMA845x->Registers.XYZ_DATA_CFG);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	7d5b      	ldrb	r3, [r3, #21]
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	755a      	strb	r2, [r3, #21]
			CLR_REG_XYZ_DATA_CFG_FS1(hMMA845x->Registers.XYZ_DATA_CFG);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	7d5b      	ldrb	r3, [r3, #21]
 8000fc8:	f023 0302 	bic.w	r3, r3, #2
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	755a      	strb	r2, [r3, #21]
			break;
 8000fd2:	e010      	b.n	8000ff6 <Drv_MMA845x_SetDynamicRange+0x9c>
		case HAL_MMA845x_FULL_SCALE_8G:
			CLR_REG_XYZ_DATA_CFG_FS0(hMMA845x->Registers.XYZ_DATA_CFG);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	7d5b      	ldrb	r3, [r3, #21]
 8000fd8:	f023 0301 	bic.w	r3, r3, #1
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	755a      	strb	r2, [r3, #21]
			SET_REG_XYZ_DATA_CFG_FS1(hMMA845x->Registers.XYZ_DATA_CFG);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	7d5b      	ldrb	r3, [r3, #21]
 8000fe6:	f043 0302 	orr.w	r3, r3, #2
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	755a      	strb	r2, [r3, #21]
			break;
 8000ff0:	e001      	b.n	8000ff6 <Drv_MMA845x_SetDynamicRange+0x9c>
		default:
			return (E_NOT_OK);
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e00f      	b.n	8001016 <Drv_MMA845x_SetDynamicRange+0xbc>
			break;
		}

		// Enable standby mode
		Drv_MMA845x_EnableStandbyMode(hMMA845x);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 f8a1 	bl	800113e <Drv_MMA845x_EnableStandbyMode>

		// Write the updated register to the device
		if (Drv_MMA845x_WriteReg(hMMA845x, REG_MMA845x_XYZ_DATA_CFG,
				&hMMA845x->Registers.XYZ_DATA_CFG) == E_OK) {
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3315      	adds	r3, #21
		if (Drv_MMA845x_WriteReg(hMMA845x, REG_MMA845x_XYZ_DATA_CFG,
 8001000:	461a      	mov	r2, r3
 8001002:	210e      	movs	r1, #14
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 fbed 	bl	80017e4 <Drv_MMA845x_WriteReg>
 800100a:	4603      	mov	r3, r0
 800100c:	2b01      	cmp	r3, #1
 800100e:	d101      	bne.n	8001014 <Drv_MMA845x_SetDynamicRange+0xba>
			return (E_OK);
 8001010:	2301      	movs	r3, #1
 8001012:	e000      	b.n	8001016 <Drv_MMA845x_SetDynamicRange+0xbc>
		}

	}
	return (E_NOT_OK);
 8001014:	2300      	movs	r3, #0

}
 8001016:	4618      	mov	r0, r3
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <Drv_MMA845x_DisableHPF>:
/**
 * @brief Description of the function
 * @param hMMA845x Pointer to the Handling structure.
 * @retval E_OK if the Operation is Successful, E_NOT_OK otherwise
 */
Std_ReturnType Drv_MMA845x_DisableHPF(MMA845x_HandleTypeDef *hMMA845x) {
 800101e:	b580      	push	{r7, lr}
 8001020:	b084      	sub	sp, #16
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]

	uint8_t rxbuf;

// Check if the handle is set
	if (hMMA845x == 0) {
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d101      	bne.n	8001030 <Drv_MMA845x_DisableHPF+0x12>
		return (E_NOT_OK);
 800102c:	2300      	movs	r3, #0
 800102e:	e020      	b.n	8001072 <Drv_MMA845x_DisableHPF+0x54>
	}

// Read the register From the device
	if (Drv_MMA845x_ReadReg(hMMA845x, REG_MMA845x_XYZ_DATA_CFG,
 8001030:	f107 030f 	add.w	r3, r7, #15
 8001034:	461a      	mov	r2, r3
 8001036:	210e      	movs	r1, #14
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 fba1 	bl	8001780 <Drv_MMA845x_ReadReg>
 800103e:	4603      	mov	r3, r0
 8001040:	2b01      	cmp	r3, #1
 8001042:	d115      	bne.n	8001070 <Drv_MMA845x_DisableHPF+0x52>
			(uint8_t*) &rxbuf) == E_OK) {
		hMMA845x->Registers.XYZ_DATA_CFG = rxbuf;
 8001044:	7bfa      	ldrb	r2, [r7, #15]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	755a      	strb	r2, [r3, #21]
		// Update the register
		CLR_REG_XYZ_DATA_CFG_HPF_OUT(hMMA845x->Registers.XYZ_DATA_CFG);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	7d5b      	ldrb	r3, [r3, #21]
 800104e:	f023 0310 	bic.w	r3, r3, #16
 8001052:	b2da      	uxtb	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	755a      	strb	r2, [r3, #21]

		// Write the updated register to the device
		if (Drv_MMA845x_WriteReg(hMMA845x, REG_MMA845x_XYZ_DATA_CFG,
				&hMMA845x->Registers.XYZ_DATA_CFG) == E_OK) {
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3315      	adds	r3, #21
		if (Drv_MMA845x_WriteReg(hMMA845x, REG_MMA845x_XYZ_DATA_CFG,
 800105c:	461a      	mov	r2, r3
 800105e:	210e      	movs	r1, #14
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 fbbf 	bl	80017e4 <Drv_MMA845x_WriteReg>
 8001066:	4603      	mov	r3, r0
 8001068:	2b01      	cmp	r3, #1
 800106a:	d101      	bne.n	8001070 <Drv_MMA845x_DisableHPF+0x52>
			return (E_OK);
 800106c:	2301      	movs	r3, #1
 800106e:	e000      	b.n	8001072 <Drv_MMA845x_DisableHPF+0x54>
		}
	}
	return (E_NOT_OK);
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <Drv_MMA845x_DisableFastreadMode>:
/**
 * @brief Description of the function
 * @param hMMA845x Pointer to the Handling structure.
 * @retval E_OK if the Operation is Successful, E_NOT_OK otherwise
 */
Std_ReturnType Drv_MMA845x_DisableFastreadMode(MMA845x_HandleTypeDef *hMMA845x) {
 800107a:	b580      	push	{r7, lr}
 800107c:	b084      	sub	sp, #16
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
	uint8_t rxbuf;
	// Check if the handle is set
	if (hMMA845x == 0) {
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d101      	bne.n	800108c <Drv_MMA845x_DisableFastreadMode+0x12>
		return (E_NOT_OK);
 8001088:	2300      	movs	r3, #0
 800108a:	e023      	b.n	80010d4 <Drv_MMA845x_DisableFastreadMode+0x5a>
	}

	// Read the register From the device
	if (Drv_MMA845x_ReadReg(hMMA845x, REG_MMA845x_CTRL_REG1, (uint8_t*) &rxbuf)
 800108c:	f107 030f 	add.w	r3, r7, #15
 8001090:	461a      	mov	r2, r3
 8001092:	212a      	movs	r1, #42	; 0x2a
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 fb73 	bl	8001780 <Drv_MMA845x_ReadReg>
 800109a:	4603      	mov	r3, r0
 800109c:	2b01      	cmp	r3, #1
 800109e:	d118      	bne.n	80010d2 <Drv_MMA845x_DisableFastreadMode+0x58>
			== E_OK) {
		hMMA845x->Registers.CTRL_REG1 = rxbuf;
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		// Update the register
		CLR_REG_CTRL_REG1_FREAD(hMMA845x->Registers.CTRL_REG1);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80010ae:	f023 0302 	bic.w	r3, r3, #2
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

		// Write the updated register to the device
		if (Drv_MMA845x_WriteReg(hMMA845x, REG_MMA845x_CTRL_REG1,
				&hMMA845x->Registers.CTRL_REG1) == E_OK) {
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3331      	adds	r3, #49	; 0x31
		if (Drv_MMA845x_WriteReg(hMMA845x, REG_MMA845x_CTRL_REG1,
 80010be:	461a      	mov	r2, r3
 80010c0:	212a      	movs	r1, #42	; 0x2a
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 fb8e 	bl	80017e4 <Drv_MMA845x_WriteReg>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d101      	bne.n	80010d2 <Drv_MMA845x_DisableFastreadMode+0x58>
			return (E_OK);
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <Drv_MMA845x_DisableFastreadMode+0x5a>
		}
	}
	return (E_NOT_OK);
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <Drv_MMA845x_EnableActiveMode>:
/**
 * @brief Description of the function
 * @param hMMA845x Pointer to the Handling structure.
 * @retval E_OK if the Operation is Successful, E_NOT_OK otherwise
 */
Std_ReturnType Drv_MMA845x_EnableActiveMode(MMA845x_HandleTypeDef *hMMA845x) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	uint8_t rxbuf;
	// Check if the handle is set
	if (hMMA845x == 0) {
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <Drv_MMA845x_EnableActiveMode+0x12>
		return (E_NOT_OK);
 80010ea:	2300      	movs	r3, #0
 80010ec:	e023      	b.n	8001136 <Drv_MMA845x_EnableActiveMode+0x5a>
	}

	// Read the register From the device
	if (Drv_MMA845x_ReadReg(hMMA845x, REG_MMA845x_CTRL_REG1, (uint8_t*) &rxbuf)
 80010ee:	f107 030f 	add.w	r3, r7, #15
 80010f2:	461a      	mov	r2, r3
 80010f4:	212a      	movs	r1, #42	; 0x2a
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 fb42 	bl	8001780 <Drv_MMA845x_ReadReg>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d118      	bne.n	8001134 <Drv_MMA845x_EnableActiveMode+0x58>
			== E_OK) {
		hMMA845x->Registers.CTRL_REG1 = rxbuf;
 8001102:	7bfa      	ldrb	r2, [r7, #15]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

		// Update the register
		SET_REG_CTRL_REG1_ACTIVE(hMMA845x->Registers.CTRL_REG1);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	b2da      	uxtb	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

		// Write the updated register to the device
		if (Drv_MMA845x_WriteReg(hMMA845x, REG_MMA845x_CTRL_REG1,
				&hMMA845x->Registers.CTRL_REG1) == E_OK) {
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3331      	adds	r3, #49	; 0x31
		if (Drv_MMA845x_WriteReg(hMMA845x, REG_MMA845x_CTRL_REG1,
 8001120:	461a      	mov	r2, r3
 8001122:	212a      	movs	r1, #42	; 0x2a
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 fb5d 	bl	80017e4 <Drv_MMA845x_WriteReg>
 800112a:	4603      	mov	r3, r0
 800112c:	2b01      	cmp	r3, #1
 800112e:	d101      	bne.n	8001134 <Drv_MMA845x_EnableActiveMode+0x58>
			return (E_OK);
 8001130:	2301      	movs	r3, #1
 8001132:	e000      	b.n	8001136 <Drv_MMA845x_EnableActiveMode+0x5a>
		}
	}
	return (E_NOT_OK);
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <Drv_MMA845x_EnableStandbyMode>:
/**
 * @brief Description of the function
 * @param hMMA845x Pointer to the Handling structure.
 * @retval E_OK if the Operation is Successful, E_NOT_OK otherwise
 */
Std_ReturnType Drv_MMA845x_EnableStandbyMode(MMA845x_HandleTypeDef *hMMA845x) {
 800113e:	b580      	push	{r7, lr}
 8001140:	b084      	sub	sp, #16
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
	uint8_t rxbuf;
	// Check if the handle is set
	if (hMMA845x == 0) {
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d101      	bne.n	8001150 <Drv_MMA845x_EnableStandbyMode+0x12>
		return (E_NOT_OK);
 800114c:	2300      	movs	r3, #0
 800114e:	e023      	b.n	8001198 <Drv_MMA845x_EnableStandbyMode+0x5a>
	}

	// Read the register From the device
	if (Drv_MMA845x_ReadReg(hMMA845x, REG_MMA845x_CTRL_REG1, (uint8_t*) &rxbuf)
 8001150:	f107 030f 	add.w	r3, r7, #15
 8001154:	461a      	mov	r2, r3
 8001156:	212a      	movs	r1, #42	; 0x2a
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f000 fb11 	bl	8001780 <Drv_MMA845x_ReadReg>
 800115e:	4603      	mov	r3, r0
 8001160:	2b01      	cmp	r3, #1
 8001162:	d118      	bne.n	8001196 <Drv_MMA845x_EnableStandbyMode+0x58>
			== E_OK) {
		hMMA845x->Registers.CTRL_REG1 = rxbuf;
 8001164:	7bfa      	ldrb	r2, [r7, #15]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		// Update the register
		CLR_REG_CTRL_REG1_ACTIVE(hMMA845x->Registers.CTRL_REG1);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001172:	f023 0301 	bic.w	r3, r3, #1
 8001176:	b2da      	uxtb	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

		// Write the updated register to the device
		if (Drv_MMA845x_WriteReg(hMMA845x, REG_MMA845x_CTRL_REG1,
				&hMMA845x->Registers.CTRL_REG1) == E_OK) {
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3331      	adds	r3, #49	; 0x31
		if (Drv_MMA845x_WriteReg(hMMA845x, REG_MMA845x_CTRL_REG1,
 8001182:	461a      	mov	r2, r3
 8001184:	212a      	movs	r1, #42	; 0x2a
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 fb2c 	bl	80017e4 <Drv_MMA845x_WriteReg>
 800118c:	4603      	mov	r3, r0
 800118e:	2b01      	cmp	r3, #1
 8001190:	d101      	bne.n	8001196 <Drv_MMA845x_EnableStandbyMode+0x58>

			return (E_OK);
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <Drv_MMA845x_EnableStandbyMode+0x5a>
		}
	}
	return (E_NOT_OK);
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <Drv_MMA845x_EnableLowNoiseMode>:
/**
 * @brief Description of the function
 * @param hMMA845x Pointer to the Handling structure.
 * @retval E_OK if the Operation is Successful, E_NOT_OK otherwise
 */
Std_ReturnType Drv_MMA845x_EnableLowNoiseMode(MMA845x_HandleTypeDef *hMMA845x) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	uint8_t rxbuf;
	// Check if the handle is set
	if (hMMA845x == 0) {
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <Drv_MMA845x_EnableLowNoiseMode+0x12>
		return (E_NOT_OK);
 80011ae:	2300      	movs	r3, #0
 80011b0:	e023      	b.n	80011fa <Drv_MMA845x_EnableLowNoiseMode+0x5a>
	}

	// Read the register From the device
	if (Drv_MMA845x_ReadReg(hMMA845x, REG_MMA845x_CTRL_REG1, (uint8_t*) &rxbuf)
 80011b2:	f107 030f 	add.w	r3, r7, #15
 80011b6:	461a      	mov	r2, r3
 80011b8:	212a      	movs	r1, #42	; 0x2a
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 fae0 	bl	8001780 <Drv_MMA845x_ReadReg>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d118      	bne.n	80011f8 <Drv_MMA845x_EnableLowNoiseMode+0x58>
			== E_OK) {
		hMMA845x->Registers.CTRL_REG1 = rxbuf;
 80011c6:	7bfa      	ldrb	r2, [r7, #15]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		// Update the register
		SET_REG_CTRL_REG1_LNOISE(hMMA845x->Registers.CTRL_REG1);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

		// Write the updated register to the device
		if (Drv_MMA845x_WriteReg(hMMA845x, REG_MMA845x_CTRL_REG1,
				&hMMA845x->Registers.CTRL_REG1) == E_OK) {
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3331      	adds	r3, #49	; 0x31
		if (Drv_MMA845x_WriteReg(hMMA845x, REG_MMA845x_CTRL_REG1,
 80011e4:	461a      	mov	r2, r3
 80011e6:	212a      	movs	r1, #42	; 0x2a
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 fafb 	bl	80017e4 <Drv_MMA845x_WriteReg>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d101      	bne.n	80011f8 <Drv_MMA845x_EnableLowNoiseMode+0x58>
			return (E_OK);
 80011f4:	2301      	movs	r3, #1
 80011f6:	e000      	b.n	80011fa <Drv_MMA845x_EnableLowNoiseMode+0x5a>
		}
	}
	return (E_NOT_OK);
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <Drv_MMA845x_SetDataRate>:
 * @brief Description of the function
 * @param hMMA845x Pointer to the Handling structure.
 * @retval E_OK if the Operation is Successful, E_NOT_OK otherwise
 */
Std_ReturnType Drv_MMA845x_SetDataRate(MMA845x_HandleTypeDef *hMMA845x,
		MMA845x_ODR_TypeDef OutputDataRate) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	70fb      	strb	r3, [r7, #3]
	uint8_t rxbuf;
	// Check if the handle is set
	if (hMMA845x == 0) {
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <Drv_MMA845x_SetDataRate+0x16>
		return (E_NOT_OK);
 8001216:	2300      	movs	r3, #0
 8001218:	e116      	b.n	8001448 <Drv_MMA845x_SetDataRate+0x244>
	}

	// Read the register From the device
	if (Drv_MMA845x_ReadReg(hMMA845x, REG_MMA845x_CTRL_REG1, (uint8_t*) &rxbuf)
 800121a:	f107 030f 	add.w	r3, r7, #15
 800121e:	461a      	mov	r2, r3
 8001220:	212a      	movs	r1, #42	; 0x2a
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 faac 	bl	8001780 <Drv_MMA845x_ReadReg>
 8001228:	4603      	mov	r3, r0
 800122a:	2b01      	cmp	r3, #1
 800122c:	f040 810b 	bne.w	8001446 <Drv_MMA845x_SetDataRate+0x242>
			== E_OK) {
		hMMA845x->Registers.CTRL_REG1 = rxbuf;
 8001230:	7bfa      	ldrb	r2, [r7, #15]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		// Update the register
		switch (OutputDataRate) {
 8001238:	78fb      	ldrb	r3, [r7, #3]
 800123a:	2b07      	cmp	r3, #7
 800123c:	f200 80f4 	bhi.w	8001428 <Drv_MMA845x_SetDataRate+0x224>
 8001240:	a201      	add	r2, pc, #4	; (adr r2, 8001248 <Drv_MMA845x_SetDataRate+0x44>)
 8001242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001246:	bf00      	nop
 8001248:	08001269 	.word	0x08001269
 800124c:	080012a1 	.word	0x080012a1
 8001250:	080012d9 	.word	0x080012d9
 8001254:	08001311 	.word	0x08001311
 8001258:	08001349 	.word	0x08001349
 800125c:	08001381 	.word	0x08001381
 8001260:	080013b9 	.word	0x080013b9
 8001264:	080013f1 	.word	0x080013f1

		case HAL_MMA845x_DATA_RATE_800Hz:
			CLR_REG_CTRL_REG1_DR0(hMMA845x->Registers.CTRL_REG1);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800126e:	f023 0308 	bic.w	r3, r3, #8
 8001272:	b2da      	uxtb	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			CLR_REG_CTRL_REG1_DR1(hMMA845x->Registers.CTRL_REG1);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001280:	f023 0310 	bic.w	r3, r3, #16
 8001284:	b2da      	uxtb	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			CLR_REG_CTRL_REG1_DR2(hMMA845x->Registers.CTRL_REG1);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001292:	f023 0320 	bic.w	r3, r3, #32
 8001296:	b2da      	uxtb	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			break;
 800129e:	e0c3      	b.n	8001428 <Drv_MMA845x_SetDataRate+0x224>
		case HAL_MMA845x_DATA_RATE_400Hz:
			SET_REG_CTRL_REG1_DR0(hMMA845x->Registers.CTRL_REG1);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80012a6:	f043 0308 	orr.w	r3, r3, #8
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			CLR_REG_CTRL_REG1_DR1(hMMA845x->Registers.CTRL_REG1);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80012b8:	f023 0310 	bic.w	r3, r3, #16
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			CLR_REG_CTRL_REG1_DR2(hMMA845x->Registers.CTRL_REG1);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80012ca:	f023 0320 	bic.w	r3, r3, #32
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			break;
 80012d6:	e0a7      	b.n	8001428 <Drv_MMA845x_SetDataRate+0x224>
		case HAL_MMA845x_DATA_RATE_200Hz:
			CLR_REG_CTRL_REG1_DR0(hMMA845x->Registers.CTRL_REG1);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80012de:	f023 0308 	bic.w	r3, r3, #8
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			SET_REG_CTRL_REG1_DR1(hMMA845x->Registers.CTRL_REG1);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80012f0:	f043 0310 	orr.w	r3, r3, #16
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			CLR_REG_CTRL_REG1_DR2(hMMA845x->Registers.CTRL_REG1);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001302:	f023 0320 	bic.w	r3, r3, #32
 8001306:	b2da      	uxtb	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

			break;
 800130e:	e08b      	b.n	8001428 <Drv_MMA845x_SetDataRate+0x224>
		case HAL_MMA845x_DATA_RATE_100Hz:
			SET_REG_CTRL_REG1_DR0(hMMA845x->Registers.CTRL_REG1);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001316:	f043 0308 	orr.w	r3, r3, #8
 800131a:	b2da      	uxtb	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			SET_REG_CTRL_REG1_DR1(hMMA845x->Registers.CTRL_REG1);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001328:	f043 0310 	orr.w	r3, r3, #16
 800132c:	b2da      	uxtb	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			CLR_REG_CTRL_REG1_DR2(hMMA845x->Registers.CTRL_REG1);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800133a:	f023 0320 	bic.w	r3, r3, #32
 800133e:	b2da      	uxtb	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

			break;
 8001346:	e06f      	b.n	8001428 <Drv_MMA845x_SetDataRate+0x224>
		case HAL_MMA845x_DATA_RATE_50Hz:
			CLR_REG_CTRL_REG1_DR0(hMMA845x->Registers.CTRL_REG1);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800134e:	f023 0308 	bic.w	r3, r3, #8
 8001352:	b2da      	uxtb	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			CLR_REG_CTRL_REG1_DR1(hMMA845x->Registers.CTRL_REG1);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001360:	f023 0310 	bic.w	r3, r3, #16
 8001364:	b2da      	uxtb	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			SET_REG_CTRL_REG1_DR2(hMMA845x->Registers.CTRL_REG1);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001372:	f043 0320 	orr.w	r3, r3, #32
 8001376:	b2da      	uxtb	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

			break;
 800137e:	e053      	b.n	8001428 <Drv_MMA845x_SetDataRate+0x224>
		case HAL_MMA845x_DATA_RATE_12_5Hz:
			SET_REG_CTRL_REG1_DR0(hMMA845x->Registers.CTRL_REG1);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001386:	f043 0308 	orr.w	r3, r3, #8
 800138a:	b2da      	uxtb	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			CLR_REG_CTRL_REG1_DR1(hMMA845x->Registers.CTRL_REG1);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001398:	f023 0310 	bic.w	r3, r3, #16
 800139c:	b2da      	uxtb	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			SET_REG_CTRL_REG1_DR2(hMMA845x->Registers.CTRL_REG1);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80013aa:	f043 0320 	orr.w	r3, r3, #32
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

			break;
 80013b6:	e037      	b.n	8001428 <Drv_MMA845x_SetDataRate+0x224>
		case HAL_MMA845x_DATA_RATE_6_25Hz:
			CLR_REG_CTRL_REG1_DR0(hMMA845x->Registers.CTRL_REG1);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80013be:	f023 0308 	bic.w	r3, r3, #8
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			SET_REG_CTRL_REG1_DR1(hMMA845x->Registers.CTRL_REG1);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80013d0:	f043 0310 	orr.w	r3, r3, #16
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			SET_REG_CTRL_REG1_DR2(hMMA845x->Registers.CTRL_REG1);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80013e2:	f043 0320 	orr.w	r3, r3, #32
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			break;
 80013ee:	e01b      	b.n	8001428 <Drv_MMA845x_SetDataRate+0x224>
		case HAL_MMA845x_DATA_RATE_1_56Hz:
			SET_REG_CTRL_REG1_DR0(hMMA845x->Registers.CTRL_REG1);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80013f6:	f043 0308 	orr.w	r3, r3, #8
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			SET_REG_CTRL_REG1_DR1(hMMA845x->Registers.CTRL_REG1);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001408:	f043 0310 	orr.w	r3, r3, #16
 800140c:	b2da      	uxtb	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			SET_REG_CTRL_REG1_DR2(hMMA845x->Registers.CTRL_REG1);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800141a:	f043 0320 	orr.w	r3, r3, #32
 800141e:	b2da      	uxtb	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			break;
 8001426:	bf00      	nop
		}

		// Set the device in Stadby mode
		Drv_MMA845x_EnableStandbyMode(hMMA845x);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff fe88 	bl	800113e <Drv_MMA845x_EnableStandbyMode>
		// Write the updated register to the device
		if (Drv_MMA845x_WriteReg(hMMA845x, REG_MMA845x_CTRL_REG1,
				&hMMA845x->Registers.CTRL_REG1) == E_OK) {
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3331      	adds	r3, #49	; 0x31
		if (Drv_MMA845x_WriteReg(hMMA845x, REG_MMA845x_CTRL_REG1,
 8001432:	461a      	mov	r2, r3
 8001434:	212a      	movs	r1, #42	; 0x2a
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 f9d4 	bl	80017e4 <Drv_MMA845x_WriteReg>
 800143c:	4603      	mov	r3, r0
 800143e:	2b01      	cmp	r3, #1
 8001440:	d101      	bne.n	8001446 <Drv_MMA845x_SetDataRate+0x242>
			return (E_OK);
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <Drv_MMA845x_SetDataRate+0x244>
		}
	}
	return (E_NOT_OK);
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <Drv_MMA845x_SetAutoSleepRate>:
 * @brief Description of the function
 * @param hMMA845x Pointer to the Handling structure.
 * @retval E_OK if the Operation is Successful, E_NOT_OK otherwise
 */
Std_ReturnType Drv_MMA845x_SetAutoSleepRate(MMA845x_HandleTypeDef *hMMA845x,
		MMA845x_ASLPR_TypeDef AutoSleepRate) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	70fb      	strb	r3, [r7, #3]

	uint8_t rxbuf;
	// Check if the handle is set
	if (hMMA845x == 0) {
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <Drv_MMA845x_SetAutoSleepRate+0x16>
		return (E_NOT_OK);
 8001462:	2300      	movs	r3, #0
 8001464:	e077      	b.n	8001556 <Drv_MMA845x_SetAutoSleepRate+0x106>
	}
	// Set the device in Stadby mode
	Drv_MMA845x_EnableStandbyMode(hMMA845x);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff fe69 	bl	800113e <Drv_MMA845x_EnableStandbyMode>

	// Read the register From the device
	if (Drv_MMA845x_ReadReg(hMMA845x, REG_MMA845x_CTRL_REG1, (uint8_t*) &rxbuf)
 800146c:	f107 030f 	add.w	r3, r7, #15
 8001470:	461a      	mov	r2, r3
 8001472:	212a      	movs	r1, #42	; 0x2a
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 f983 	bl	8001780 <Drv_MMA845x_ReadReg>
 800147a:	4603      	mov	r3, r0
 800147c:	2b01      	cmp	r3, #1
 800147e:	d169      	bne.n	8001554 <Drv_MMA845x_SetAutoSleepRate+0x104>
			== E_OK) {
		hMMA845x->Registers.CTRL_REG1 = rxbuf;
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		// Update the register
		switch (AutoSleepRate) {
 8001488:	78fb      	ldrb	r3, [r7, #3]
 800148a:	2b03      	cmp	r3, #3
 800148c:	d856      	bhi.n	800153c <Drv_MMA845x_SetAutoSleepRate+0xec>
 800148e:	a201      	add	r2, pc, #4	; (adr r2, 8001494 <Drv_MMA845x_SetAutoSleepRate+0x44>)
 8001490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001494:	080014a5 	.word	0x080014a5
 8001498:	080014cb 	.word	0x080014cb
 800149c:	080014f1 	.word	0x080014f1
 80014a0:	08001517 	.word	0x08001517

		case HAL_MMA845x_ASLP_RATE_50Hz:
			CLR_REG_CTRL_REG1_ASLP_RATE0(hMMA845x->Registers.CTRL_REG1);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80014aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			CLR_REG_CTRL_REG1_ASLP_RATE1(hMMA845x->Registers.CTRL_REG1);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80014bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

			break;
 80014c8:	e038      	b.n	800153c <Drv_MMA845x_SetAutoSleepRate+0xec>
		case HAL_MMA845x_ASLP_RATE_12_5Hz:
			SET_REG_CTRL_REG1_ASLP_RATE0(hMMA845x->Registers.CTRL_REG1);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80014d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			CLR_REG_CTRL_REG1_ASLP_RATE1(hMMA845x->Registers.CTRL_REG1);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80014e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

			break;
 80014ee:	e025      	b.n	800153c <Drv_MMA845x_SetAutoSleepRate+0xec>
		case HAL_MMA845x_ASLP_RATE_6_25Hz:
			CLR_REG_CTRL_REG1_ASLP_RATE0(hMMA845x->Registers.CTRL_REG1);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80014f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			SET_REG_CTRL_REG1_ASLP_RATE1(hMMA845x->Registers.CTRL_REG1);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001508:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800150c:	b2da      	uxtb	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

			break;
 8001514:	e012      	b.n	800153c <Drv_MMA845x_SetAutoSleepRate+0xec>
		case HAL_MMA845x_ASLP_RATE_1_56Hz:
			SET_REG_CTRL_REG1_ASLP_RATE0(hMMA845x->Registers.CTRL_REG1);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800151c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001520:	b2da      	uxtb	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			SET_REG_CTRL_REG1_ASLP_RATE1(hMMA845x->Registers.CTRL_REG1);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800152e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001532:	b2da      	uxtb	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			break;
 800153a:	bf00      	nop
		}

		// Write the updated register to the device
		if (Drv_MMA845x_WriteReg(hMMA845x, REG_MMA845x_CTRL_REG1,
				&hMMA845x->Registers.CTRL_REG1) == E_OK) {
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3331      	adds	r3, #49	; 0x31
		if (Drv_MMA845x_WriteReg(hMMA845x, REG_MMA845x_CTRL_REG1,
 8001540:	461a      	mov	r2, r3
 8001542:	212a      	movs	r1, #42	; 0x2a
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 f94d 	bl	80017e4 <Drv_MMA845x_WriteReg>
 800154a:	4603      	mov	r3, r0
 800154c:	2b01      	cmp	r3, #1
 800154e:	d101      	bne.n	8001554 <Drv_MMA845x_SetAutoSleepRate+0x104>
			return (E_OK);
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <Drv_MMA845x_SetAutoSleepRate+0x106>
		}
	}
	return (E_NOT_OK);
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop

08001560 <Drv_MMA845x_SetActiveModePowerScheme>:
 * @brief Description of the function
 * @param hMMA845x Pointer to the Handling structure.
 * @retval E_OK if the Operation is Successful, E_NOT_OK otherwise
 */
Std_ReturnType Drv_MMA845x_SetActiveModePowerScheme(
		MMA845x_HandleTypeDef *hMMA845x, MMA845x_OVSM_TypeDef OverSamplingMode) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	70fb      	strb	r3, [r7, #3]
	uint8_t rxbuf;
	// Check if the handle is set
	if (hMMA845x == 0) {
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <Drv_MMA845x_SetActiveModePowerScheme+0x16>
		return (E_NOT_OK);
 8001572:	2300      	movs	r3, #0
 8001574:	e077      	b.n	8001666 <Drv_MMA845x_SetActiveModePowerScheme+0x106>
	}

	// Read the register From the device
	if (Drv_MMA845x_ReadReg(hMMA845x, REG_MMA845x_CTRL_REG2, (uint8_t*) &rxbuf)
 8001576:	f107 030f 	add.w	r3, r7, #15
 800157a:	461a      	mov	r2, r3
 800157c:	212b      	movs	r1, #43	; 0x2b
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 f8fe 	bl	8001780 <Drv_MMA845x_ReadReg>
 8001584:	4603      	mov	r3, r0
 8001586:	2b01      	cmp	r3, #1
 8001588:	d16c      	bne.n	8001664 <Drv_MMA845x_SetActiveModePowerScheme+0x104>
			== E_OK) {
		hMMA845x->Registers.CTRL_REG2 = rxbuf;
 800158a:	7bfa      	ldrb	r2, [r7, #15]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		switch (OverSamplingMode) {
 8001592:	78fb      	ldrb	r3, [r7, #3]
 8001594:	2b03      	cmp	r3, #3
 8001596:	d857      	bhi.n	8001648 <Drv_MMA845x_SetActiveModePowerScheme+0xe8>
 8001598:	a201      	add	r2, pc, #4	; (adr r2, 80015a0 <Drv_MMA845x_SetActiveModePowerScheme+0x40>)
 800159a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159e:	bf00      	nop
 80015a0:	080015b1 	.word	0x080015b1
 80015a4:	080015d7 	.word	0x080015d7
 80015a8:	080015fd 	.word	0x080015fd
 80015ac:	08001623 	.word	0x08001623
		case HAL_MMA845x_OVSM_MODE_NORMAL:
			CLR_REG_CTRL_REG2_SMODS0(hMMA845x->Registers.CTRL_REG2);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80015b6:	f023 0308 	bic.w	r3, r3, #8
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			CLR_REG_CTRL_REG2_SMODS1(hMMA845x->Registers.CTRL_REG2);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80015c8:	f023 0310 	bic.w	r3, r3, #16
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			break;
 80015d4:	e03a      	b.n	800164c <Drv_MMA845x_SetActiveModePowerScheme+0xec>
		case HAL_MMA845x_OVSM_LOW_NOISE_LOW_POWER:
			SET_REG_CTRL_REG2_SMODS0(hMMA845x->Registers.CTRL_REG2);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80015dc:	f043 0308 	orr.w	r3, r3, #8
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			CLR_REG_CTRL_REG2_SMODS1(hMMA845x->Registers.CTRL_REG2);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80015ee:	f023 0310 	bic.w	r3, r3, #16
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			break;
 80015fa:	e027      	b.n	800164c <Drv_MMA845x_SetActiveModePowerScheme+0xec>
		case HAL_MMA845x_OVSM_HIGH_RESOLUTION:
			CLR_REG_CTRL_REG2_SMODS0(hMMA845x->Registers.CTRL_REG2);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001602:	f023 0308 	bic.w	r3, r3, #8
 8001606:	b2da      	uxtb	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			SET_REG_CTRL_REG2_SMODS1(hMMA845x->Registers.CTRL_REG2);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001614:	f043 0310 	orr.w	r3, r3, #16
 8001618:	b2da      	uxtb	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			break;
 8001620:	e014      	b.n	800164c <Drv_MMA845x_SetActiveModePowerScheme+0xec>
		case HAL_MMA845x_OVSM_MODE_LOW_POWER:
			SET_REG_CTRL_REG2_SMODS0(hMMA845x->Registers.CTRL_REG2);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001628:	f043 0308 	orr.w	r3, r3, #8
 800162c:	b2da      	uxtb	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			SET_REG_CTRL_REG2_SMODS1(hMMA845x->Registers.CTRL_REG2);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800163a:	f043 0310 	orr.w	r3, r3, #16
 800163e:	b2da      	uxtb	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			break;
 8001646:	e001      	b.n	800164c <Drv_MMA845x_SetActiveModePowerScheme+0xec>
		default:
			return (E_NOT_OK);
 8001648:	2300      	movs	r3, #0
 800164a:	e00c      	b.n	8001666 <Drv_MMA845x_SetActiveModePowerScheme+0x106>
			break;
		}

		// Write the updated register to the device
		if (Drv_MMA845x_WriteReg(hMMA845x, REG_MMA845x_CTRL_REG2,
				&hMMA845x->Registers.CTRL_REG2) == E_OK) {
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3332      	adds	r3, #50	; 0x32
		if (Drv_MMA845x_WriteReg(hMMA845x, REG_MMA845x_CTRL_REG2,
 8001650:	461a      	mov	r2, r3
 8001652:	212b      	movs	r1, #43	; 0x2b
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 f8c5 	bl	80017e4 <Drv_MMA845x_WriteReg>
 800165a:	4603      	mov	r3, r0
 800165c:	2b01      	cmp	r3, #1
 800165e:	d101      	bne.n	8001664 <Drv_MMA845x_SetActiveModePowerScheme+0x104>
			return (E_OK);
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <Drv_MMA845x_SetActiveModePowerScheme+0x106>
		}
	}
	return (E_NOT_OK);
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop

08001670 <Drv_MMA845x_SetSleepModePowerScheme>:
 * @brief Description of the function
 * @param hMMA845x Pointer to the Handling structure.
 * @retval E_OK if the Operation is Successful, E_NOT_OK otherwise
 */
Std_ReturnType Drv_MMA845x_SetSleepModePowerScheme(
		MMA845x_HandleTypeDef *hMMA845x, MMA845x_OVSM_TypeDef OverSamplingMode) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	70fb      	strb	r3, [r7, #3]
	uint8_t rxbuf;
	// Check if the handle is set
	if (hMMA845x == 0) {
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <Drv_MMA845x_SetSleepModePowerScheme+0x16>
		return (E_NOT_OK);
 8001682:	2300      	movs	r3, #0
 8001684:	e077      	b.n	8001776 <Drv_MMA845x_SetSleepModePowerScheme+0x106>
	}

	// Read the register From the device
	if (Drv_MMA845x_ReadReg(hMMA845x, REG_MMA845x_CTRL_REG2, (uint8_t*) &rxbuf)
 8001686:	f107 030f 	add.w	r3, r7, #15
 800168a:	461a      	mov	r2, r3
 800168c:	212b      	movs	r1, #43	; 0x2b
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 f876 	bl	8001780 <Drv_MMA845x_ReadReg>
 8001694:	4603      	mov	r3, r0
 8001696:	2b01      	cmp	r3, #1
 8001698:	d16c      	bne.n	8001774 <Drv_MMA845x_SetSleepModePowerScheme+0x104>
			== E_OK) {
		hMMA845x->Registers.CTRL_REG2 = rxbuf;
 800169a:	7bfa      	ldrb	r2, [r7, #15]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		switch (OverSamplingMode) {
 80016a2:	78fb      	ldrb	r3, [r7, #3]
 80016a4:	2b03      	cmp	r3, #3
 80016a6:	d857      	bhi.n	8001758 <Drv_MMA845x_SetSleepModePowerScheme+0xe8>
 80016a8:	a201      	add	r2, pc, #4	; (adr r2, 80016b0 <Drv_MMA845x_SetSleepModePowerScheme+0x40>)
 80016aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ae:	bf00      	nop
 80016b0:	080016c1 	.word	0x080016c1
 80016b4:	080016e7 	.word	0x080016e7
 80016b8:	0800170d 	.word	0x0800170d
 80016bc:	08001733 	.word	0x08001733
		case HAL_MMA845x_OVSM_MODE_NORMAL:
			CLR_REG_CTRL_REG2_MODS0(hMMA845x->Registers.CTRL_REG2);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80016c6:	f023 0301 	bic.w	r3, r3, #1
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			CLR_REG_CTRL_REG2_MODS1(hMMA845x->Registers.CTRL_REG2);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80016d8:	f023 0302 	bic.w	r3, r3, #2
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			break;
 80016e4:	e03a      	b.n	800175c <Drv_MMA845x_SetSleepModePowerScheme+0xec>
		case HAL_MMA845x_OVSM_LOW_NOISE_LOW_POWER:
			SET_REG_CTRL_REG2_MODS0(hMMA845x->Registers.CTRL_REG2);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			CLR_REG_CTRL_REG2_MODS1(hMMA845x->Registers.CTRL_REG2);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80016fe:	f023 0302 	bic.w	r3, r3, #2
 8001702:	b2da      	uxtb	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			break;
 800170a:	e027      	b.n	800175c <Drv_MMA845x_SetSleepModePowerScheme+0xec>
		case HAL_MMA845x_OVSM_HIGH_RESOLUTION:
			CLR_REG_CTRL_REG2_MODS0(hMMA845x->Registers.CTRL_REG2);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001712:	f023 0301 	bic.w	r3, r3, #1
 8001716:	b2da      	uxtb	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			SET_REG_CTRL_REG2_MODS1(hMMA845x->Registers.CTRL_REG2);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	b2da      	uxtb	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			break;
 8001730:	e014      	b.n	800175c <Drv_MMA845x_SetSleepModePowerScheme+0xec>
		case HAL_MMA845x_OVSM_MODE_LOW_POWER:
			SET_REG_CTRL_REG2_MODS0(hMMA845x->Registers.CTRL_REG2);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	b2da      	uxtb	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			SET_REG_CTRL_REG2_MODS1(hMMA845x->Registers.CTRL_REG2);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800174a:	f043 0302 	orr.w	r3, r3, #2
 800174e:	b2da      	uxtb	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			break;
 8001756:	e001      	b.n	800175c <Drv_MMA845x_SetSleepModePowerScheme+0xec>
		default:
			return (E_NOT_OK);
 8001758:	2300      	movs	r3, #0
 800175a:	e00c      	b.n	8001776 <Drv_MMA845x_SetSleepModePowerScheme+0x106>
			break;
		}

		// Write the updated register to the device
		if (Drv_MMA845x_WriteReg(hMMA845x, REG_MMA845x_CTRL_REG2,
				&hMMA845x->Registers.CTRL_REG2) == E_OK) {
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3332      	adds	r3, #50	; 0x32
		if (Drv_MMA845x_WriteReg(hMMA845x, REG_MMA845x_CTRL_REG2,
 8001760:	461a      	mov	r2, r3
 8001762:	212b      	movs	r1, #43	; 0x2b
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f83d 	bl	80017e4 <Drv_MMA845x_WriteReg>
 800176a:	4603      	mov	r3, r0
 800176c:	2b01      	cmp	r3, #1
 800176e:	d101      	bne.n	8001774 <Drv_MMA845x_SetSleepModePowerScheme+0x104>
			return (E_OK);
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <Drv_MMA845x_SetSleepModePowerScheme+0x106>
		}
	}
	return (E_NOT_OK);
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop

08001780 <Drv_MMA845x_ReadReg>:
 * @param RegisterAddress device register address
 * @param RegisterValue pointer to the register value
 * @retval E_OK if the Operation is Successful, E_NOT_OK otherwise
 */
Std_ReturnType Drv_MMA845x_ReadReg(MMA845x_HandleTypeDef *hMMA845x,
		uint8_t RegisterAddress, const uint8_t * RegisterValue) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af04      	add	r7, sp, #16
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	460b      	mov	r3, r1
 800178a:	607a      	str	r2, [r7, #4]
 800178c:	72fb      	strb	r3, [r7, #11]

	uint16_t DeviceAddr_ReadOP = (uint16_t) ((hMMA845x->Instance) |= (1UL << (0U)));
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	795b      	ldrb	r3, [r3, #5]
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	b2da      	uxtb	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	715a      	strb	r2, [r3, #5]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	795b      	ldrb	r3, [r3, #5]
 80017a0:	82fb      	strh	r3, [r7, #22]

	uint8_t * val = (uint8_t *) RegisterValue;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	613b      	str	r3, [r7, #16]
	/* Check the hMMA845x handle allocation */
	if (hMMA845x == 0L) {
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <Drv_MMA845x_ReadReg+0x30>
		return E_NOT_OK;
 80017ac:	2300      	movs	r3, #0
 80017ae:	e012      	b.n	80017d6 <Drv_MMA845x_ReadReg+0x56>
	}

	if (HAL_I2C_Mem_Read(&hi2c1, DeviceAddr_ReadOP, RegisterAddress, 1, val, 1, 100) != HAL_OK) {
 80017b0:	7afb      	ldrb	r3, [r7, #11]
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	8af9      	ldrh	r1, [r7, #22]
 80017b6:	2364      	movs	r3, #100	; 0x64
 80017b8:	9302      	str	r3, [sp, #8]
 80017ba:	2301      	movs	r3, #1
 80017bc:	9301      	str	r3, [sp, #4]
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	2301      	movs	r3, #1
 80017c4:	4806      	ldr	r0, [pc, #24]	; (80017e0 <Drv_MMA845x_ReadReg+0x60>)
 80017c6:	f000 fd13 	bl	80021f0 <HAL_I2C_Mem_Read>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <Drv_MMA845x_ReadReg+0x54>
		return (E_NOT_OK);
 80017d0:	2300      	movs	r3, #0
 80017d2:	e000      	b.n	80017d6 <Drv_MMA845x_ReadReg+0x56>
	}
	return (E_OK);
 80017d4:	2301      	movs	r3, #1
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000098 	.word	0x20000098

080017e4 <Drv_MMA845x_WriteReg>:
 * @brief Description of the function
 * @param hMMA845x Pointer to the Handling structure.
 * @retval E_OK if the Operation is Successful, E_NOT_OK otherwise
 */
Std_ReturnType Drv_MMA845x_WriteReg(MMA845x_HandleTypeDef *hMMA845x,
		uint8_t RegisterAddress, const uint8_t * RegisterValue) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	; 0x28
 80017e8:	af04      	add	r7, sp, #16
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	460b      	mov	r3, r1
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	72fb      	strb	r3, [r7, #11]

	uint16_t DeviceAddr_WriteOP = (uint16_t) ((hMMA845x->Instance) &= ~(1UL<< (0U)));
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	795b      	ldrb	r3, [r3, #5]
 80017f6:	f023 0301 	bic.w	r3, r3, #1
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	715a      	strb	r2, [r3, #5]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	795b      	ldrb	r3, [r3, #5]
 8001804:	82fb      	strh	r3, [r7, #22]
	uint8_t * val = (uint8_t *) RegisterValue;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	613b      	str	r3, [r7, #16]
	/* Check the hMMA845x handle allocation */
	if (hMMA845x == 0L) {
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <Drv_MMA845x_WriteReg+0x30>
		return E_NOT_OK;
 8001810:	2300      	movs	r3, #0
 8001812:	e013      	b.n	800183c <Drv_MMA845x_WriteReg+0x58>
	}

	if (HAL_I2C_Mem_Write(&hi2c1, DeviceAddr_WriteOP, RegisterAddress, 1, val, 1, 1000) != HAL_OK) {
 8001814:	7afb      	ldrb	r3, [r7, #11]
 8001816:	b29a      	uxth	r2, r3
 8001818:	8af9      	ldrh	r1, [r7, #22]
 800181a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181e:	9302      	str	r3, [sp, #8]
 8001820:	2301      	movs	r3, #1
 8001822:	9301      	str	r3, [sp, #4]
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	2301      	movs	r3, #1
 800182a:	4806      	ldr	r0, [pc, #24]	; (8001844 <Drv_MMA845x_WriteReg+0x60>)
 800182c:	f000 fbba 	bl	8001fa4 <HAL_I2C_Mem_Write>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <Drv_MMA845x_WriteReg+0x56>
		return (E_NOT_OK);
 8001836:	2300      	movs	r3, #0
 8001838:	e000      	b.n	800183c <Drv_MMA845x_WriteReg+0x58>
	}

	return (E_OK);
 800183a:	2301      	movs	r3, #1
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000098 	.word	0x20000098

08001848 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184c:	2003      	movs	r0, #3
 800184e:	f000 f90f 	bl	8001a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001852:	2000      	movs	r0, #0
 8001854:	f000 f806 	bl	8001864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001858:	f003 fb20 	bl	8004e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800186c:	4b09      	ldr	r3, [pc, #36]	; (8001894 <HAL_InitTick+0x30>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a09      	ldr	r2, [pc, #36]	; (8001898 <HAL_InitTick+0x34>)
 8001872:	fba2 2303 	umull	r2, r3, r2, r3
 8001876:	099b      	lsrs	r3, r3, #6
 8001878:	4618      	mov	r0, r3
 800187a:	f000 f920 	bl	8001abe <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800187e:	2200      	movs	r2, #0
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	f04f 30ff 	mov.w	r0, #4294967295
 8001886:	f000 f8fe 	bl	8001a86 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000000 	.word	0x20000000
 8001898:	10624dd3 	.word	0x10624dd3

0800189c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  uwTick++;
 80018a0:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <HAL_IncTick+0x18>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	3301      	adds	r3, #1
 80018a6:	4a03      	ldr	r2, [pc, #12]	; (80018b4 <HAL_IncTick+0x18>)
 80018a8:	6013      	str	r3, [r2, #0]
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	20000094 	.word	0x20000094

080018b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return uwTick;
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <HAL_GetTick+0x14>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000094 	.word	0x20000094

080018d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d8:	f7ff ffee 	bl	80018b8 <HAL_GetTick>
 80018dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e8:	d002      	beq.n	80018f0 <HAL_Delay+0x20>
  {
    wait++;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	3301      	adds	r3, #1
 80018ee:	60fb      	str	r3, [r7, #12]
  } 

  while((HAL_GetTick() - tickstart) < wait)
 80018f0:	bf00      	nop
 80018f2:	f7ff ffe1 	bl	80018b8 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d8f7      	bhi.n	80018f2 <HAL_Delay+0x22>
  {
  }
}
 8001902:	bf00      	nop
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <NVIC_SetPriorityGrouping+0x44>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001928:	4013      	ands	r3, r2
 800192a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001934:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800193c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800193e:	4a04      	ldr	r2, [pc, #16]	; (8001950 <NVIC_SetPriorityGrouping+0x44>)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	60d3      	str	r3, [r2, #12]
}
 8001944:	bf00      	nop
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001958:	4b04      	ldr	r3, [pc, #16]	; (800196c <NVIC_GetPriorityGrouping+0x18>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	0a1b      	lsrs	r3, r3, #8
 800195e:	f003 0307 	and.w	r3, r3, #7
}
 8001962:	4618      	mov	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	6039      	str	r1, [r7, #0]
 800197a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	2b00      	cmp	r3, #0
 8001982:	da0b      	bge.n	800199c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	b2da      	uxtb	r2, r3
 8001988:	490c      	ldr	r1, [pc, #48]	; (80019bc <NVIC_SetPriority+0x4c>)
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	f003 030f 	and.w	r3, r3, #15
 8001990:	3b04      	subs	r3, #4
 8001992:	0112      	lsls	r2, r2, #4
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	440b      	add	r3, r1
 8001998:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800199a:	e009      	b.n	80019b0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	4907      	ldr	r1, [pc, #28]	; (80019c0 <NVIC_SetPriority+0x50>)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	0112      	lsls	r2, r2, #4
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	440b      	add	r3, r1
 80019ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00
 80019c0:	e000e100 	.word	0xe000e100

080019c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b089      	sub	sp, #36	; 0x24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f1c3 0307 	rsb	r3, r3, #7
 80019de:	2b04      	cmp	r3, #4
 80019e0:	bf28      	it	cs
 80019e2:	2304      	movcs	r3, #4
 80019e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3304      	adds	r3, #4
 80019ea:	2b06      	cmp	r3, #6
 80019ec:	d902      	bls.n	80019f4 <NVIC_EncodePriority+0x30>
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3b03      	subs	r3, #3
 80019f2:	e000      	b.n	80019f6 <NVIC_EncodePriority+0x32>
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	f04f 32ff 	mov.w	r2, #4294967295
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43da      	mvns	r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	401a      	ands	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	43d9      	mvns	r1, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	4313      	orrs	r3, r2
         );
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3724      	adds	r7, #36	; 0x24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
	...

08001a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a3c:	d301      	bcc.n	8001a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e00f      	b.n	8001a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a42:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <SysTick_Config+0x40>)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a4a:	210f      	movs	r1, #15
 8001a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a50:	f7ff ff8e 	bl	8001970 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <SysTick_Config+0x40>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a5a:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <SysTick_Config+0x40>)
 8001a5c:	2207      	movs	r2, #7
 8001a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	e000e010 	.word	0xe000e010

08001a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff ff47 	bl	800190c <NVIC_SetPriorityGrouping>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b086      	sub	sp, #24
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
 8001a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a98:	f7ff ff5c 	bl	8001954 <NVIC_GetPriorityGrouping>
 8001a9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	68b9      	ldr	r1, [r7, #8]
 8001aa2:	6978      	ldr	r0, [r7, #20]
 8001aa4:	f7ff ff8e 	bl	80019c4 <NVIC_EncodePriority>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aae:	4611      	mov	r1, r2
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff5d 	bl	8001970 <NVIC_SetPriority>
}
 8001ab6:	bf00      	nop
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff ffb0 	bl	8001a2c <SysTick_Config>
 8001acc:	4603      	mov	r3, r0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d106      	bne.n	8001af4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a08      	ldr	r2, [pc, #32]	; (8001b0c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001aec:	f043 0304 	orr.w	r3, r3, #4
 8001af0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001af2:	e005      	b.n	8001b00 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001afa:	f023 0304 	bic.w	r3, r3, #4
 8001afe:	6013      	str	r3, [r2, #0]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000e010 	.word	0xe000e010

08001b10 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001b14:	f000 f802 	bl	8001b1c <HAL_SYSTICK_Callback>
}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b087      	sub	sp, #28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001b42:	e17f      	b.n	8001e44 <HAL_GPIO_Init+0x318>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	2101      	movs	r1, #1
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b50:	4013      	ands	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 8171 	beq.w	8001e3e <HAL_GPIO_Init+0x312>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0x40>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b12      	cmp	r3, #18
 8001b6a:	d123      	bne.n	8001bb4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	08da      	lsrs	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3208      	adds	r2, #8
 8001b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b78:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	220f      	movs	r2, #15
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	691a      	ldr	r2, [r3, #16]
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	08da      	lsrs	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3208      	adds	r2, #8
 8001bae:	6939      	ldr	r1, [r7, #16]
 8001bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0203 	and.w	r2, r3, #3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d00b      	beq.n	8001c08 <HAL_GPIO_Init+0xdc>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d007      	beq.n	8001c08 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bfc:	2b11      	cmp	r3, #17
 8001bfe:	d003      	beq.n	8001c08 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b12      	cmp	r3, #18
 8001c06:	d130      	bne.n	8001c6a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	2203      	movs	r2, #3
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c3e:	2201      	movs	r2, #1
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	091b      	lsrs	r3, r3, #4
 8001c54:	f003 0201 	and.w	r2, r3, #1
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	d118      	bne.n	8001ca8 <HAL_GPIO_Init+0x17c>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	08db      	lsrs	r3, r3, #3
 8001c92:	f003 0201 	and.w	r2, r3, #1
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 80ac 	beq.w	8001e3e <HAL_GPIO_Init+0x312>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce6:	4b5e      	ldr	r3, [pc, #376]	; (8001e60 <HAL_GPIO_Init+0x334>)
 8001ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cea:	4a5d      	ldr	r2, [pc, #372]	; (8001e60 <HAL_GPIO_Init+0x334>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6613      	str	r3, [r2, #96]	; 0x60
 8001cf2:	4b5b      	ldr	r3, [pc, #364]	; (8001e60 <HAL_GPIO_Init+0x334>)
 8001cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001cfe:	4a59      	ldr	r2, [pc, #356]	; (8001e64 <HAL_GPIO_Init+0x338>)
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	3302      	adds	r3, #2
 8001d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	220f      	movs	r2, #15
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d28:	d025      	beq.n	8001d76 <HAL_GPIO_Init+0x24a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4e      	ldr	r2, [pc, #312]	; (8001e68 <HAL_GPIO_Init+0x33c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d01f      	beq.n	8001d72 <HAL_GPIO_Init+0x246>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4d      	ldr	r2, [pc, #308]	; (8001e6c <HAL_GPIO_Init+0x340>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d019      	beq.n	8001d6e <HAL_GPIO_Init+0x242>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4c      	ldr	r2, [pc, #304]	; (8001e70 <HAL_GPIO_Init+0x344>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d013      	beq.n	8001d6a <HAL_GPIO_Init+0x23e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4b      	ldr	r2, [pc, #300]	; (8001e74 <HAL_GPIO_Init+0x348>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d00d      	beq.n	8001d66 <HAL_GPIO_Init+0x23a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a4a      	ldr	r2, [pc, #296]	; (8001e78 <HAL_GPIO_Init+0x34c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d007      	beq.n	8001d62 <HAL_GPIO_Init+0x236>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a49      	ldr	r2, [pc, #292]	; (8001e7c <HAL_GPIO_Init+0x350>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d101      	bne.n	8001d5e <HAL_GPIO_Init+0x232>
 8001d5a:	2306      	movs	r3, #6
 8001d5c:	e00c      	b.n	8001d78 <HAL_GPIO_Init+0x24c>
 8001d5e:	2307      	movs	r3, #7
 8001d60:	e00a      	b.n	8001d78 <HAL_GPIO_Init+0x24c>
 8001d62:	2305      	movs	r3, #5
 8001d64:	e008      	b.n	8001d78 <HAL_GPIO_Init+0x24c>
 8001d66:	2304      	movs	r3, #4
 8001d68:	e006      	b.n	8001d78 <HAL_GPIO_Init+0x24c>
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e004      	b.n	8001d78 <HAL_GPIO_Init+0x24c>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e002      	b.n	8001d78 <HAL_GPIO_Init+0x24c>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <HAL_GPIO_Init+0x24c>
 8001d76:	2300      	movs	r3, #0
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	f002 0203 	and.w	r2, r2, #3
 8001d7e:	0092      	lsls	r2, r2, #2
 8001d80:	4093      	lsls	r3, r2
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d88:	4936      	ldr	r1, [pc, #216]	; (8001e64 <HAL_GPIO_Init+0x338>)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	089b      	lsrs	r3, r3, #2
 8001d8e:	3302      	adds	r3, #2
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d96:	4b3a      	ldr	r3, [pc, #232]	; (8001e80 <HAL_GPIO_Init+0x354>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dba:	4a31      	ldr	r2, [pc, #196]	; (8001e80 <HAL_GPIO_Init+0x354>)
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001dc0:	4b2f      	ldr	r3, [pc, #188]	; (8001e80 <HAL_GPIO_Init+0x354>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001de4:	4a26      	ldr	r2, [pc, #152]	; (8001e80 <HAL_GPIO_Init+0x354>)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dea:	4b25      	ldr	r3, [pc, #148]	; (8001e80 <HAL_GPIO_Init+0x354>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x2e2>
        {
          temp |= iocurrent;
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e0e:	4a1c      	ldr	r2, [pc, #112]	; (8001e80 <HAL_GPIO_Init+0x354>)
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e14:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <HAL_GPIO_Init+0x354>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x30c>
        {
          temp |= iocurrent;
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e38:	4a11      	ldr	r2, [pc, #68]	; (8001e80 <HAL_GPIO_Init+0x354>)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	3301      	adds	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f47f ae78 	bne.w	8001b44 <HAL_GPIO_Init+0x18>
  }
}
 8001e54:	bf00      	nop
 8001e56:	371c      	adds	r7, #28
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40010000 	.word	0x40010000
 8001e68:	48000400 	.word	0x48000400
 8001e6c:	48000800 	.word	0x48000800
 8001e70:	48000c00 	.word	0x48000c00
 8001e74:	48001000 	.word	0x48001000
 8001e78:	48001400 	.word	0x48001400
 8001e7c:	48001800 	.word	0x48001800
 8001e80:	40010400 	.word	0x40010400

08001e84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e081      	b.n	8001f9a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d106      	bne.n	8001eb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f002 fea2 	bl	8004bf4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2224      	movs	r2, #36	; 0x24
 8001eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0201 	bic.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ed4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ee4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d107      	bne.n	8001efe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	e006      	b.n	8001f0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d104      	bne.n	8001f1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691a      	ldr	r2, [r3, #16]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	ea42 0103 	orr.w	r1, r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	021a      	lsls	r2, r3, #8
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69d9      	ldr	r1, [r3, #28]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1a      	ldr	r2, [r3, #32]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0201 	orr.w	r2, r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2220      	movs	r2, #32
 8001f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	4608      	mov	r0, r1
 8001fae:	4611      	mov	r1, r2
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	817b      	strh	r3, [r7, #10]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	813b      	strh	r3, [r7, #8]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b20      	cmp	r3, #32
 8001fcc:	f040 8109 	bne.w	80021e2 <HAL_I2C_Mem_Write+0x23e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <HAL_I2C_Mem_Write+0x38>
 8001fd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_I2C_Mem_Write+0x3c>
    {
      return  HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e101      	b.n	80021e4 <HAL_I2C_Mem_Write+0x240>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_I2C_Mem_Write+0x4a>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e0fa      	b.n	80021e4 <HAL_I2C_Mem_Write+0x240>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ff6:	f7ff fc5f 	bl	80018b8 <HAL_GetTick>
 8001ffa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	2319      	movs	r3, #25
 8002002:	2201      	movs	r2, #1
 8002004:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f000 fafb 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <HAL_I2C_Mem_Write+0x74>
    {
      return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e0e5      	b.n	80021e4 <HAL_I2C_Mem_Write+0x240>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2221      	movs	r2, #33	; 0x21
 800201c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2240      	movs	r2, #64	; 0x40
 8002024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6a3a      	ldr	r2, [r7, #32]
 8002032:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002038:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002040:	88f8      	ldrh	r0, [r7, #6]
 8002042:	893a      	ldrh	r2, [r7, #8]
 8002044:	8979      	ldrh	r1, [r7, #10]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	4603      	mov	r3, r0
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 f9f3 	bl	800243c <I2C_RequestMemoryWrite>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00f      	beq.n	800207c <HAL_I2C_Mem_Write+0xd8>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002060:	2b04      	cmp	r3, #4
 8002062:	d105      	bne.n	8002070 <HAL_I2C_Mem_Write+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0b9      	b.n	80021e4 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e0b3      	b.n	80021e4 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002080:	b29b      	uxth	r3, r3
 8002082:	2bff      	cmp	r3, #255	; 0xff
 8002084:	d90e      	bls.n	80020a4 <HAL_I2C_Mem_Write+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	22ff      	movs	r2, #255	; 0xff
 800208a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002090:	b2da      	uxtb	r2, r3
 8002092:	8979      	ldrh	r1, [r7, #10]
 8002094:	2300      	movs	r3, #0
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 fbc5 	bl	800282c <I2C_TransferConfig>
 80020a2:	e00f      	b.n	80020c4 <HAL_I2C_Mem_Write+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	8979      	ldrh	r1, [r7, #10]
 80020b6:	2300      	movs	r3, #0
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 fbb4 	bl	800282c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 fad5 	bl	8002678 <I2C_WaitOnTXISFlagUntilTimeout>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d007      	beq.n	80020e4 <HAL_I2C_Mem_Write+0x140>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d101      	bne.n	80020e0 <HAL_I2C_Mem_Write+0x13c>
        {
          return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e081      	b.n	80021e4 <HAL_I2C_Mem_Write+0x240>
        }
        else
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e07f      	b.n	80021e4 <HAL_I2C_Mem_Write+0x240>
        }
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	1c59      	adds	r1, r3, #1
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	6251      	str	r1, [r2, #36]	; 0x24
 80020ee:	781a      	ldrb	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002108:	3b01      	subs	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002114:	2b00      	cmp	r3, #0
 8002116:	d135      	bne.n	8002184 <HAL_I2C_Mem_Write+0x1e0>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211c:	b29b      	uxth	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d030      	beq.n	8002184 <HAL_I2C_Mem_Write+0x1e0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002128:	2200      	movs	r2, #0
 800212a:	2180      	movs	r1, #128	; 0x80
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 fa69 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <HAL_I2C_Mem_Write+0x198>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e053      	b.n	80021e4 <HAL_I2C_Mem_Write+0x240>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002140:	b29b      	uxth	r3, r3
 8002142:	2bff      	cmp	r3, #255	; 0xff
 8002144:	d90e      	bls.n	8002164 <HAL_I2C_Mem_Write+0x1c0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	22ff      	movs	r2, #255	; 0xff
 800214a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002150:	b2da      	uxtb	r2, r3
 8002152:	8979      	ldrh	r1, [r7, #10]
 8002154:	2300      	movs	r3, #0
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 fb65 	bl	800282c <I2C_TransferConfig>
 8002162:	e00f      	b.n	8002184 <HAL_I2C_Mem_Write+0x1e0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002168:	b29a      	uxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002172:	b2da      	uxtb	r2, r3
 8002174:	8979      	ldrh	r1, [r7, #10]
 8002176:	2300      	movs	r3, #0
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 fb54 	bl	800282c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002188:	b29b      	uxth	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d19a      	bne.n	80020c4 <HAL_I2C_Mem_Write+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 fab0 	bl	80026f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d007      	beq.n	80021ae <HAL_I2C_Mem_Write+0x20a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d101      	bne.n	80021aa <HAL_I2C_Mem_Write+0x206>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e01c      	b.n	80021e4 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e01a      	b.n	80021e4 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2220      	movs	r2, #32
 80021b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6859      	ldr	r1, [r3, #4]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <HAL_I2C_Mem_Write+0x248>)
 80021c2:	400b      	ands	r3, r1
 80021c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2220      	movs	r2, #32
 80021ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	e000      	b.n	80021e4 <HAL_I2C_Mem_Write+0x240>
  }
  else
  {
    return HAL_BUSY;
 80021e2:	2302      	movs	r3, #2
  }
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	fe00e800 	.word	0xfe00e800

080021f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af02      	add	r7, sp, #8
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	4608      	mov	r0, r1
 80021fa:	4611      	mov	r1, r2
 80021fc:	461a      	mov	r2, r3
 80021fe:	4603      	mov	r3, r0
 8002200:	817b      	strh	r3, [r7, #10]
 8002202:	460b      	mov	r3, r1
 8002204:	813b      	strh	r3, [r7, #8]
 8002206:	4613      	mov	r3, r2
 8002208:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b20      	cmp	r3, #32
 8002218:	f040 8107 	bne.w	800242a <HAL_I2C_Mem_Read+0x23a>
  {
    if ((pData == NULL) || (Size == 0U))
 800221c:	6a3b      	ldr	r3, [r7, #32]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d002      	beq.n	8002228 <HAL_I2C_Mem_Read+0x38>
 8002222:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_I2C_Mem_Read+0x3c>
    {
      return  HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0ff      	b.n	800242c <HAL_I2C_Mem_Read+0x23c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_I2C_Mem_Read+0x4a>
 8002236:	2302      	movs	r3, #2
 8002238:	e0f8      	b.n	800242c <HAL_I2C_Mem_Read+0x23c>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002242:	f7ff fb39 	bl	80018b8 <HAL_GetTick>
 8002246:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	2319      	movs	r3, #25
 800224e:	2201      	movs	r2, #1
 8002250:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 f9d5 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <HAL_I2C_Mem_Read+0x74>
    {
      return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e0e3      	b.n	800242c <HAL_I2C_Mem_Read+0x23c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2222      	movs	r2, #34	; 0x22
 8002268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2240      	movs	r2, #64	; 0x40
 8002270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6a3a      	ldr	r2, [r7, #32]
 800227e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002284:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800228c:	88f8      	ldrh	r0, [r7, #6]
 800228e:	893a      	ldrh	r2, [r7, #8]
 8002290:	8979      	ldrh	r1, [r7, #10]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	9301      	str	r3, [sp, #4]
 8002296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	4603      	mov	r3, r0
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 f92d 	bl	80024fc <I2C_RequestMemoryRead>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00f      	beq.n	80022c8 <HAL_I2C_Mem_Read+0xd8>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d105      	bne.n	80022bc <HAL_I2C_Mem_Read+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0b7      	b.n	800242c <HAL_I2C_Mem_Read+0x23c>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e0b1      	b.n	800242c <HAL_I2C_Mem_Read+0x23c>
      }
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	2bff      	cmp	r3, #255	; 0xff
 80022d0:	d90e      	bls.n	80022f0 <HAL_I2C_Mem_Read+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	22ff      	movs	r2, #255	; 0xff
 80022d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	8979      	ldrh	r1, [r7, #10]
 80022e0:	4b54      	ldr	r3, [pc, #336]	; (8002434 <HAL_I2C_Mem_Read+0x244>)
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 fa9f 	bl	800282c <I2C_TransferConfig>
 80022ee:	e00f      	b.n	8002310 <HAL_I2C_Mem_Read+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	8979      	ldrh	r1, [r7, #10]
 8002302:	4b4c      	ldr	r3, [pc, #304]	; (8002434 <HAL_I2C_Mem_Read+0x244>)
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 fa8e 	bl	800282c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002316:	2200      	movs	r2, #0
 8002318:	2104      	movs	r1, #4
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 f972 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_I2C_Mem_Read+0x13a>
      {
        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e080      	b.n	800242c <HAL_I2C_Mem_Read+0x23c>
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	1c59      	adds	r1, r3, #1
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	6251      	str	r1, [r2, #36]	; 0x24
 800233a:	b2c2      	uxtb	r2, r0
 800233c:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002342:	3b01      	subs	r3, #1
 8002344:	b29a      	uxth	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235c:	2b00      	cmp	r3, #0
 800235e:	d135      	bne.n	80023cc <HAL_I2C_Mem_Read+0x1dc>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002364:	b29b      	uxth	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d030      	beq.n	80023cc <HAL_I2C_Mem_Read+0x1dc>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002370:	2200      	movs	r2, #0
 8002372:	2180      	movs	r1, #128	; 0x80
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 f945 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <HAL_I2C_Mem_Read+0x194>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e053      	b.n	800242c <HAL_I2C_Mem_Read+0x23c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002388:	b29b      	uxth	r3, r3
 800238a:	2bff      	cmp	r3, #255	; 0xff
 800238c:	d90e      	bls.n	80023ac <HAL_I2C_Mem_Read+0x1bc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	22ff      	movs	r2, #255	; 0xff
 8002392:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002398:	b2da      	uxtb	r2, r3
 800239a:	8979      	ldrh	r1, [r7, #10]
 800239c:	2300      	movs	r3, #0
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 fa41 	bl	800282c <I2C_TransferConfig>
 80023aa:	e00f      	b.n	80023cc <HAL_I2C_Mem_Read+0x1dc>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	8979      	ldrh	r1, [r7, #10]
 80023be:	2300      	movs	r3, #0
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 fa30 	bl	800282c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d19c      	bne.n	8002310 <HAL_I2C_Mem_Read+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 f98c 	bl	80026f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d007      	beq.n	80023f6 <HAL_I2C_Mem_Read+0x206>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d101      	bne.n	80023f2 <HAL_I2C_Mem_Read+0x202>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e01c      	b.n	800242c <HAL_I2C_Mem_Read+0x23c>
      }
      else
      {
        return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e01a      	b.n	800242c <HAL_I2C_Mem_Read+0x23c>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2220      	movs	r2, #32
 80023fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6859      	ldr	r1, [r3, #4]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_I2C_Mem_Read+0x248>)
 800240a:	400b      	ands	r3, r1
 800240c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2220      	movs	r2, #32
 8002412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	e000      	b.n	800242c <HAL_I2C_Mem_Read+0x23c>
  }
  else
  {
    return HAL_BUSY;
 800242a:	2302      	movs	r3, #2
  }
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	80002400 	.word	0x80002400
 8002438:	fe00e800 	.word	0xfe00e800

0800243c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af02      	add	r7, sp, #8
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	4608      	mov	r0, r1
 8002446:	4611      	mov	r1, r2
 8002448:	461a      	mov	r2, r3
 800244a:	4603      	mov	r3, r0
 800244c:	817b      	strh	r3, [r7, #10]
 800244e:	460b      	mov	r3, r1
 8002450:	813b      	strh	r3, [r7, #8]
 8002452:	4613      	mov	r3, r2
 8002454:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002456:	88fb      	ldrh	r3, [r7, #6]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	8979      	ldrh	r1, [r7, #10]
 800245c:	4b26      	ldr	r3, [pc, #152]	; (80024f8 <I2C_RequestMemoryWrite+0xbc>)
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 f9e1 	bl	800282c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800246a:	69fa      	ldr	r2, [r7, #28]
 800246c:	69b9      	ldr	r1, [r7, #24]
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 f902 	bl	8002678 <I2C_WaitOnTXISFlagUntilTimeout>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d007      	beq.n	800248a <I2C_RequestMemoryWrite+0x4e>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	2b04      	cmp	r3, #4
 8002480:	d101      	bne.n	8002486 <I2C_RequestMemoryWrite+0x4a>
    {
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e034      	b.n	80024f0 <I2C_RequestMemoryWrite+0xb4>
    }
    else
    {
      return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e032      	b.n	80024f0 <I2C_RequestMemoryWrite+0xb4>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d105      	bne.n	800249c <I2C_RequestMemoryWrite+0x60>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002490:	893b      	ldrh	r3, [r7, #8]
 8002492:	b2da      	uxtb	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	629a      	str	r2, [r3, #40]	; 0x28
 800249a:	e01b      	b.n	80024d4 <I2C_RequestMemoryWrite+0x98>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800249c:	893b      	ldrh	r3, [r7, #8]
 800249e:	0a1b      	lsrs	r3, r3, #8
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024aa:	69fa      	ldr	r2, [r7, #28]
 80024ac:	69b9      	ldr	r1, [r7, #24]
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 f8e2 	bl	8002678 <I2C_WaitOnTXISFlagUntilTimeout>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d007      	beq.n	80024ca <I2C_RequestMemoryWrite+0x8e>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d101      	bne.n	80024c6 <I2C_RequestMemoryWrite+0x8a>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e014      	b.n	80024f0 <I2C_RequestMemoryWrite+0xb4>
      }
      else
      {
        return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e012      	b.n	80024f0 <I2C_RequestMemoryWrite+0xb4>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024ca:	893b      	ldrh	r3, [r7, #8]
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	2200      	movs	r2, #0
 80024dc:	2180      	movs	r1, #128	; 0x80
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 f890 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <I2C_RequestMemoryWrite+0xb2>
  {
    return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e000      	b.n	80024f0 <I2C_RequestMemoryWrite+0xb4>
  }

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	80002000 	.word	0x80002000

080024fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af02      	add	r7, sp, #8
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	4608      	mov	r0, r1
 8002506:	4611      	mov	r1, r2
 8002508:	461a      	mov	r2, r3
 800250a:	4603      	mov	r3, r0
 800250c:	817b      	strh	r3, [r7, #10]
 800250e:	460b      	mov	r3, r1
 8002510:	813b      	strh	r3, [r7, #8]
 8002512:	4613      	mov	r3, r2
 8002514:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002516:	88fb      	ldrh	r3, [r7, #6]
 8002518:	b2da      	uxtb	r2, r3
 800251a:	8979      	ldrh	r1, [r7, #10]
 800251c:	4b26      	ldr	r3, [pc, #152]	; (80025b8 <I2C_RequestMemoryRead+0xbc>)
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	2300      	movs	r3, #0
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 f982 	bl	800282c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002528:	69fa      	ldr	r2, [r7, #28]
 800252a:	69b9      	ldr	r1, [r7, #24]
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 f8a3 	bl	8002678 <I2C_WaitOnTXISFlagUntilTimeout>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d007      	beq.n	8002548 <I2C_RequestMemoryRead+0x4c>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253c:	2b04      	cmp	r3, #4
 800253e:	d101      	bne.n	8002544 <I2C_RequestMemoryRead+0x48>
    {
      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e034      	b.n	80025ae <I2C_RequestMemoryRead+0xb2>
    }
    else
    {
      return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e032      	b.n	80025ae <I2C_RequestMemoryRead+0xb2>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002548:	88fb      	ldrh	r3, [r7, #6]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d105      	bne.n	800255a <I2C_RequestMemoryRead+0x5e>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800254e:	893b      	ldrh	r3, [r7, #8]
 8002550:	b2da      	uxtb	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	629a      	str	r2, [r3, #40]	; 0x28
 8002558:	e01b      	b.n	8002592 <I2C_RequestMemoryRead+0x96>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800255a:	893b      	ldrh	r3, [r7, #8]
 800255c:	0a1b      	lsrs	r3, r3, #8
 800255e:	b29b      	uxth	r3, r3
 8002560:	b2da      	uxtb	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002568:	69fa      	ldr	r2, [r7, #28]
 800256a:	69b9      	ldr	r1, [r7, #24]
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 f883 	bl	8002678 <I2C_WaitOnTXISFlagUntilTimeout>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d007      	beq.n	8002588 <I2C_RequestMemoryRead+0x8c>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257c:	2b04      	cmp	r3, #4
 800257e:	d101      	bne.n	8002584 <I2C_RequestMemoryRead+0x88>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e014      	b.n	80025ae <I2C_RequestMemoryRead+0xb2>
      }
      else
      {
        return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e012      	b.n	80025ae <I2C_RequestMemoryRead+0xb2>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002588:	893b      	ldrh	r3, [r7, #8]
 800258a:	b2da      	uxtb	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	2200      	movs	r2, #0
 800259a:	2140      	movs	r1, #64	; 0x40
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 f831 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <I2C_RequestMemoryRead+0xb0>
  {
    return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e000      	b.n	80025ae <I2C_RequestMemoryRead+0xb2>
  }

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	80002000 	.word	0x80002000

080025bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d103      	bne.n	80025da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2200      	movs	r2, #0
 80025d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d007      	beq.n	80025f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699a      	ldr	r2, [r3, #24]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	619a      	str	r2, [r3, #24]
  }
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	4613      	mov	r3, r2
 8002612:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002614:	e01c      	b.n	8002650 <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261c:	d018      	beq.n	8002650 <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d007      	beq.n	8002634 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002624:	f7ff f948 	bl	80018b8 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d20d      	bcs.n	8002650 <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e00f      	b.n	8002670 <I2C_WaitOnFlagUntilTimeout+0x6c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699a      	ldr	r2, [r3, #24]
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	4013      	ands	r3, r2
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	429a      	cmp	r2, r3
 800265e:	bf0c      	ite	eq
 8002660:	2301      	moveq	r3, #1
 8002662:	2300      	movne	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	429a      	cmp	r2, r3
 800266c:	d0d3      	beq.n	8002616 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002684:	e02c      	b.n	80026e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68b9      	ldr	r1, [r7, #8]
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f870 	bl	8002770 <I2C_IsAcknowledgeFailed>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e02a      	b.n	80026f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a0:	d01e      	beq.n	80026e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d007      	beq.n	80026b8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80026a8:	f7ff f906 	bl	80018b8 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d213      	bcs.n	80026e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026bc:	f043 0220 	orr.w	r2, r3, #32
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2220      	movs	r2, #32
 80026c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e007      	b.n	80026f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d1cb      	bne.n	8002686 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002704:	e028      	b.n	8002758 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	68b9      	ldr	r1, [r7, #8]
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 f830 	bl	8002770 <I2C_IsAcknowledgeFailed>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e026      	b.n	8002768 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d007      	beq.n	8002730 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002720:	f7ff f8ca 	bl	80018b8 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	429a      	cmp	r2, r3
 800272e:	d213      	bcs.n	8002758 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002734:	f043 0220 	orr.w	r2, r3, #32
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2220      	movs	r2, #32
 8002740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e007      	b.n	8002768 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	f003 0320 	and.w	r3, r3, #32
 8002762:	2b20      	cmp	r3, #32
 8002764:	d1cf      	bne.n	8002706 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	f003 0310 	and.w	r3, r3, #16
 8002786:	2b10      	cmp	r3, #16
 8002788:	d148      	bne.n	800281c <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800278a:	e01c      	b.n	80027c6 <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002792:	d018      	beq.n	80027c6 <I2C_IsAcknowledgeFailed+0x56>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d007      	beq.n	80027aa <I2C_IsAcknowledgeFailed+0x3a>
 800279a:	f7ff f88d 	bl	80018b8 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d20d      	bcs.n	80027c6 <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e02b      	b.n	800281e <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d1db      	bne.n	800278c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2210      	movs	r2, #16
 80027da:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2220      	movs	r2, #32
 80027e2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f7ff fee9 	bl	80025bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6859      	ldr	r1, [r3, #4]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <I2C_IsAcknowledgeFailed+0xb8>)
 80027f6:	400b      	ands	r3, r1
 80027f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2204      	movs	r2, #4
 80027fe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e000      	b.n	800281e <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	fe00e800 	.word	0xfe00e800

0800282c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	460b      	mov	r3, r1
 8002838:	817b      	strh	r3, [r7, #10]
 800283a:	4613      	mov	r3, r2
 800283c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	0d5b      	lsrs	r3, r3, #21
 8002848:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800284c:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <I2C_TransferConfig+0x58>)
 800284e:	430b      	orrs	r3, r1
 8002850:	43db      	mvns	r3, r3
 8002852:	ea02 0103 	and.w	r1, r2, r3
 8002856:	897b      	ldrh	r3, [r7, #10]
 8002858:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800285c:	7a7b      	ldrb	r3, [r7, #9]
 800285e:	041b      	lsls	r3, r3, #16
 8002860:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	431a      	orrs	r2, r3
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	431a      	orrs	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002876:	bf00      	nop
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	03ff63ff 	.word	0x03ff63ff

08002888 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b20      	cmp	r3, #32
 800289c:	d138      	bne.n	8002910 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028a8:	2302      	movs	r3, #2
 80028aa:	e032      	b.n	8002912 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2224      	movs	r2, #36	; 0x24
 80028b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0201 	bic.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6819      	ldr	r1, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	e000      	b.n	8002912 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002910:	2302      	movs	r3, #2
  }
}
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800291e:	b480      	push	{r7}
 8002920:	b085      	sub	sp, #20
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b20      	cmp	r3, #32
 8002936:	d139      	bne.n	80029ac <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8002942:	2302      	movs	r3, #2
 8002944:	e033      	b.n	80029ae <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2224      	movs	r2, #36	; 0x24
 8002952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0201 	bic.w	r2, r2, #1
 8002964:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002974:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	021b      	lsls	r3, r3, #8
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	e000      	b.n	80029ae <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 80029ac:	2302      	movs	r3, #2
  }
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2 
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80029c0:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif  
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40007000 	.word	0x40007000

080029d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index = 0;  
 80029e0:	2300      	movs	r3, #0
 80029e2:	60fb      	str	r3, [r7, #12]
  }
  
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029ea:	d12f      	bne.n	8002a4c <HAL_PWREx_ControlVoltageScaling+0x74>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80029ec:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029f8:	d037      	beq.n	8002a6a <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029fa:	4b1f      	ldr	r3, [pc, #124]	; (8002a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a02:	4a1d      	ldr	r2, [pc, #116]	; (8002a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a08:	6013      	str	r3, [r2, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8002a0a:	4b1c      	ldr	r3, [pc, #112]	; (8002a7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a1c      	ldr	r2, [pc, #112]	; (8002a80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a10:	fba2 2303 	umull	r2, r3, r2, r3
 8002a14:	0c9b      	lsrs	r3, r3, #18
 8002a16:	2232      	movs	r2, #50	; 0x32
 8002a18:	fb02 f303 	mul.w	r3, r2, r3
 8002a1c:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8002a1e:	e002      	b.n	8002a26 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d006      	beq.n	8002a3a <HAL_PWREx_ControlVoltageScaling+0x62>
 8002a2c:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a38:	d0f2      	beq.n	8002a20 <HAL_PWREx_ControlVoltageScaling+0x48>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a3a:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a46:	d110      	bne.n	8002a6a <HAL_PWREx_ControlVoltageScaling+0x92>
      {
        return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e00f      	b.n	8002a6c <HAL_PWREx_ControlVoltageScaling+0x94>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a4c:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a58:	d007      	beq.n	8002a6a <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a5a:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a62:	4a05      	ldr	r2, [pc, #20]	; (8002a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a68:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}  
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	40007000 	.word	0x40007000
 8002a7c:	20000000 	.word	0x20000000
 8002a80:	431bde83 	.word	0x431bde83

08002a84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0310 	and.w	r3, r3, #16
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80d0 	beq.w	8002c3e <HAL_RCC_OscConfig+0x1ba>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8002a9e:	4ba1      	ldr	r3, [pc, #644]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d179      	bne.n	8002b9e <HAL_RCC_OscConfig+0x11a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002aaa:	4b9e      	ldr	r3, [pc, #632]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d005      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x3e>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x3e>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e33c      	b.n	800313c <HAL_RCC_OscConfig+0x6b8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1a      	ldr	r2, [r3, #32]
 8002ac6:	4b97      	ldr	r3, [pc, #604]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d004      	beq.n	8002adc <HAL_RCC_OscConfig+0x58>
 8002ad2:	4b94      	ldr	r3, [pc, #592]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ada:	e005      	b.n	8002ae8 <HAL_RCC_OscConfig+0x64>
 8002adc:	4b91      	ldr	r3, [pc, #580]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae2:	091b      	lsrs	r3, r3, #4
 8002ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d223      	bcs.n	8002b34 <HAL_RCC_OscConfig+0xb0>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 fd25 	bl	8003540 <RCC_SetFlashLatencyFromMSIRange>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_OscConfig+0x7c>
          {
            return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e31d      	b.n	800313c <HAL_RCC_OscConfig+0x6b8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b00:	4b88      	ldr	r3, [pc, #544]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a87      	ldr	r2, [pc, #540]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002b06:	f043 0308 	orr.w	r3, r3, #8
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	4b85      	ldr	r3, [pc, #532]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	4982      	ldr	r1, [pc, #520]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b1e:	4b81      	ldr	r3, [pc, #516]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	021b      	lsls	r3, r3, #8
 8002b2c:	497d      	ldr	r1, [pc, #500]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	604b      	str	r3, [r1, #4]
 8002b32:	e022      	b.n	8002b7a <HAL_RCC_OscConfig+0xf6>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b34:	4b7b      	ldr	r3, [pc, #492]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a7a      	ldr	r2, [pc, #488]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002b3a:	f043 0308 	orr.w	r3, r3, #8
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	4b78      	ldr	r3, [pc, #480]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	4975      	ldr	r1, [pc, #468]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b52:	4b74      	ldr	r3, [pc, #464]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	021b      	lsls	r3, r3, #8
 8002b60:	4970      	ldr	r1, [pc, #448]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fce8 	bl	8003540 <RCC_SetFlashLatencyFromMSIRange>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e2e0      	b.n	800313c <HAL_RCC_OscConfig+0x6b8>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b7a:	f000 fbfd 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8002b7e:	4601      	mov	r1, r0
 8002b80:	4b68      	ldr	r3, [pc, #416]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	4a67      	ldr	r2, [pc, #412]	; (8002d28 <HAL_RCC_OscConfig+0x2a4>)
 8002b8c:	5cd3      	ldrb	r3, [r2, r3]
 8002b8e:	fa21 f303 	lsr.w	r3, r1, r3
 8002b92:	4a66      	ldr	r2, [pc, #408]	; (8002d2c <HAL_RCC_OscConfig+0x2a8>)
 8002b94:	6013      	str	r3, [r2, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8002b96:	2000      	movs	r0, #0
 8002b98:	f7fe fe64 	bl	8001864 <HAL_InitTick>
 8002b9c:	e04f      	b.n	8002c3e <HAL_RCC_OscConfig+0x1ba>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d032      	beq.n	8002c0c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ba6:	4b5f      	ldr	r3, [pc, #380]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a5e      	ldr	r2, [pc, #376]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bb2:	f7fe fe81 	bl	80018b8 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x148>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bba:	f7fe fe7d 	bl	80018b8 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x148>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e2b7      	b.n	800313c <HAL_RCC_OscConfig+0x6b8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8002bcc:	4b55      	ldr	r3, [pc, #340]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0f0      	beq.n	8002bba <HAL_RCC_OscConfig+0x136>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bd8:	4b52      	ldr	r3, [pc, #328]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a51      	ldr	r2, [pc, #324]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002bde:	f043 0308 	orr.w	r3, r3, #8
 8002be2:	6013      	str	r3, [r2, #0]
 8002be4:	4b4f      	ldr	r3, [pc, #316]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	494c      	ldr	r1, [pc, #304]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bf6:	4b4b      	ldr	r3, [pc, #300]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	021b      	lsls	r3, r3, #8
 8002c04:	4947      	ldr	r1, [pc, #284]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	604b      	str	r3, [r1, #4]
 8002c0a:	e018      	b.n	8002c3e <HAL_RCC_OscConfig+0x1ba>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c0c:	4b45      	ldr	r3, [pc, #276]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a44      	ldr	r2, [pc, #272]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002c12:	f023 0301 	bic.w	r3, r3, #1
 8002c16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c18:	f7fe fe4e 	bl	80018b8 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c20:	f7fe fe4a 	bl	80018b8 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e284      	b.n	800313c <HAL_RCC_OscConfig+0x6b8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8002c32:	4b3c      	ldr	r3, [pc, #240]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x19c>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d07a      	beq.n	8002d40 <HAL_RCC_OscConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8002c4a:	4b36      	ldr	r3, [pc, #216]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d00b      	beq.n	8002c6e <HAL_RCC_OscConfig+0x1ea>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c56:	4b33      	ldr	r3, [pc, #204]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8002c5e:	2b0c      	cmp	r3, #12
 8002c60:	d111      	bne.n	8002c86 <HAL_RCC_OscConfig+0x202>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c62:	4b30      	ldr	r3, [pc, #192]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	d10b      	bne.n	8002c86 <HAL_RCC_OscConfig+0x202>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6e:	4b2d      	ldr	r3, [pc, #180]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d061      	beq.n	8002d3e <HAL_RCC_OscConfig+0x2ba>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d15d      	bne.n	8002d3e <HAL_RCC_OscConfig+0x2ba>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e25a      	b.n	800313c <HAL_RCC_OscConfig+0x6b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8e:	d106      	bne.n	8002c9e <HAL_RCC_OscConfig+0x21a>
 8002c90:	4b24      	ldr	r3, [pc, #144]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a23      	ldr	r2, [pc, #140]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	e01d      	b.n	8002cda <HAL_RCC_OscConfig+0x256>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ca6:	d10c      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x23e>
 8002ca8:	4b1e      	ldr	r3, [pc, #120]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a1d      	ldr	r2, [pc, #116]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002cae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb2:	6013      	str	r3, [r2, #0]
 8002cb4:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a1a      	ldr	r2, [pc, #104]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cbe:	6013      	str	r3, [r2, #0]
 8002cc0:	e00b      	b.n	8002cda <HAL_RCC_OscConfig+0x256>
 8002cc2:	4b18      	ldr	r3, [pc, #96]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a17      	ldr	r2, [pc, #92]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a14      	ldr	r2, [pc, #80]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002cd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cd8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d013      	beq.n	8002d0a <HAL_RCC_OscConfig+0x286>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce2:	f7fe fde9 	bl	80018b8 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x278>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cea:	f7fe fde5 	bl	80018b8 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b64      	cmp	r3, #100	; 0x64
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e21f      	b.n	800313c <HAL_RCC_OscConfig+0x6b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8002cfc:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <HAL_RCC_OscConfig+0x2a0>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x266>
 8002d08:	e01a      	b.n	8002d40 <HAL_RCC_OscConfig+0x2bc>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0a:	f7fe fdd5 	bl	80018b8 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002d10:	e00e      	b.n	8002d30 <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d12:	f7fe fdd1 	bl	80018b8 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b64      	cmp	r3, #100	; 0x64
 8002d1e:	d907      	bls.n	8002d30 <HAL_RCC_OscConfig+0x2ac>
          {
            return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e20b      	b.n	800313c <HAL_RCC_OscConfig+0x6b8>
 8002d24:	40021000 	.word	0x40021000
 8002d28:	080061f0 	.word	0x080061f0
 8002d2c:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002d30:	4ba9      	ldr	r3, [pc, #676]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1ea      	bne.n	8002d12 <HAL_RCC_OscConfig+0x28e>
 8002d3c:	e000      	b.n	8002d40 <HAL_RCC_OscConfig+0x2bc>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d3e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d069      	beq.n	8002e20 <HAL_RCC_OscConfig+0x39c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8002d4c:	4ba2      	ldr	r3, [pc, #648]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 030c 	and.w	r3, r3, #12
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d00b      	beq.n	8002d70 <HAL_RCC_OscConfig+0x2ec>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d58:	4b9f      	ldr	r3, [pc, #636]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8002d60:	2b0c      	cmp	r3, #12
 8002d62:	d11c      	bne.n	8002d9e <HAL_RCC_OscConfig+0x31a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d64:	4b9c      	ldr	r3, [pc, #624]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d116      	bne.n	8002d9e <HAL_RCC_OscConfig+0x31a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d70:	4b99      	ldr	r3, [pc, #612]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <HAL_RCC_OscConfig+0x304>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e1d9      	b.n	800313c <HAL_RCC_OscConfig+0x6b8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d88:	4b93      	ldr	r3, [pc, #588]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	061b      	lsls	r3, r3, #24
 8002d96:	4990      	ldr	r1, [pc, #576]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d9c:	e040      	b.n	8002e20 <HAL_RCC_OscConfig+0x39c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d023      	beq.n	8002dee <HAL_RCC_OscConfig+0x36a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002da6:	4b8c      	ldr	r3, [pc, #560]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a8b      	ldr	r2, [pc, #556]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db2:	f7fe fd81 	bl	80018b8 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x348>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dba:	f7fe fd7d 	bl	80018b8 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x348>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e1b7      	b.n	800313c <HAL_RCC_OscConfig+0x6b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002dcc:	4b82      	ldr	r3, [pc, #520]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0x336>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd8:	4b7f      	ldr	r3, [pc, #508]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	061b      	lsls	r3, r3, #24
 8002de6:	497c      	ldr	r1, [pc, #496]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]
 8002dec:	e018      	b.n	8002e20 <HAL_RCC_OscConfig+0x39c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dee:	4b7a      	ldr	r3, [pc, #488]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a79      	ldr	r2, [pc, #484]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfa:	f7fe fd5d 	bl	80018b8 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x390>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e02:	f7fe fd59 	bl	80018b8 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e193      	b.n	800313c <HAL_RCC_OscConfig+0x6b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8002e14:	4b70      	ldr	r3, [pc, #448]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1f0      	bne.n	8002e02 <HAL_RCC_OscConfig+0x37e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d03c      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d01c      	beq.n	8002e6e <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e34:	4b68      	ldr	r3, [pc, #416]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e3a:	4a67      	ldr	r2, [pc, #412]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e44:	f7fe fd38 	bl	80018b8 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e4c:	f7fe fd34 	bl	80018b8 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e16e      	b.n	800313c <HAL_RCC_OscConfig+0x6b8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8002e5e:	4b5e      	ldr	r3, [pc, #376]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0ef      	beq.n	8002e4c <HAL_RCC_OscConfig+0x3c8>
 8002e6c:	e01b      	b.n	8002ea6 <HAL_RCC_OscConfig+0x422>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e6e:	4b5a      	ldr	r3, [pc, #360]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e74:	4a58      	ldr	r2, [pc, #352]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002e76:	f023 0301 	bic.w	r3, r3, #1
 8002e7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7e:	f7fe fd1b 	bl	80018b8 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x414>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e86:	f7fe fd17 	bl	80018b8 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x414>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e151      	b.n	800313c <HAL_RCC_OscConfig+0x6b8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8002e98:	4b4f      	ldr	r3, [pc, #316]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1ef      	bne.n	8002e86 <HAL_RCC_OscConfig+0x402>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0304 	and.w	r3, r3, #4
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 80a6 	beq.w	8003000 <HAL_RCC_OscConfig+0x57c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002eb8:	4b47      	ldr	r3, [pc, #284]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10d      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x45c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec4:	4b44      	ldr	r3, [pc, #272]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec8:	4a43      	ldr	r2, [pc, #268]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ece:	6593      	str	r3, [r2, #88]	; 0x58
 8002ed0:	4b41      	ldr	r3, [pc, #260]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002edc:	2301      	movs	r3, #1
 8002ede:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ee0:	4b3e      	ldr	r3, [pc, #248]	; (8002fdc <HAL_RCC_OscConfig+0x558>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d118      	bne.n	8002f1e <HAL_RCC_OscConfig+0x49a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002eec:	4b3b      	ldr	r3, [pc, #236]	; (8002fdc <HAL_RCC_OscConfig+0x558>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a3a      	ldr	r2, [pc, #232]	; (8002fdc <HAL_RCC_OscConfig+0x558>)
 8002ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef8:	f7fe fcde 	bl	80018b8 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x48e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f00:	f7fe fcda 	bl	80018b8 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e114      	b.n	800313c <HAL_RCC_OscConfig+0x6b8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f12:	4b32      	ldr	r3, [pc, #200]	; (8002fdc <HAL_RCC_OscConfig+0x558>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d108      	bne.n	8002f38 <HAL_RCC_OscConfig+0x4b4>
 8002f26:	4b2c      	ldr	r3, [pc, #176]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2c:	4a2a      	ldr	r2, [pc, #168]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f36:	e024      	b.n	8002f82 <HAL_RCC_OscConfig+0x4fe>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b05      	cmp	r3, #5
 8002f3e:	d110      	bne.n	8002f62 <HAL_RCC_OscConfig+0x4de>
 8002f40:	4b25      	ldr	r3, [pc, #148]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f46:	4a24      	ldr	r2, [pc, #144]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002f48:	f043 0304 	orr.w	r3, r3, #4
 8002f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f50:	4b21      	ldr	r3, [pc, #132]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f56:	4a20      	ldr	r2, [pc, #128]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f60:	e00f      	b.n	8002f82 <HAL_RCC_OscConfig+0x4fe>
 8002f62:	4b1d      	ldr	r3, [pc, #116]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f68:	4a1b      	ldr	r2, [pc, #108]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002f6a:	f023 0301 	bic.w	r3, r3, #1
 8002f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f72:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f78:	4a17      	ldr	r2, [pc, #92]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002f7a:	f023 0304 	bic.w	r3, r3, #4
 8002f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d016      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x534>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8a:	f7fe fc95 	bl	80018b8 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8002f90:	e00a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x524>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f92:	f7fe fc91 	bl	80018b8 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x524>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e0c9      	b.n	800313c <HAL_RCC_OscConfig+0x6b8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8002fa8:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <HAL_RCC_OscConfig+0x554>)
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0ed      	beq.n	8002f92 <HAL_RCC_OscConfig+0x50e>
 8002fb6:	e01a      	b.n	8002fee <HAL_RCC_OscConfig+0x56a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb8:	f7fe fc7e 	bl	80018b8 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8002fbe:	e00f      	b.n	8002fe0 <HAL_RCC_OscConfig+0x55c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc0:	f7fe fc7a 	bl	80018b8 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d906      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x55c>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e0b2      	b.n	800313c <HAL_RCC_OscConfig+0x6b8>
 8002fd6:	bf00      	nop
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8002fe0:	4b58      	ldr	r3, [pc, #352]	; (8003144 <HAL_RCC_OscConfig+0x6c0>)
 8002fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1e8      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x53c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fee:	7dfb      	ldrb	r3, [r7, #23]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d105      	bne.n	8003000 <HAL_RCC_OscConfig+0x57c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff4:	4b53      	ldr	r3, [pc, #332]	; (8003144 <HAL_RCC_OscConfig+0x6c0>)
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff8:	4a52      	ldr	r2, [pc, #328]	; (8003144 <HAL_RCC_OscConfig+0x6c0>)
 8002ffa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 8098 	beq.w	800313a <HAL_RCC_OscConfig+0x6b6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800300a:	4b4e      	ldr	r3, [pc, #312]	; (8003144 <HAL_RCC_OscConfig+0x6c0>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 030c 	and.w	r3, r3, #12
 8003012:	2b0c      	cmp	r3, #12
 8003014:	f000 808f 	beq.w	8003136 <HAL_RCC_OscConfig+0x6b2>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301c:	2b02      	cmp	r3, #2
 800301e:	d156      	bne.n	80030ce <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003020:	4b48      	ldr	r3, [pc, #288]	; (8003144 <HAL_RCC_OscConfig+0x6c0>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a47      	ldr	r2, [pc, #284]	; (8003144 <HAL_RCC_OscConfig+0x6c0>)
 8003026:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800302a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302c:	f7fe fc44 	bl	80018b8 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x5c2>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003034:	f7fe fc40 	bl	80018b8 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x5c2>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e07a      	b.n	800313c <HAL_RCC_OscConfig+0x6b8>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003046:	4b3f      	ldr	r3, [pc, #252]	; (8003144 <HAL_RCC_OscConfig+0x6c0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f0      	bne.n	8003034 <HAL_RCC_OscConfig+0x5b0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	3b01      	subs	r3, #1
 8003058:	011a      	lsls	r2, r3, #4
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305e:	021b      	lsls	r3, r3, #8
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003066:	091b      	lsrs	r3, r3, #4
 8003068:	045b      	lsls	r3, r3, #17
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	431a      	orrs	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003076:	085b      	lsrs	r3, r3, #1
 8003078:	3b01      	subs	r3, #1
 800307a:	055b      	lsls	r3, r3, #21
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	085b      	lsrs	r3, r3, #1
 8003084:	3b01      	subs	r3, #1
 8003086:	065b      	lsls	r3, r3, #25
 8003088:	492e      	ldr	r1, [pc, #184]	; (8003144 <HAL_RCC_OscConfig+0x6c0>)
 800308a:	4313      	orrs	r3, r2
 800308c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800308e:	4b2d      	ldr	r3, [pc, #180]	; (8003144 <HAL_RCC_OscConfig+0x6c0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a2c      	ldr	r2, [pc, #176]	; (8003144 <HAL_RCC_OscConfig+0x6c0>)
 8003094:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003098:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800309a:	4b2a      	ldr	r3, [pc, #168]	; (8003144 <HAL_RCC_OscConfig+0x6c0>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	4a29      	ldr	r2, [pc, #164]	; (8003144 <HAL_RCC_OscConfig+0x6c0>)
 80030a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030a4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a6:	f7fe fc07 	bl	80018b8 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ae:	f7fe fc03 	bl	80018b8 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e03d      	b.n	800313c <HAL_RCC_OscConfig+0x6b8>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80030c0:	4b20      	ldr	r3, [pc, #128]	; (8003144 <HAL_RCC_OscConfig+0x6c0>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0f0      	beq.n	80030ae <HAL_RCC_OscConfig+0x62a>
 80030cc:	e035      	b.n	800313a <HAL_RCC_OscConfig+0x6b6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ce:	4b1d      	ldr	r3, [pc, #116]	; (8003144 <HAL_RCC_OscConfig+0x6c0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a1c      	ldr	r2, [pc, #112]	; (8003144 <HAL_RCC_OscConfig+0x6c0>)
 80030d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030d8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80030da:	4b1a      	ldr	r3, [pc, #104]	; (8003144 <HAL_RCC_OscConfig+0x6c0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10b      	bne.n	80030fe <HAL_RCC_OscConfig+0x67a>
#if defined(RCC_PLLSAI2_SUPPORT)
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 80030e6:	4b17      	ldr	r3, [pc, #92]	; (8003144 <HAL_RCC_OscConfig+0x6c0>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
           && 
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d105      	bne.n	80030fe <HAL_RCC_OscConfig+0x67a>
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80030f2:	4b14      	ldr	r3, [pc, #80]	; (8003144 <HAL_RCC_OscConfig+0x6c0>)
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	4a13      	ldr	r2, [pc, #76]	; (8003144 <HAL_RCC_OscConfig+0x6c0>)
 80030f8:	f023 0303 	bic.w	r3, r3, #3
 80030fc:	60d3      	str	r3, [r2, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80030fe:	4b11      	ldr	r3, [pc, #68]	; (8003144 <HAL_RCC_OscConfig+0x6c0>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	4a10      	ldr	r2, [pc, #64]	; (8003144 <HAL_RCC_OscConfig+0x6c0>)
 8003104:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310e:	f7fe fbd3 	bl	80018b8 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x6a4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003116:	f7fe fbcf 	bl	80018b8 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x6a4>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e009      	b.n	800313c <HAL_RCC_OscConfig+0x6b8>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003128:	4b06      	ldr	r3, [pc, #24]	; (8003144 <HAL_RCC_OscConfig+0x6c0>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f0      	bne.n	8003116 <HAL_RCC_OscConfig+0x692>
 8003134:	e001      	b.n	800313a <HAL_RCC_OscConfig+0x6b6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <HAL_RCC_OscConfig+0x6b8>
    }
  }
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40021000 	.word	0x40021000

08003148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003156:	4b84      	ldr	r3, [pc, #528]	; (8003368 <HAL_RCC_ClockConfig+0x220>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d910      	bls.n	8003186 <HAL_RCC_ClockConfig+0x3e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003164:	4b80      	ldr	r3, [pc, #512]	; (8003368 <HAL_RCC_ClockConfig+0x220>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f023 0207 	bic.w	r2, r3, #7
 800316c:	497e      	ldr	r1, [pc, #504]	; (8003368 <HAL_RCC_ClockConfig+0x220>)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	4313      	orrs	r3, r2
 8003172:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003174:	4b7c      	ldr	r3, [pc, #496]	; (8003368 <HAL_RCC_ClockConfig+0x220>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d001      	beq.n	8003186 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e0ec      	b.n	8003360 <HAL_RCC_ClockConfig+0x218>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 808e 	beq.w	80032b0 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b03      	cmp	r3, #3
 800319a:	d107      	bne.n	80031ac <HAL_RCC_ClockConfig+0x64>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800319c:	4b73      	ldr	r3, [pc, #460]	; (800336c <HAL_RCC_ClockConfig+0x224>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d121      	bne.n	80031ec <HAL_RCC_ClockConfig+0xa4>
      {
        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0d9      	b.n	8003360 <HAL_RCC_ClockConfig+0x218>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d107      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x7c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80031b4:	4b6d      	ldr	r3, [pc, #436]	; (800336c <HAL_RCC_ClockConfig+0x224>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d115      	bne.n	80031ec <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0cd      	b.n	8003360 <HAL_RCC_ClockConfig+0x218>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d107      	bne.n	80031dc <HAL_RCC_ClockConfig+0x94>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80031cc:	4b67      	ldr	r3, [pc, #412]	; (800336c <HAL_RCC_ClockConfig+0x224>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d109      	bne.n	80031ec <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0c1      	b.n	8003360 <HAL_RCC_ClockConfig+0x218>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80031dc:	4b63      	ldr	r3, [pc, #396]	; (800336c <HAL_RCC_ClockConfig+0x224>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e0b9      	b.n	8003360 <HAL_RCC_ClockConfig+0x218>
      }
#endif
      
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031ec:	4b5f      	ldr	r3, [pc, #380]	; (800336c <HAL_RCC_ClockConfig+0x224>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f023 0203 	bic.w	r2, r3, #3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	495c      	ldr	r1, [pc, #368]	; (800336c <HAL_RCC_ClockConfig+0x224>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031fe:	f7fe fb5b 	bl	80018b8 <HAL_GetTick>
 8003202:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b03      	cmp	r3, #3
 800320a:	d112      	bne.n	8003232 <HAL_RCC_ClockConfig+0xea>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800320c:	e00a      	b.n	8003224 <HAL_RCC_ClockConfig+0xdc>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800320e:	f7fe fb53 	bl	80018b8 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	f241 3288 	movw	r2, #5000	; 0x1388
 800321c:	4293      	cmp	r3, r2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_ClockConfig+0xdc>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e09d      	b.n	8003360 <HAL_RCC_ClockConfig+0x218>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003224:	4b51      	ldr	r3, [pc, #324]	; (800336c <HAL_RCC_ClockConfig+0x224>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 030c 	and.w	r3, r3, #12
 800322c:	2b0c      	cmp	r3, #12
 800322e:	d1ee      	bne.n	800320e <HAL_RCC_ClockConfig+0xc6>
 8003230:	e03e      	b.n	80032b0 <HAL_RCC_ClockConfig+0x168>
        }
      }
    }
    else
    {
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d112      	bne.n	8003260 <HAL_RCC_ClockConfig+0x118>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800323a:	e00a      	b.n	8003252 <HAL_RCC_ClockConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800323c:	f7fe fb3c 	bl	80018b8 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	f241 3288 	movw	r2, #5000	; 0x1388
 800324a:	4293      	cmp	r3, r2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_ClockConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e086      	b.n	8003360 <HAL_RCC_ClockConfig+0x218>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8003252:	4b46      	ldr	r3, [pc, #280]	; (800336c <HAL_RCC_ClockConfig+0x224>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b08      	cmp	r3, #8
 800325c:	d1ee      	bne.n	800323c <HAL_RCC_ClockConfig+0xf4>
 800325e:	e027      	b.n	80032b0 <HAL_RCC_ClockConfig+0x168>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d11d      	bne.n	80032a4 <HAL_RCC_ClockConfig+0x15c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8003268:	e00a      	b.n	8003280 <HAL_RCC_ClockConfig+0x138>
        {
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800326a:	f7fe fb25 	bl	80018b8 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	f241 3288 	movw	r2, #5000	; 0x1388
 8003278:	4293      	cmp	r3, r2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_ClockConfig+0x138>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e06f      	b.n	8003360 <HAL_RCC_ClockConfig+0x218>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8003280:	4b3a      	ldr	r3, [pc, #232]	; (800336c <HAL_RCC_ClockConfig+0x224>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 030c 	and.w	r3, r3, #12
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1ee      	bne.n	800326a <HAL_RCC_ClockConfig+0x122>
 800328c:	e010      	b.n	80032b0 <HAL_RCC_ClockConfig+0x168>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
        {
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800328e:	f7fe fb13 	bl	80018b8 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	f241 3288 	movw	r2, #5000	; 0x1388
 800329c:	4293      	cmp	r3, r2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_ClockConfig+0x15c>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e05d      	b.n	8003360 <HAL_RCC_ClockConfig+0x218>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 80032a4:	4b31      	ldr	r3, [pc, #196]	; (800336c <HAL_RCC_ClockConfig+0x224>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 030c 	and.w	r3, r3, #12
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d1ee      	bne.n	800328e <HAL_RCC_ClockConfig+0x146>
      }
    }
  }
    
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032bc:	4b2b      	ldr	r3, [pc, #172]	; (800336c <HAL_RCC_ClockConfig+0x224>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	4928      	ldr	r1, [pc, #160]	; (800336c <HAL_RCC_ClockConfig+0x224>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80032ce:	4b26      	ldr	r3, [pc, #152]	; (8003368 <HAL_RCC_ClockConfig+0x220>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d210      	bcs.n	80032fe <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032dc:	4b22      	ldr	r3, [pc, #136]	; (8003368 <HAL_RCC_ClockConfig+0x220>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f023 0207 	bic.w	r2, r3, #7
 80032e4:	4920      	ldr	r1, [pc, #128]	; (8003368 <HAL_RCC_ClockConfig+0x220>)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032ec:	4b1e      	ldr	r3, [pc, #120]	; (8003368 <HAL_RCC_ClockConfig+0x220>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d001      	beq.n	80032fe <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e030      	b.n	8003360 <HAL_RCC_ClockConfig+0x218>
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	2b00      	cmp	r3, #0
 8003308:	d008      	beq.n	800331c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800330a:	4b18      	ldr	r3, [pc, #96]	; (800336c <HAL_RCC_ClockConfig+0x224>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	4915      	ldr	r1, [pc, #84]	; (800336c <HAL_RCC_ClockConfig+0x224>)
 8003318:	4313      	orrs	r3, r2
 800331a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b00      	cmp	r3, #0
 8003326:	d009      	beq.n	800333c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003328:	4b10      	ldr	r3, [pc, #64]	; (800336c <HAL_RCC_ClockConfig+0x224>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	490d      	ldr	r1, [pc, #52]	; (800336c <HAL_RCC_ClockConfig+0x224>)
 8003338:	4313      	orrs	r3, r2
 800333a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800333c:	f000 f81c 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8003340:	4601      	mov	r1, r0
 8003342:	4b0a      	ldr	r3, [pc, #40]	; (800336c <HAL_RCC_ClockConfig+0x224>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	091b      	lsrs	r3, r3, #4
 8003348:	f003 030f 	and.w	r3, r3, #15
 800334c:	4a08      	ldr	r2, [pc, #32]	; (8003370 <HAL_RCC_ClockConfig+0x228>)
 800334e:	5cd3      	ldrb	r3, [r2, r3]
 8003350:	fa21 f303 	lsr.w	r3, r1, r3
 8003354:	4a07      	ldr	r2, [pc, #28]	; (8003374 <HAL_RCC_ClockConfig+0x22c>)
 8003356:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003358:	2000      	movs	r0, #0
 800335a:	f7fe fa83 	bl	8001864 <HAL_InitTick>

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40022000 	.word	0x40022000
 800336c:	40021000 	.word	0x40021000
 8003370:	080061f0 	.word	0x080061f0
 8003374:	20000000 	.word	0x20000000

08003378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]
 8003382:	2300      	movs	r3, #0
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	2300      	movs	r3, #0
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	2302      	movs	r3, #2
 800338c:	607b      	str	r3, [r7, #4]
 800338e:	2302      	movs	r3, #2
 8003390:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8003396:	4b4c      	ldr	r3, [pc, #304]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x150>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00b      	beq.n	80033ba <HAL_RCC_GetSysClockFreq+0x42>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80033a2:	4b49      	ldr	r3, [pc, #292]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x150>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80033aa:	2b0c      	cmp	r3, #12
 80033ac:	d127      	bne.n	80033fe <HAL_RCC_GetSysClockFreq+0x86>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80033ae:	4b46      	ldr	r3, [pc, #280]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x150>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d121      	bne.n	80033fe <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 80033ba:	4b43      	ldr	r3, [pc, #268]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x150>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d107      	bne.n	80033d6 <HAL_RCC_GetSysClockFreq+0x5e>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033c6:	4b40      	ldr	r3, [pc, #256]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x150>)
 80033c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033cc:	0a1b      	lsrs	r3, r3, #8
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	e005      	b.n	80033e2 <HAL_RCC_GetSysClockFreq+0x6a>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033d6:	4b3c      	ldr	r3, [pc, #240]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x150>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	091b      	lsrs	r3, r3, #4
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033e2:	4a3a      	ldr	r2, [pc, #232]	; (80034cc <HAL_RCC_GetSysClockFreq+0x154>)
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ea:	617b      	str	r3, [r7, #20]

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80033ec:	4b36      	ldr	r3, [pc, #216]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x150>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 030c 	and.w	r3, r3, #12
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d113      	bne.n	8003420 <HAL_RCC_GetSysClockFreq+0xa8>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	60fb      	str	r3, [r7, #12]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80033fc:	e010      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0xa8>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80033fe:	4b32      	ldr	r3, [pc, #200]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x150>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	2b04      	cmp	r3, #4
 8003408:	d102      	bne.n	8003410 <HAL_RCC_GetSysClockFreq+0x98>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800340a:	4b31      	ldr	r3, [pc, #196]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x158>)
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	e007      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003410:	4b2d      	ldr	r3, [pc, #180]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x150>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 030c 	and.w	r3, r3, #12
 8003418:	2b08      	cmp	r3, #8
 800341a:	d101      	bne.n	8003420 <HAL_RCC_GetSysClockFreq+0xa8>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800341c:	4b2d      	ldr	r3, [pc, #180]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x15c>)
 800341e:	60fb      	str	r3, [r7, #12]
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003420:	4b29      	ldr	r3, [pc, #164]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x150>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 030c 	and.w	r3, r3, #12
 8003428:	2b0c      	cmp	r3, #12
 800342a:	d145      	bne.n	80034b8 <HAL_RCC_GetSysClockFreq+0x140>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800342c:	4b26      	ldr	r3, [pc, #152]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x150>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0303 	and.w	r3, r3, #3
 8003434:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003436:	4b24      	ldr	r3, [pc, #144]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x150>)
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	091b      	lsrs	r3, r3, #4
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	3301      	adds	r3, #1
 8003442:	603b      	str	r3, [r7, #0]

    switch (pllsource)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d002      	beq.n	8003450 <HAL_RCC_GetSysClockFreq+0xd8>
 800344a:	2b03      	cmp	r3, #3
 800344c:	d00d      	beq.n	800346a <HAL_RCC_GetSysClockFreq+0xf2>
 800344e:	e019      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x10c>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003450:	4a1f      	ldr	r2, [pc, #124]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	fbb2 f3f3 	udiv	r3, r2, r3
 8003458:	4a1b      	ldr	r2, [pc, #108]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x150>)
 800345a:	68d2      	ldr	r2, [r2, #12]
 800345c:	0a12      	lsrs	r2, r2, #8
 800345e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003462:	fb02 f303 	mul.w	r3, r2, r3
 8003466:	613b      	str	r3, [r7, #16]
      break;
 8003468:	e019      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x126>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800346a:	4a1a      	ldr	r2, [pc, #104]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x15c>)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003472:	4a15      	ldr	r2, [pc, #84]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x150>)
 8003474:	68d2      	ldr	r2, [r2, #12]
 8003476:	0a12      	lsrs	r2, r2, #8
 8003478:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800347c:	fb02 f303 	mul.w	r3, r2, r3
 8003480:	613b      	str	r3, [r7, #16]
      break;
 8003482:	e00c      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x126>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	fbb2 f3f3 	udiv	r3, r2, r3
 800348c:	4a0e      	ldr	r2, [pc, #56]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x150>)
 800348e:	68d2      	ldr	r2, [r2, #12]
 8003490:	0a12      	lsrs	r2, r2, #8
 8003492:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003496:	fb02 f303 	mul.w	r3, r2, r3
 800349a:	613b      	str	r3, [r7, #16]
      break;
 800349c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800349e:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x150>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	0e5b      	lsrs	r3, r3, #25
 80034a4:	f003 0303 	and.w	r3, r3, #3
 80034a8:	3301      	adds	r3, #1
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b6:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80034b8:	68fb      	ldr	r3, [r7, #12]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	371c      	adds	r7, #28
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	40021000 	.word	0x40021000
 80034cc:	08006208 	.word	0x08006208
 80034d0:	00f42400 	.word	0x00f42400
 80034d4:	007a1200 	.word	0x007a1200

080034d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034dc:	4b03      	ldr	r3, [pc, #12]	; (80034ec <HAL_RCC_GetHCLKFreq+0x14>)
 80034de:	681b      	ldr	r3, [r3, #0]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	20000000 	.word	0x20000000

080034f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034f4:	f7ff fff0 	bl	80034d8 <HAL_RCC_GetHCLKFreq>
 80034f8:	4601      	mov	r1, r0
 80034fa:	4b05      	ldr	r3, [pc, #20]	; (8003510 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	0a1b      	lsrs	r3, r3, #8
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	4a03      	ldr	r2, [pc, #12]	; (8003514 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003506:	5cd3      	ldrb	r3, [r2, r3]
 8003508:	fa21 f303 	lsr.w	r3, r1, r3
}
 800350c:	4618      	mov	r0, r3
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40021000 	.word	0x40021000
 8003514:	08006200 	.word	0x08006200

08003518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800351c:	f7ff ffdc 	bl	80034d8 <HAL_RCC_GetHCLKFreq>
 8003520:	4601      	mov	r1, r0
 8003522:	4b05      	ldr	r3, [pc, #20]	; (8003538 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	0adb      	lsrs	r3, r3, #11
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	4a03      	ldr	r2, [pc, #12]	; (800353c <HAL_RCC_GetPCLK2Freq+0x24>)
 800352e:	5cd3      	ldrb	r3, [r2, r3]
 8003530:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003534:	4618      	mov	r0, r3
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40021000 	.word	0x40021000
 800353c:	08006200 	.word	0x08006200

08003540 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800354c:	2300      	movs	r3, #0
 800354e:	613b      	str	r3, [r7, #16]
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003550:	4b2a      	ldr	r3, [pc, #168]	; (80035fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <RCC_SetFlashLatencyFromMSIRange+0x24>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800355c:	f7ff fa2e 	bl	80029bc <HAL_PWREx_GetVoltageRange>
 8003560:	6178      	str	r0, [r7, #20]
 8003562:	e014      	b.n	800358e <RCC_SetFlashLatencyFromMSIRange+0x4e>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003564:	4b25      	ldr	r3, [pc, #148]	; (80035fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003568:	4a24      	ldr	r2, [pc, #144]	; (80035fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800356a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800356e:	6593      	str	r3, [r2, #88]	; 0x58
 8003570:	4b22      	ldr	r3, [pc, #136]	; (80035fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800357c:	f7ff fa1e 	bl	80029bc <HAL_PWREx_GetVoltageRange>
 8003580:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003582:	4b1e      	ldr	r3, [pc, #120]	; (80035fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003586:	4a1d      	ldr	r2, [pc, #116]	; (80035fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003588:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800358c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003594:	d10b      	bne.n	80035ae <RCC_SetFlashLatencyFromMSIRange+0x6e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b80      	cmp	r3, #128	; 0x80
 800359a:	d919      	bls.n	80035d0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2ba0      	cmp	r3, #160	; 0xa0
 80035a0:	d902      	bls.n	80035a8 <RCC_SetFlashLatencyFromMSIRange+0x68>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035a2:	2302      	movs	r3, #2
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	e013      	b.n	80035d0 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035a8:	2301      	movs	r3, #1
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	e010      	b.n	80035d0 <RCC_SetFlashLatencyFromMSIRange+0x90>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b80      	cmp	r3, #128	; 0x80
 80035b2:	d902      	bls.n	80035ba <RCC_SetFlashLatencyFromMSIRange+0x7a>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035b4:	2303      	movs	r3, #3
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	e00a      	b.n	80035d0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b80      	cmp	r3, #128	; 0x80
 80035be:	d102      	bne.n	80035c6 <RCC_SetFlashLatencyFromMSIRange+0x86>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035c0:	2302      	movs	r3, #2
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	e004      	b.n	80035d0 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else if(msirange == RCC_MSIRANGE_7) 
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b70      	cmp	r3, #112	; 0x70
 80035ca:	d101      	bne.n	80035d0 <RCC_SetFlashLatencyFromMSIRange+0x90>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035cc:	2301      	movs	r3, #1
 80035ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f023 0207 	bic.w	r2, r3, #7
 80035d8:	4909      	ldr	r1, [pc, #36]	; (8003600 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80035e0:	4b07      	ldr	r3, [pc, #28]	; (8003600 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d001      	beq.n	80035f2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  }
  
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40021000 	.word	0x40021000
 8003600:	40022000 	.word	0x40022000

08003604 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003614:	2300      	movs	r3, #0
 8003616:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003618:	2300      	movs	r3, #0
 800361a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003624:	2b00      	cmp	r3, #0
 8003626:	d03f      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800362c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003630:	d01c      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003632:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003636:	d802      	bhi.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00e      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800363c:	e01f      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800363e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003642:	d003      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x48>
 8003644:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003648:	d01c      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x80>
 800364a:	e018      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800364c:	4b82      	ldr	r3, [pc, #520]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	4a81      	ldr	r2, [pc, #516]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003656:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003658:	e015      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x82>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3304      	adds	r3, #4
 800365e:	2100      	movs	r1, #0
 8003660:	4618      	mov	r0, r3
 8003662:	f000 fac3 	bl	8003bec <RCCEx_PLLSAI1_Config>
 8003666:	4603      	mov	r3, r0
 8003668:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800366a:	e00c      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x82>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3320      	adds	r3, #32
 8003670:	2100      	movs	r1, #0
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fbac 	bl	8003dd0 <RCCEx_PLLSAI2_Config>
 8003678:	4603      	mov	r3, r0
 800367a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800367c:	e003      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x82>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	74fb      	strb	r3, [r7, #19]
      break;
 8003682:	e000      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x82>
      break;
 8003684:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003686:	7cfb      	ldrb	r3, [r7, #19]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10b      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800368c:	4b72      	ldr	r3, [pc, #456]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800368e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003692:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800369a:	496f      	ldr	r1, [pc, #444]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036a2:	e001      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a4:	7cfb      	ldrb	r3, [r7, #19]
 80036a6:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d03f      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036bc:	d01c      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036c2:	d802      	bhi.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00e      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80036c8:	e01f      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036ce:	d003      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036d4:	d01c      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80036d6:	e018      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036d8:	4b5f      	ldr	r3, [pc, #380]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	4a5e      	ldr	r2, [pc, #376]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80036de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036e4:	e015      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3304      	adds	r3, #4
 80036ea:	2100      	movs	r1, #0
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fa7d 	bl	8003bec <RCCEx_PLLSAI1_Config>
 80036f2:	4603      	mov	r3, r0
 80036f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036f6:	e00c      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3320      	adds	r3, #32
 80036fc:	2100      	movs	r1, #0
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fb66 	bl	8003dd0 <RCCEx_PLLSAI2_Config>
 8003704:	4603      	mov	r3, r0
 8003706:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003708:	e003      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	74fb      	strb	r3, [r7, #19]
      break;
 800370e:	e000      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003710:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003712:	7cfb      	ldrb	r3, [r7, #19]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10b      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003718:	4b4f      	ldr	r3, [pc, #316]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800371a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003726:	494c      	ldr	r1, [pc, #304]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003728:	4313      	orrs	r3, r2
 800372a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800372e:	e001      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003730:	7cfb      	ldrb	r3, [r7, #19]
 8003732:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 809a 	beq.w	8003876 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003742:	2300      	movs	r3, #0
 8003744:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003746:	4b44      	ldr	r3, [pc, #272]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10d      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x16a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003752:	4b41      	ldr	r3, [pc, #260]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003756:	4a40      	ldr	r2, [pc, #256]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375c:	6593      	str	r3, [r2, #88]	; 0x58
 800375e:	4b3e      	ldr	r3, [pc, #248]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800376a:	2301      	movs	r3, #1
 800376c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800376e:	4b3b      	ldr	r3, [pc, #236]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a3a      	ldr	r2, [pc, #232]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003778:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800377a:	f7fe f89d 	bl	80018b8 <HAL_GetTick>
 800377e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003780:	e009      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x192>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003782:	f7fe f899 	bl	80018b8 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d902      	bls.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x192>
      {
        ret = HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	74fb      	strb	r3, [r7, #19]
        break;
 8003794:	e005      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003796:	4b31      	ldr	r3, [pc, #196]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0ef      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x17e>
      }
    }

    if(ret == HAL_OK)
 80037a2:	7cfb      	ldrb	r3, [r7, #19]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d15b      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037a8:	4b2b      	ldr	r3, [pc, #172]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80037aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d01f      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d019      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037c6:	4b24      	ldr	r3, [pc, #144]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80037c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037d2:	4b21      	ldr	r3, [pc, #132]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80037d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d8:	4a1f      	ldr	r2, [pc, #124]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80037da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037e2:	4b1d      	ldr	r3, [pc, #116]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80037e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e8:	4a1b      	ldr	r2, [pc, #108]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80037ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037f2:	4a19      	ldr	r2, [pc, #100]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b00      	cmp	r3, #0
 8003802:	d016      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x22e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003804:	f7fe f858 	bl	80018b8 <HAL_GetTick>
 8003808:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800380a:	e00b      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x220>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800380c:	f7fe f854 	bl	80018b8 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f241 3288 	movw	r2, #5000	; 0x1388
 800381a:	4293      	cmp	r3, r2
 800381c:	d902      	bls.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x220>
          {
            ret = HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	74fb      	strb	r3, [r7, #19]
            break;
 8003822:	e006      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x22e>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8003824:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0ec      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x208>
          }
        }
      }

      if(ret == HAL_OK)
 8003832:	7cfb      	ldrb	r3, [r7, #19]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10c      	bne.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x24e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003838:	4b07      	ldr	r3, [pc, #28]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800383a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003848:	4903      	ldr	r1, [pc, #12]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003850:	e008      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x260>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003852:	7cfb      	ldrb	r3, [r7, #19]
 8003854:	74bb      	strb	r3, [r7, #18]
 8003856:	e005      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8003858:	40021000 	.word	0x40021000
 800385c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003860:	7cfb      	ldrb	r3, [r7, #19]
 8003862:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003864:	7c7b      	ldrb	r3, [r7, #17]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d105      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800386a:	4b9e      	ldr	r3, [pc, #632]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800386c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386e:	4a9d      	ldr	r2, [pc, #628]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003874:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003882:	4b98      	ldr	r3, [pc, #608]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003888:	f023 0203 	bic.w	r2, r3, #3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003890:	4994      	ldr	r1, [pc, #592]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038a4:	4b8f      	ldr	r3, [pc, #572]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80038a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038aa:	f023 020c 	bic.w	r2, r3, #12
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b2:	498c      	ldr	r1, [pc, #560]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0304 	and.w	r3, r3, #4
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038c6:	4b87      	ldr	r3, [pc, #540]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80038c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	4983      	ldr	r1, [pc, #524]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038e8:	4b7e      	ldr	r3, [pc, #504]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	497b      	ldr	r1, [pc, #492]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0310 	and.w	r3, r3, #16
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800390a:	4b76      	ldr	r3, [pc, #472]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800390c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003910:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003918:	4972      	ldr	r1, [pc, #456]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800392c:	4b6d      	ldr	r3, [pc, #436]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800392e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003932:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393a:	496a      	ldr	r1, [pc, #424]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800393c:	4313      	orrs	r3, r2
 800393e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00a      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800394e:	4b65      	ldr	r3, [pc, #404]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003954:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395c:	4961      	ldr	r1, [pc, #388]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00a      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003970:	4b5c      	ldr	r3, [pc, #368]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003976:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800397e:	4959      	ldr	r1, [pc, #356]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003980:	4313      	orrs	r3, r2
 8003982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003992:	4b54      	ldr	r3, [pc, #336]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003998:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a0:	4950      	ldr	r1, [pc, #320]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039b4:	4b4b      	ldr	r3, [pc, #300]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80039b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c2:	4948      	ldr	r1, [pc, #288]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039d6:	4b43      	ldr	r3, [pc, #268]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80039d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e4:	493f      	ldr	r1, [pc, #252]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d028      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039f8:	4b3a      	ldr	r3, [pc, #232]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80039fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a06:	4937      	ldr	r1, [pc, #220]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a16:	d106      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x422>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a18:	4b32      	ldr	r3, [pc, #200]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	4a31      	ldr	r2, [pc, #196]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003a1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a22:	60d3      	str	r3, [r2, #12]
 8003a24:	e011      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x446>
    }
    else
    {
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a2e:	d10c      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x446>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3304      	adds	r3, #4
 8003a34:	2101      	movs	r1, #1
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 f8d8 	bl	8003bec <RCCEx_PLLSAI1_Config>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a40:	7cfb      	ldrb	r3, [r7, #19]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x446>
        {
          /* set overall return value */
          status = ret;
 8003a46:	7cfb      	ldrb	r3, [r7, #19]
 8003a48:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d028      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a56:	4b23      	ldr	r3, [pc, #140]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a64:	491f      	ldr	r1, [pc, #124]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a74:	d106      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a76:	4b1b      	ldr	r3, [pc, #108]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	4a1a      	ldr	r2, [pc, #104]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003a7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a80:	60d3      	str	r3, [r2, #12]
 8003a82:	e011      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a8c:	d10c      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3304      	adds	r3, #4
 8003a92:	2101      	movs	r1, #1
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 f8a9 	bl	8003bec <RCCEx_PLLSAI1_Config>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a9e:	7cfb      	ldrb	r3, [r7, #19]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* set overall return value */
        status = ret;
 8003aa4:	7cfb      	ldrb	r3, [r7, #19]
 8003aa6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d02b      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac2:	4908      	ldr	r1, [pc, #32]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ace:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ad2:	d109      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ad4:	4b03      	ldr	r3, [pc, #12]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	4a02      	ldr	r2, [pc, #8]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ade:	60d3      	str	r3, [r2, #12]
 8003ae0:	e014      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003ae2:	bf00      	nop
 8003ae4:	40021000 	.word	0x40021000
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003af0:	d10c      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	3304      	adds	r3, #4
 8003af6:	2101      	movs	r1, #1
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 f877 	bl	8003bec <RCCEx_PLLSAI1_Config>
 8003afe:	4603      	mov	r3, r0
 8003b00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b02:	7cfb      	ldrb	r3, [r7, #19]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x508>
      {
        /* set overall return value */
        status = ret;
 8003b08:	7cfb      	ldrb	r3, [r7, #19]
 8003b0a:	74bb      	strb	r3, [r7, #18]
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d02f      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x574>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b18:	4b2b      	ldr	r3, [pc, #172]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b26:	4928      	ldr	r1, [pc, #160]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b36:	d10d      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	2102      	movs	r1, #2
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 f854 	bl	8003bec <RCCEx_PLLSAI1_Config>
 8003b44:	4603      	mov	r3, r0
 8003b46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b48:	7cfb      	ldrb	r3, [r7, #19]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d014      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x574>
      {
        /* set overall return value */
        status = ret;
 8003b4e:	7cfb      	ldrb	r3, [r7, #19]
 8003b50:	74bb      	strb	r3, [r7, #18]
 8003b52:	e011      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x574>
      }
    }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b5c:	d10c      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	3320      	adds	r3, #32
 8003b62:	2102      	movs	r1, #2
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 f933 	bl	8003dd0 <RCCEx_PLLSAI2_Config>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b6e:	7cfb      	ldrb	r3, [r7, #19]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x574>
      {
        /* set overall return value */
        status = ret;
 8003b74:	7cfb      	ldrb	r3, [r7, #19]
 8003b76:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x596>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b84:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b92:	490d      	ldr	r1, [pc, #52]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00b      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ba6:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bb6:	4904      	ldr	r1, [pc, #16]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bbe:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40021000 	.word	0x40021000

08003bcc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003bd0:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a04      	ldr	r2, [pc, #16]	; (8003be8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003bd6:	f043 0304 	orr.w	r3, r3, #4
 8003bda:	6013      	str	r3, [r2, #0]
}
 8003bdc:	bf00      	nop
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40021000 	.word	0x40021000

08003bec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bfe:	4b73      	ldr	r3, [pc, #460]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d018      	beq.n	8003c3c <RCCEx_PLLSAI1_Config+0x50>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c0a:	4b70      	ldr	r3, [pc, #448]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f003 0203 	and.w	r2, r3, #3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d10d      	bne.n	8003c36 <RCCEx_PLLSAI1_Config+0x4a>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
       ||
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d009      	beq.n	8003c36 <RCCEx_PLLSAI1_Config+0x4a>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c22:	4b6a      	ldr	r3, [pc, #424]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	091b      	lsrs	r3, r3, #4
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
       ||
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d044      	beq.n	8003cc0 <RCCEx_PLLSAI1_Config+0xd4>
#endif
      )
    {
      status = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	73fb      	strb	r3, [r7, #15]
 8003c3a:	e041      	b.n	8003cc0 <RCCEx_PLLSAI1_Config+0xd4>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d00c      	beq.n	8003c5e <RCCEx_PLLSAI1_Config+0x72>
 8003c44:	2b03      	cmp	r3, #3
 8003c46:	d013      	beq.n	8003c70 <RCCEx_PLLSAI1_Config+0x84>
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d120      	bne.n	8003c8e <RCCEx_PLLSAI1_Config+0xa2>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c4c:	4b5f      	ldr	r3, [pc, #380]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d11d      	bne.n	8003c94 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c5c:	e01a      	b.n	8003c94 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c5e:	4b5b      	ldr	r3, [pc, #364]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d116      	bne.n	8003c98 <RCCEx_PLLSAI1_Config+0xac>
      {
        status = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c6e:	e013      	b.n	8003c98 <RCCEx_PLLSAI1_Config+0xac>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c70:	4b56      	ldr	r3, [pc, #344]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10f      	bne.n	8003c9c <RCCEx_PLLSAI1_Config+0xb0>
 8003c7c:	4b53      	ldr	r3, [pc, #332]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d109      	bne.n	8003c9c <RCCEx_PLLSAI1_Config+0xb0>
      {
        status = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c8c:	e006      	b.n	8003c9c <RCCEx_PLLSAI1_Config+0xb0>
    default:
      status = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	73fb      	strb	r3, [r7, #15]
      break;
 8003c92:	e004      	b.n	8003c9e <RCCEx_PLLSAI1_Config+0xb2>
      break;
 8003c94:	bf00      	nop
 8003c96:	e002      	b.n	8003c9e <RCCEx_PLLSAI1_Config+0xb2>
      break;
 8003c98:	bf00      	nop
 8003c9a:	e000      	b.n	8003c9e <RCCEx_PLLSAI1_Config+0xb2>
      break;
 8003c9c:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10d      	bne.n	8003cc0 <RCCEx_PLLSAI1_Config+0xd4>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ca4:	4b49      	ldr	r3, [pc, #292]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6819      	ldr	r1, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	4944      	ldr	r1, [pc, #272]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d17d      	bne.n	8003dc2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003cc6:	4b41      	ldr	r3, [pc, #260]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a40      	ldr	r2, [pc, #256]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ccc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd2:	f7fd fdf1 	bl	80018b8 <HAL_GetTick>
 8003cd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8003cd8:	e009      	b.n	8003cee <RCCEx_PLLSAI1_Config+0x102>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cda:	f7fd fded 	bl	80018b8 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d902      	bls.n	8003cee <RCCEx_PLLSAI1_Config+0x102>
      {
        status = HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	73fb      	strb	r3, [r7, #15]
        break;
 8003cec:	e005      	b.n	8003cfa <RCCEx_PLLSAI1_Config+0x10e>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8003cee:	4b37      	ldr	r3, [pc, #220]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1ef      	bne.n	8003cda <RCCEx_PLLSAI1_Config+0xee>
      }
    }

    if(status == HAL_OK)
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d160      	bne.n	8003dc2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d111      	bne.n	8003d2a <RCCEx_PLLSAI1_Config+0x13e>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d06:	4b31      	ldr	r3, [pc, #196]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6892      	ldr	r2, [r2, #8]
 8003d16:	0211      	lsls	r1, r2, #8
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	68d2      	ldr	r2, [r2, #12]
 8003d1c:	0912      	lsrs	r2, r2, #4
 8003d1e:	0452      	lsls	r2, r2, #17
 8003d20:	430a      	orrs	r2, r1
 8003d22:	492a      	ldr	r1, [pc, #168]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	610b      	str	r3, [r1, #16]
 8003d28:	e027      	b.n	8003d7a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d112      	bne.n	8003d56 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d30:	4b26      	ldr	r3, [pc, #152]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6892      	ldr	r2, [r2, #8]
 8003d40:	0211      	lsls	r1, r2, #8
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6912      	ldr	r2, [r2, #16]
 8003d46:	0852      	lsrs	r2, r2, #1
 8003d48:	3a01      	subs	r2, #1
 8003d4a:	0552      	lsls	r2, r2, #21
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	491f      	ldr	r1, [pc, #124]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	610b      	str	r3, [r1, #16]
 8003d54:	e011      	b.n	8003d7a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d56:	4b1d      	ldr	r3, [pc, #116]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6892      	ldr	r2, [r2, #8]
 8003d66:	0211      	lsls	r1, r2, #8
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6952      	ldr	r2, [r2, #20]
 8003d6c:	0852      	lsrs	r2, r2, #1
 8003d6e:	3a01      	subs	r2, #1
 8003d70:	0652      	lsls	r2, r2, #25
 8003d72:	430a      	orrs	r2, r1
 8003d74:	4915      	ldr	r1, [pc, #84]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d7a:	4b14      	ldr	r3, [pc, #80]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a13      	ldr	r2, [pc, #76]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d84:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d86:	f7fd fd97 	bl	80018b8 <HAL_GetTick>
 8003d8a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8003d8c:	e009      	b.n	8003da2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d8e:	f7fd fd93 	bl	80018b8 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d902      	bls.n	8003da2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	73fb      	strb	r3, [r7, #15]
          break;
 8003da0:	e005      	b.n	8003dae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8003da2:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0ef      	beq.n	8003d8e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d106      	bne.n	8003dc2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003db4:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	4903      	ldr	r1, [pc, #12]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40021000 	.word	0x40021000

08003dd0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003de2:	4b68      	ldr	r3, [pc, #416]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d018      	beq.n	8003e20 <RCCEx_PLLSAI2_Config+0x50>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003dee:	4b65      	ldr	r3, [pc, #404]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f003 0203 	and.w	r2, r3, #3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d10d      	bne.n	8003e1a <RCCEx_PLLSAI2_Config+0x4a>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
       ||
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d009      	beq.n	8003e1a <RCCEx_PLLSAI2_Config+0x4a>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e06:	4b5f      	ldr	r3, [pc, #380]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	091b      	lsrs	r3, r3, #4
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
       ||
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d044      	beq.n	8003ea4 <RCCEx_PLLSAI2_Config+0xd4>
#endif
      )
    {
      status = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	73fb      	strb	r3, [r7, #15]
 8003e1e:	e041      	b.n	8003ea4 <RCCEx_PLLSAI2_Config+0xd4>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d00c      	beq.n	8003e42 <RCCEx_PLLSAI2_Config+0x72>
 8003e28:	2b03      	cmp	r3, #3
 8003e2a:	d013      	beq.n	8003e54 <RCCEx_PLLSAI2_Config+0x84>
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d120      	bne.n	8003e72 <RCCEx_PLLSAI2_Config+0xa2>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e30:	4b54      	ldr	r3, [pc, #336]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d11d      	bne.n	8003e78 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e40:	e01a      	b.n	8003e78 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e42:	4b50      	ldr	r3, [pc, #320]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d116      	bne.n	8003e7c <RCCEx_PLLSAI2_Config+0xac>
      {
        status = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e52:	e013      	b.n	8003e7c <RCCEx_PLLSAI2_Config+0xac>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e54:	4b4b      	ldr	r3, [pc, #300]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10f      	bne.n	8003e80 <RCCEx_PLLSAI2_Config+0xb0>
 8003e60:	4b48      	ldr	r3, [pc, #288]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d109      	bne.n	8003e80 <RCCEx_PLLSAI2_Config+0xb0>
      {
        status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e70:	e006      	b.n	8003e80 <RCCEx_PLLSAI2_Config+0xb0>
    default:
      status = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	73fb      	strb	r3, [r7, #15]
      break;
 8003e76:	e004      	b.n	8003e82 <RCCEx_PLLSAI2_Config+0xb2>
      break;
 8003e78:	bf00      	nop
 8003e7a:	e002      	b.n	8003e82 <RCCEx_PLLSAI2_Config+0xb2>
      break;
 8003e7c:	bf00      	nop
 8003e7e:	e000      	b.n	8003e82 <RCCEx_PLLSAI2_Config+0xb2>
      break;
 8003e80:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10d      	bne.n	8003ea4 <RCCEx_PLLSAI2_Config+0xd4>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e88:	4b3e      	ldr	r3, [pc, #248]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6819      	ldr	r1, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	430b      	orrs	r3, r1
 8003e9e:	4939      	ldr	r1, [pc, #228]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d167      	bne.n	8003f7a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003eaa:	4b36      	ldr	r3, [pc, #216]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a35      	ldr	r2, [pc, #212]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb6:	f7fd fcff 	bl	80018b8 <HAL_GetTick>
 8003eba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 8003ebc:	e009      	b.n	8003ed2 <RCCEx_PLLSAI2_Config+0x102>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ebe:	f7fd fcfb 	bl	80018b8 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d902      	bls.n	8003ed2 <RCCEx_PLLSAI2_Config+0x102>
      {
        status = HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	73fb      	strb	r3, [r7, #15]
        break;
 8003ed0:	e005      	b.n	8003ede <RCCEx_PLLSAI2_Config+0x10e>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 8003ed2:	4b2c      	ldr	r3, [pc, #176]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1ef      	bne.n	8003ebe <RCCEx_PLLSAI2_Config+0xee>
      }
    }

    if(status == HAL_OK)
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d14a      	bne.n	8003f7a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d111      	bne.n	8003f0e <RCCEx_PLLSAI2_Config+0x13e>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003eea:	4b26      	ldr	r3, [pc, #152]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6892      	ldr	r2, [r2, #8]
 8003efa:	0211      	lsls	r1, r2, #8
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	68d2      	ldr	r2, [r2, #12]
 8003f00:	0912      	lsrs	r2, r2, #4
 8003f02:	0452      	lsls	r2, r2, #17
 8003f04:	430a      	orrs	r2, r1
 8003f06:	491f      	ldr	r1, [pc, #124]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	614b      	str	r3, [r1, #20]
 8003f0c:	e011      	b.n	8003f32 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f0e:	4b1d      	ldr	r3, [pc, #116]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f16:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6892      	ldr	r2, [r2, #8]
 8003f1e:	0211      	lsls	r1, r2, #8
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6912      	ldr	r2, [r2, #16]
 8003f24:	0852      	lsrs	r2, r2, #1
 8003f26:	3a01      	subs	r2, #1
 8003f28:	0652      	lsls	r2, r2, #25
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	4915      	ldr	r1, [pc, #84]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f32:	4b14      	ldr	r3, [pc, #80]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a13      	ldr	r2, [pc, #76]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f3c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3e:	f7fd fcbb 	bl	80018b8 <HAL_GetTick>
 8003f42:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8003f44:	e009      	b.n	8003f5a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f46:	f7fd fcb7 	bl	80018b8 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d902      	bls.n	8003f5a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	73fb      	strb	r3, [r7, #15]
          break;
 8003f58:	e005      	b.n	8003f66 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8003f5a:	4b0a      	ldr	r3, [pc, #40]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0ef      	beq.n	8003f46 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d106      	bne.n	8003f7a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f6c:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f6e:	695a      	ldr	r2, [r3, #20]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	4903      	ldr	r1, [pc, #12]	; (8003f84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40021000 	.word	0x40021000

08003f88 <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e043      	b.n	8004022 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f001 f8f6 	bl	80051a0 <HAL_UART_MspInit>
  }
  
  huart->gState = HAL_UART_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2224      	movs	r2, #36	; 0x24
 8003fb8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  
  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0201 	bic.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]
  
  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f8b9 	bl	8004144 <UART_SetConfig>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e022      	b.n	8004022 <HAL_UART_Init+0x9a>
  }
  
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 fbf9 	bl	80047dc <UART_AdvFeatureConfig>
  }
  
  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ff8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004008:	609a      	str	r2, [r3, #8]
  
  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f042 0201 	orr.w	r2, r2, #1
 8004018:	601a      	str	r2, [r3, #0]
  
  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 fc80 	bl	8004920 <UART_CheckIdleState>
 8004020:	4603      	mov	r3, r0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b088      	sub	sp, #32
 800402e:	af02      	add	r7, sp, #8
 8004030:	60f8      	str	r0, [r7, #12]
 8004032:	60b9      	str	r1, [r7, #8]
 8004034:	603b      	str	r3, [r7, #0]
 8004036:	4613      	mov	r3, r2
 8004038:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800403a:	2300      	movs	r3, #0
 800403c:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b20      	cmp	r3, #32
 8004048:	d177      	bne.n	800413a <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <HAL_UART_Transmit+0x2c>
 8004050:	88fb      	ldrh	r3, [r7, #6]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e070      	b.n	800413c <HAL_UART_Transmit+0x112>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_UART_Transmit+0x3e>
 8004064:	2302      	movs	r3, #2
 8004066:	e069      	b.n	800413c <HAL_UART_Transmit+0x112>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	675a      	str	r2, [r3, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2221      	movs	r2, #33	; 0x21
 800407a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    
    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800407e:	f7fd fc1b 	bl	80018b8 <HAL_GetTick>
 8004082:	6178      	str	r0, [r7, #20]
    
    huart->TxXferSize  = Size;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	88fa      	ldrh	r2, [r7, #6]
 8004088:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	88fa      	ldrh	r2, [r7, #6]
 8004090:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    
    while(huart->TxXferCount > 0U)
 8004094:	e034      	b.n	8004100 <HAL_UART_Transmit+0xd6>
    {
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2200      	movs	r2, #0
 800409e:	2180      	movs	r1, #128	; 0x80
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 fc86 	bl	80049b2 <UART_WaitOnFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <HAL_UART_Transmit+0x86>
      {
        return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e045      	b.n	800413c <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b8:	d111      	bne.n	80040de <HAL_UART_Transmit+0xb4>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10d      	bne.n	80040de <HAL_UART_Transmit+0xb4>
      {
        tmp = (uint16_t*) pData;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	881a      	ldrh	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040d2:	b292      	uxth	r2, r2
 80040d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	3302      	adds	r3, #2
 80040da:	60bb      	str	r3, [r7, #8]
 80040dc:	e007      	b.n	80040ee <HAL_UART_Transmit+0xc4>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	60ba      	str	r2, [r7, #8]
 80040e4:	781a      	ldrb	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	b292      	uxth	r2, r2
 80040ec:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      huart->TxXferCount--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1c4      	bne.n	8004096 <HAL_UART_Transmit+0x6c>
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2200      	movs	r2, #0
 8004114:	2140      	movs	r1, #64	; 0x40
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 fc4b 	bl	80049b2 <UART_WaitOnFlagUntilTimeout>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e00a      	b.n	800413c <HAL_UART_Transmit+0x112>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2220      	movs	r2, #32
 800412a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    
    return HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	e000      	b.n	800413c <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 800413a:	2302      	movs	r3, #2
  }
}
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004144:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004148:	b088      	sub	sp, #32
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 800414e:	2300      	movs	r3, #0
 8004150:	61fb      	str	r3, [r7, #28]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004152:	2310      	movs	r3, #16
 8004154:	76fb      	strb	r3, [r7, #27]
  uint16_t brrtemp                    = 0x0000U;
 8004156:	2300      	movs	r3, #0
 8004158:	817b      	strh	r3, [r7, #10]
  uint32_t usartdiv                   = 0x00000000U;
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004162:	2300      	movs	r3, #0
 8004164:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	4313      	orrs	r3, r2
 800417c:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	4bab      	ldr	r3, [pc, #684]	; (8004434 <UART_SetConfig+0x2f0>)
 8004186:	4013      	ands	r3, r2
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	69f9      	ldr	r1, [r7, #28]
 800418e:	430b      	orrs	r3, r1
 8004190:	6013      	str	r3, [r2, #0]
  
  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART)
  * - set TXFTCFG bit according to huart->Init.TxFifoThreshold value
  * - set RXFTCFG bit according to huart->Init.RxFifoThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	61fb      	str	r3, [r7, #28]
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4aa1      	ldr	r2, [pc, #644]	; (8004438 <UART_SetConfig+0x2f4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d004      	beq.n	80041c2 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	69fa      	ldr	r2, [r7, #28]
 80041be:	4313      	orrs	r3, r2
 80041c0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	69fa      	ldr	r2, [r7, #28]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a98      	ldr	r2, [pc, #608]	; (800443c <UART_SetConfig+0x2f8>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d121      	bne.n	8004224 <UART_SetConfig+0xe0>
 80041e0:	4b97      	ldr	r3, [pc, #604]	; (8004440 <UART_SetConfig+0x2fc>)
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	2b03      	cmp	r3, #3
 80041ec:	d816      	bhi.n	800421c <UART_SetConfig+0xd8>
 80041ee:	a201      	add	r2, pc, #4	; (adr r2, 80041f4 <UART_SetConfig+0xb0>)
 80041f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f4:	08004205 	.word	0x08004205
 80041f8:	08004211 	.word	0x08004211
 80041fc:	0800420b 	.word	0x0800420b
 8004200:	08004217 	.word	0x08004217
 8004204:	2301      	movs	r3, #1
 8004206:	76fb      	strb	r3, [r7, #27]
 8004208:	e0e6      	b.n	80043d8 <UART_SetConfig+0x294>
 800420a:	2302      	movs	r3, #2
 800420c:	76fb      	strb	r3, [r7, #27]
 800420e:	e0e3      	b.n	80043d8 <UART_SetConfig+0x294>
 8004210:	2304      	movs	r3, #4
 8004212:	76fb      	strb	r3, [r7, #27]
 8004214:	e0e0      	b.n	80043d8 <UART_SetConfig+0x294>
 8004216:	2308      	movs	r3, #8
 8004218:	76fb      	strb	r3, [r7, #27]
 800421a:	e0dd      	b.n	80043d8 <UART_SetConfig+0x294>
 800421c:	2310      	movs	r3, #16
 800421e:	76fb      	strb	r3, [r7, #27]
 8004220:	bf00      	nop
 8004222:	e0d9      	b.n	80043d8 <UART_SetConfig+0x294>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a86      	ldr	r2, [pc, #536]	; (8004444 <UART_SetConfig+0x300>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d134      	bne.n	8004298 <UART_SetConfig+0x154>
 800422e:	4b84      	ldr	r3, [pc, #528]	; (8004440 <UART_SetConfig+0x2fc>)
 8004230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004234:	f003 030c 	and.w	r3, r3, #12
 8004238:	2b0c      	cmp	r3, #12
 800423a:	d829      	bhi.n	8004290 <UART_SetConfig+0x14c>
 800423c:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <UART_SetConfig+0x100>)
 800423e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004242:	bf00      	nop
 8004244:	08004279 	.word	0x08004279
 8004248:	08004291 	.word	0x08004291
 800424c:	08004291 	.word	0x08004291
 8004250:	08004291 	.word	0x08004291
 8004254:	08004285 	.word	0x08004285
 8004258:	08004291 	.word	0x08004291
 800425c:	08004291 	.word	0x08004291
 8004260:	08004291 	.word	0x08004291
 8004264:	0800427f 	.word	0x0800427f
 8004268:	08004291 	.word	0x08004291
 800426c:	08004291 	.word	0x08004291
 8004270:	08004291 	.word	0x08004291
 8004274:	0800428b 	.word	0x0800428b
 8004278:	2300      	movs	r3, #0
 800427a:	76fb      	strb	r3, [r7, #27]
 800427c:	e0ac      	b.n	80043d8 <UART_SetConfig+0x294>
 800427e:	2302      	movs	r3, #2
 8004280:	76fb      	strb	r3, [r7, #27]
 8004282:	e0a9      	b.n	80043d8 <UART_SetConfig+0x294>
 8004284:	2304      	movs	r3, #4
 8004286:	76fb      	strb	r3, [r7, #27]
 8004288:	e0a6      	b.n	80043d8 <UART_SetConfig+0x294>
 800428a:	2308      	movs	r3, #8
 800428c:	76fb      	strb	r3, [r7, #27]
 800428e:	e0a3      	b.n	80043d8 <UART_SetConfig+0x294>
 8004290:	2310      	movs	r3, #16
 8004292:	76fb      	strb	r3, [r7, #27]
 8004294:	bf00      	nop
 8004296:	e09f      	b.n	80043d8 <UART_SetConfig+0x294>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a6a      	ldr	r2, [pc, #424]	; (8004448 <UART_SetConfig+0x304>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d120      	bne.n	80042e4 <UART_SetConfig+0x1a0>
 80042a2:	4b67      	ldr	r3, [pc, #412]	; (8004440 <UART_SetConfig+0x2fc>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042ac:	2b10      	cmp	r3, #16
 80042ae:	d00f      	beq.n	80042d0 <UART_SetConfig+0x18c>
 80042b0:	2b10      	cmp	r3, #16
 80042b2:	d802      	bhi.n	80042ba <UART_SetConfig+0x176>
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <UART_SetConfig+0x180>
 80042b8:	e010      	b.n	80042dc <UART_SetConfig+0x198>
 80042ba:	2b20      	cmp	r3, #32
 80042bc:	d005      	beq.n	80042ca <UART_SetConfig+0x186>
 80042be:	2b30      	cmp	r3, #48	; 0x30
 80042c0:	d009      	beq.n	80042d6 <UART_SetConfig+0x192>
 80042c2:	e00b      	b.n	80042dc <UART_SetConfig+0x198>
 80042c4:	2300      	movs	r3, #0
 80042c6:	76fb      	strb	r3, [r7, #27]
 80042c8:	e086      	b.n	80043d8 <UART_SetConfig+0x294>
 80042ca:	2302      	movs	r3, #2
 80042cc:	76fb      	strb	r3, [r7, #27]
 80042ce:	e083      	b.n	80043d8 <UART_SetConfig+0x294>
 80042d0:	2304      	movs	r3, #4
 80042d2:	76fb      	strb	r3, [r7, #27]
 80042d4:	e080      	b.n	80043d8 <UART_SetConfig+0x294>
 80042d6:	2308      	movs	r3, #8
 80042d8:	76fb      	strb	r3, [r7, #27]
 80042da:	e07d      	b.n	80043d8 <UART_SetConfig+0x294>
 80042dc:	2310      	movs	r3, #16
 80042de:	76fb      	strb	r3, [r7, #27]
 80042e0:	bf00      	nop
 80042e2:	e079      	b.n	80043d8 <UART_SetConfig+0x294>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a58      	ldr	r2, [pc, #352]	; (800444c <UART_SetConfig+0x308>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d120      	bne.n	8004330 <UART_SetConfig+0x1ec>
 80042ee:	4b54      	ldr	r3, [pc, #336]	; (8004440 <UART_SetConfig+0x2fc>)
 80042f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80042f8:	2b40      	cmp	r3, #64	; 0x40
 80042fa:	d00f      	beq.n	800431c <UART_SetConfig+0x1d8>
 80042fc:	2b40      	cmp	r3, #64	; 0x40
 80042fe:	d802      	bhi.n	8004306 <UART_SetConfig+0x1c2>
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <UART_SetConfig+0x1cc>
 8004304:	e010      	b.n	8004328 <UART_SetConfig+0x1e4>
 8004306:	2b80      	cmp	r3, #128	; 0x80
 8004308:	d005      	beq.n	8004316 <UART_SetConfig+0x1d2>
 800430a:	2bc0      	cmp	r3, #192	; 0xc0
 800430c:	d009      	beq.n	8004322 <UART_SetConfig+0x1de>
 800430e:	e00b      	b.n	8004328 <UART_SetConfig+0x1e4>
 8004310:	2300      	movs	r3, #0
 8004312:	76fb      	strb	r3, [r7, #27]
 8004314:	e060      	b.n	80043d8 <UART_SetConfig+0x294>
 8004316:	2302      	movs	r3, #2
 8004318:	76fb      	strb	r3, [r7, #27]
 800431a:	e05d      	b.n	80043d8 <UART_SetConfig+0x294>
 800431c:	2304      	movs	r3, #4
 800431e:	76fb      	strb	r3, [r7, #27]
 8004320:	e05a      	b.n	80043d8 <UART_SetConfig+0x294>
 8004322:	2308      	movs	r3, #8
 8004324:	76fb      	strb	r3, [r7, #27]
 8004326:	e057      	b.n	80043d8 <UART_SetConfig+0x294>
 8004328:	2310      	movs	r3, #16
 800432a:	76fb      	strb	r3, [r7, #27]
 800432c:	bf00      	nop
 800432e:	e053      	b.n	80043d8 <UART_SetConfig+0x294>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a46      	ldr	r2, [pc, #280]	; (8004450 <UART_SetConfig+0x30c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d124      	bne.n	8004384 <UART_SetConfig+0x240>
 800433a:	4b41      	ldr	r3, [pc, #260]	; (8004440 <UART_SetConfig+0x2fc>)
 800433c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004340:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004348:	d012      	beq.n	8004370 <UART_SetConfig+0x22c>
 800434a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800434e:	d802      	bhi.n	8004356 <UART_SetConfig+0x212>
 8004350:	2b00      	cmp	r3, #0
 8004352:	d007      	beq.n	8004364 <UART_SetConfig+0x220>
 8004354:	e012      	b.n	800437c <UART_SetConfig+0x238>
 8004356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800435a:	d006      	beq.n	800436a <UART_SetConfig+0x226>
 800435c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004360:	d009      	beq.n	8004376 <UART_SetConfig+0x232>
 8004362:	e00b      	b.n	800437c <UART_SetConfig+0x238>
 8004364:	2300      	movs	r3, #0
 8004366:	76fb      	strb	r3, [r7, #27]
 8004368:	e036      	b.n	80043d8 <UART_SetConfig+0x294>
 800436a:	2302      	movs	r3, #2
 800436c:	76fb      	strb	r3, [r7, #27]
 800436e:	e033      	b.n	80043d8 <UART_SetConfig+0x294>
 8004370:	2304      	movs	r3, #4
 8004372:	76fb      	strb	r3, [r7, #27]
 8004374:	e030      	b.n	80043d8 <UART_SetConfig+0x294>
 8004376:	2308      	movs	r3, #8
 8004378:	76fb      	strb	r3, [r7, #27]
 800437a:	e02d      	b.n	80043d8 <UART_SetConfig+0x294>
 800437c:	2310      	movs	r3, #16
 800437e:	76fb      	strb	r3, [r7, #27]
 8004380:	bf00      	nop
 8004382:	e029      	b.n	80043d8 <UART_SetConfig+0x294>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a2b      	ldr	r2, [pc, #172]	; (8004438 <UART_SetConfig+0x2f4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d123      	bne.n	80043d6 <UART_SetConfig+0x292>
 800438e:	4b2c      	ldr	r3, [pc, #176]	; (8004440 <UART_SetConfig+0x2fc>)
 8004390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004394:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800439c:	d012      	beq.n	80043c4 <UART_SetConfig+0x280>
 800439e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a2:	d802      	bhi.n	80043aa <UART_SetConfig+0x266>
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d007      	beq.n	80043b8 <UART_SetConfig+0x274>
 80043a8:	e012      	b.n	80043d0 <UART_SetConfig+0x28c>
 80043aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ae:	d006      	beq.n	80043be <UART_SetConfig+0x27a>
 80043b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043b4:	d009      	beq.n	80043ca <UART_SetConfig+0x286>
 80043b6:	e00b      	b.n	80043d0 <UART_SetConfig+0x28c>
 80043b8:	2300      	movs	r3, #0
 80043ba:	76fb      	strb	r3, [r7, #27]
 80043bc:	e00c      	b.n	80043d8 <UART_SetConfig+0x294>
 80043be:	2302      	movs	r3, #2
 80043c0:	76fb      	strb	r3, [r7, #27]
 80043c2:	e009      	b.n	80043d8 <UART_SetConfig+0x294>
 80043c4:	2304      	movs	r3, #4
 80043c6:	76fb      	strb	r3, [r7, #27]
 80043c8:	e006      	b.n	80043d8 <UART_SetConfig+0x294>
 80043ca:	2308      	movs	r3, #8
 80043cc:	76fb      	strb	r3, [r7, #27]
 80043ce:	e003      	b.n	80043d8 <UART_SetConfig+0x294>
 80043d0:	2310      	movs	r3, #16
 80043d2:	76fb      	strb	r3, [r7, #27]
 80043d4:	e000      	b.n	80043d8 <UART_SetConfig+0x294>
 80043d6:	bf00      	nop
  
  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a16      	ldr	r2, [pc, #88]	; (8004438 <UART_SetConfig+0x2f4>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	f040 80fa 	bne.w	80045d8 <UART_SetConfig+0x494>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043e4:	7efb      	ldrb	r3, [r7, #27]
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d836      	bhi.n	8004458 <UART_SetConfig+0x314>
 80043ea:	a201      	add	r2, pc, #4	; (adr r2, 80043f0 <UART_SetConfig+0x2ac>)
 80043ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f0:	08004415 	.word	0x08004415
 80043f4:	08004459 	.word	0x08004459
 80043f8:	0800441d 	.word	0x0800441d
 80043fc:	08004459 	.word	0x08004459
 8004400:	08004423 	.word	0x08004423
 8004404:	08004459 	.word	0x08004459
 8004408:	08004459 	.word	0x08004459
 800440c:	08004459 	.word	0x08004459
 8004410:	0800442b 	.word	0x0800442b
    {
    case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
      lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq()/UARTPrescTable[huart->Init.ClockPrescaler]);
#else
      lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004414:	f7ff f86c 	bl	80034f0 <HAL_RCC_GetPCLK1Freq>
 8004418:	60f8      	str	r0, [r7, #12]
#endif
      break;
 800441a:	e020      	b.n	800445e <UART_SetConfig+0x31a>
    case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
#else
      lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800441c:	4b0d      	ldr	r3, [pc, #52]	; (8004454 <UART_SetConfig+0x310>)
 800441e:	60fb      	str	r3, [r7, #12]
#endif
      break;
 8004420:	e01d      	b.n	800445e <UART_SetConfig+0x31a>
    case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
      lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq()/UARTPrescTable[huart->Init.ClockPrescaler]);
#else
      lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004422:	f7fe ffa9 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8004426:	60f8      	str	r0, [r7, #12]
#endif
      break;
 8004428:	e019      	b.n	800445e <UART_SetConfig+0x31a>
    case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
#else
      lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800442a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800442e:	60fb      	str	r3, [r7, #12]
#endif
      break;
 8004430:	e015      	b.n	800445e <UART_SetConfig+0x31a>
 8004432:	bf00      	nop
 8004434:	efff69f3 	.word	0xefff69f3
 8004438:	40008000 	.word	0x40008000
 800443c:	40013800 	.word	0x40013800
 8004440:	40021000 	.word	0x40021000
 8004444:	40004400 	.word	0x40004400
 8004448:	40004800 	.word	0x40004800
 800444c:	40004c00 	.word	0x40004c00
 8004450:	40005000 	.word	0x40005000
 8004454:	00f42400 	.word	0x00f42400
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
      ret = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	74fb      	strb	r3, [r7, #19]
      break;
 800445c:	bf00      	nop
    }
    
    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 81ac 	beq.w	80047be <UART_SetConfig+0x67a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	4613      	mov	r3, r2
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	4413      	add	r3, r2
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	429a      	cmp	r2, r3
 8004474:	d305      	bcc.n	8004482 <UART_SetConfig+0x33e>
          (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) ))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	031b      	lsls	r3, r3, #12
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	429a      	cmp	r2, r3
 8004480:	d902      	bls.n	8004488 <UART_SetConfig+0x344>
      {
        ret = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	74fb      	strb	r3, [r7, #19]
 8004486:	e19a      	b.n	80047be <UART_SetConfig+0x67a>
      }
      else
      {
        switch (clocksource)
 8004488:	7efb      	ldrb	r3, [r7, #27]
 800448a:	2b08      	cmp	r3, #8
 800448c:	f200 8091 	bhi.w	80045b2 <UART_SetConfig+0x46e>
 8004490:	a201      	add	r2, pc, #4	; (adr r2, 8004498 <UART_SetConfig+0x354>)
 8004492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004496:	bf00      	nop
 8004498:	080044bd 	.word	0x080044bd
 800449c:	080045b3 	.word	0x080045b3
 80044a0:	08004509 	.word	0x08004509
 80044a4:	080045b3 	.word	0x080045b3
 80044a8:	0800453d 	.word	0x0800453d
 80044ac:	080045b3 	.word	0x080045b3
 80044b0:	080045b3 	.word	0x080045b3
 80044b4:	080045b3 	.word	0x080045b3
 80044b8:	08004589 	.word	0x08004589
        {
        case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80044bc:	f7ff f818 	bl	80034f0 <HAL_RCC_GetPCLK1Freq>
 80044c0:	4603      	mov	r3, r0
 80044c2:	4619      	mov	r1, r3
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	f04f 0400 	mov.w	r4, #0
 80044d0:	0214      	lsls	r4, r2, #8
 80044d2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80044d6:	020b      	lsls	r3, r1, #8
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6852      	ldr	r2, [r2, #4]
 80044dc:	0852      	lsrs	r2, r2, #1
 80044de:	4611      	mov	r1, r2
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	eb13 0b01 	adds.w	fp, r3, r1
 80044e8:	eb44 0c02 	adc.w	ip, r4, r2
 80044ec:	4658      	mov	r0, fp
 80044ee:	4661      	mov	r1, ip
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f04f 0400 	mov.w	r4, #0
 80044f8:	461a      	mov	r2, r3
 80044fa:	4623      	mov	r3, r4
 80044fc:	f7fc f874 	bl	80005e8 <__aeabi_uldivmod>
 8004500:	4603      	mov	r3, r0
 8004502:	460c      	mov	r4, r1
 8004504:	617b      	str	r3, [r7, #20]
#endif
          break;
 8004506:	e057      	b.n	80045b8 <UART_SetConfig+0x474>
        case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	085b      	lsrs	r3, r3, #1
 800450e:	f04f 0400 	mov.w	r4, #0
 8004512:	49b1      	ldr	r1, [pc, #708]	; (80047d8 <UART_SetConfig+0x694>)
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	eb13 0b01 	adds.w	fp, r3, r1
 800451c:	eb44 0c02 	adc.w	ip, r4, r2
 8004520:	4658      	mov	r0, fp
 8004522:	4661      	mov	r1, ip
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f04f 0400 	mov.w	r4, #0
 800452c:	461a      	mov	r2, r3
 800452e:	4623      	mov	r3, r4
 8004530:	f7fc f85a 	bl	80005e8 <__aeabi_uldivmod>
 8004534:	4603      	mov	r3, r0
 8004536:	460c      	mov	r4, r1
 8004538:	617b      	str	r3, [r7, #20]
#endif
          break;
 800453a:	e03d      	b.n	80045b8 <UART_SetConfig+0x474>
        case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800453c:	f7fe ff1c 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8004540:	4603      	mov	r3, r0
 8004542:	4619      	mov	r1, r3
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	f04f 0400 	mov.w	r4, #0
 8004550:	0214      	lsls	r4, r2, #8
 8004552:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004556:	020b      	lsls	r3, r1, #8
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6852      	ldr	r2, [r2, #4]
 800455c:	0852      	lsrs	r2, r2, #1
 800455e:	4611      	mov	r1, r2
 8004560:	f04f 0200 	mov.w	r2, #0
 8004564:	eb13 0b01 	adds.w	fp, r3, r1
 8004568:	eb44 0c02 	adc.w	ip, r4, r2
 800456c:	4658      	mov	r0, fp
 800456e:	4661      	mov	r1, ip
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f04f 0400 	mov.w	r4, #0
 8004578:	461a      	mov	r2, r3
 800457a:	4623      	mov	r3, r4
 800457c:	f7fc f834 	bl	80005e8 <__aeabi_uldivmod>
 8004580:	4603      	mov	r3, r0
 8004582:	460c      	mov	r4, r1
 8004584:	617b      	str	r3, [r7, #20]
#endif
          break;
 8004586:	e017      	b.n	80045b8 <UART_SetConfig+0x474>
        case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	085b      	lsrs	r3, r3, #1
 800458e:	f04f 0400 	mov.w	r4, #0
 8004592:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004596:	f144 0100 	adc.w	r1, r4, #0
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f04f 0400 	mov.w	r4, #0
 80045a2:	461a      	mov	r2, r3
 80045a4:	4623      	mov	r3, r4
 80045a6:	f7fc f81f 	bl	80005e8 <__aeabi_uldivmod>
 80045aa:	4603      	mov	r3, r0
 80045ac:	460c      	mov	r4, r1
 80045ae:	617b      	str	r3, [r7, #20]
#endif
          break;
 80045b0:	e002      	b.n	80045b8 <UART_SetConfig+0x474>
        case UART_CLOCKSOURCE_UNDEFINED:
        default:
          ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	74fb      	strb	r3, [r7, #19]
          break;
 80045b6:	bf00      	nop
        }
        
        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045be:	d308      	bcc.n	80045d2 <UART_SetConfig+0x48e>
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045c6:	d204      	bcs.n	80045d2 <UART_SetConfig+0x48e>
        {
          huart->Instance->BRR = usartdiv;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	60da      	str	r2, [r3, #12]
 80045d0:	e0f5      	b.n	80047be <UART_SetConfig+0x67a>
        }
        else
        {
          ret = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	74fb      	strb	r3, [r7, #19]
 80045d6:	e0f2      	b.n	80047be <UART_SetConfig+0x67a>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045e0:	d17f      	bne.n	80046e2 <UART_SetConfig+0x59e>
  {
    switch (clocksource)
 80045e2:	7efb      	ldrb	r3, [r7, #27]
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d85c      	bhi.n	80046a2 <UART_SetConfig+0x55e>
 80045e8:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <UART_SetConfig+0x4ac>)
 80045ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ee:	bf00      	nop
 80045f0:	08004615 	.word	0x08004615
 80045f4:	08004633 	.word	0x08004633
 80045f8:	08004651 	.word	0x08004651
 80045fc:	080046a3 	.word	0x080046a3
 8004600:	0800466d 	.word	0x0800466d
 8004604:	080046a3 	.word	0x080046a3
 8004608:	080046a3 	.word	0x080046a3
 800460c:	080046a3 	.word	0x080046a3
 8004610:	0800468b 	.word	0x0800468b
    {
    case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004614:	f7fe ff6c 	bl	80034f0 <HAL_RCC_GetPCLK1Freq>
 8004618:	4603      	mov	r3, r0
 800461a:	005a      	lsls	r2, r3, #1
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	085b      	lsrs	r3, r3, #1
 8004622:	441a      	add	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	fbb2 f3f3 	udiv	r3, r2, r3
 800462c:	b29b      	uxth	r3, r3
 800462e:	617b      	str	r3, [r7, #20]
#endif
      break;
 8004630:	e03a      	b.n	80046a8 <UART_SetConfig+0x564>
    case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004632:	f7fe ff71 	bl	8003518 <HAL_RCC_GetPCLK2Freq>
 8004636:	4603      	mov	r3, r0
 8004638:	005a      	lsls	r2, r3, #1
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	085b      	lsrs	r3, r3, #1
 8004640:	441a      	add	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	fbb2 f3f3 	udiv	r3, r2, r3
 800464a:	b29b      	uxth	r3, r3
 800464c:	617b      	str	r3, [r7, #20]
#endif
      break;
 800464e:	e02b      	b.n	80046a8 <UART_SetConfig+0x564>
    case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	085b      	lsrs	r3, r3, #1
 8004656:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800465a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6852      	ldr	r2, [r2, #4]
 8004662:	fbb3 f3f2 	udiv	r3, r3, r2
 8004666:	b29b      	uxth	r3, r3
 8004668:	617b      	str	r3, [r7, #20]
#endif
      break;
 800466a:	e01d      	b.n	80046a8 <UART_SetConfig+0x564>
    case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800466c:	f7fe fe84 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8004670:	4603      	mov	r3, r0
 8004672:	005a      	lsls	r2, r3, #1
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	085b      	lsrs	r3, r3, #1
 800467a:	441a      	add	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	fbb2 f3f3 	udiv	r3, r2, r3
 8004684:	b29b      	uxth	r3, r3
 8004686:	617b      	str	r3, [r7, #20]
#endif
      break;
 8004688:	e00e      	b.n	80046a8 <UART_SetConfig+0x564>
    case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	085b      	lsrs	r3, r3, #1
 8004690:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	fbb2 f3f3 	udiv	r3, r2, r3
 800469c:	b29b      	uxth	r3, r3
 800469e:	617b      	str	r3, [r7, #20]
#endif
      break;
 80046a0:	e002      	b.n	80046a8 <UART_SetConfig+0x564>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
      ret = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	74fb      	strb	r3, [r7, #19]
      break;
 80046a6:	bf00      	nop
    }
    
    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	2b0f      	cmp	r3, #15
 80046ac:	d916      	bls.n	80046dc <UART_SetConfig+0x598>
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b4:	d212      	bcs.n	80046dc <UART_SetConfig+0x598>
    {
      brrtemp = usartdiv & 0xFFF0U;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	f023 030f 	bic.w	r3, r3, #15
 80046be:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	085b      	lsrs	r3, r3, #1
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	897b      	ldrh	r3, [r7, #10]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	897a      	ldrh	r2, [r7, #10]
 80046d8:	60da      	str	r2, [r3, #12]
 80046da:	e070      	b.n	80047be <UART_SetConfig+0x67a>
    }
    else
    {
      ret = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	74fb      	strb	r3, [r7, #19]
 80046e0:	e06d      	b.n	80047be <UART_SetConfig+0x67a>
    }
  }
  else
  {
    switch (clocksource)
 80046e2:	7efb      	ldrb	r3, [r7, #27]
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d859      	bhi.n	800479c <UART_SetConfig+0x658>
 80046e8:	a201      	add	r2, pc, #4	; (adr r2, 80046f0 <UART_SetConfig+0x5ac>)
 80046ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ee:	bf00      	nop
 80046f0:	08004715 	.word	0x08004715
 80046f4:	08004731 	.word	0x08004731
 80046f8:	0800474d 	.word	0x0800474d
 80046fc:	0800479d 	.word	0x0800479d
 8004700:	08004769 	.word	0x08004769
 8004704:	0800479d 	.word	0x0800479d
 8004708:	0800479d 	.word	0x0800479d
 800470c:	0800479d 	.word	0x0800479d
 8004710:	08004785 	.word	0x08004785
    {
    case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004714:	f7fe feec 	bl	80034f0 <HAL_RCC_GetPCLK1Freq>
 8004718:	4602      	mov	r2, r0
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	085b      	lsrs	r3, r3, #1
 8004720:	441a      	add	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	fbb2 f3f3 	udiv	r3, r2, r3
 800472a:	b29b      	uxth	r3, r3
 800472c:	617b      	str	r3, [r7, #20]
#endif
      break;
 800472e:	e038      	b.n	80047a2 <UART_SetConfig+0x65e>
    case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004730:	f7fe fef2 	bl	8003518 <HAL_RCC_GetPCLK2Freq>
 8004734:	4602      	mov	r2, r0
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	085b      	lsrs	r3, r3, #1
 800473c:	441a      	add	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	fbb2 f3f3 	udiv	r3, r2, r3
 8004746:	b29b      	uxth	r3, r3
 8004748:	617b      	str	r3, [r7, #20]
#endif
      break;
 800474a:	e02a      	b.n	80047a2 <UART_SetConfig+0x65e>
    case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	085b      	lsrs	r3, r3, #1
 8004752:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004756:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6852      	ldr	r2, [r2, #4]
 800475e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004762:	b29b      	uxth	r3, r3
 8004764:	617b      	str	r3, [r7, #20]
#endif
      break;
 8004766:	e01c      	b.n	80047a2 <UART_SetConfig+0x65e>
    case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004768:	f7fe fe06 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 800476c:	4602      	mov	r2, r0
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	085b      	lsrs	r3, r3, #1
 8004774:	441a      	add	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	fbb2 f3f3 	udiv	r3, r2, r3
 800477e:	b29b      	uxth	r3, r3
 8004780:	617b      	str	r3, [r7, #20]
#endif
      break;
 8004782:	e00e      	b.n	80047a2 <UART_SetConfig+0x65e>
    case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	085b      	lsrs	r3, r3, #1
 800478a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	fbb2 f3f3 	udiv	r3, r2, r3
 8004796:	b29b      	uxth	r3, r3
 8004798:	617b      	str	r3, [r7, #20]
#endif
      break;
 800479a:	e002      	b.n	80047a2 <UART_SetConfig+0x65e>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
      ret = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	74fb      	strb	r3, [r7, #19]
      break;
 80047a0:	bf00      	nop
    }
    
    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2b0f      	cmp	r3, #15
 80047a6:	d908      	bls.n	80047ba <UART_SetConfig+0x676>
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ae:	d204      	bcs.n	80047ba <UART_SetConfig+0x676>
    {
      huart->Instance->BRR = usartdiv;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	60da      	str	r2, [r3, #12]
 80047b8:	e001      	b.n	80047be <UART_SetConfig+0x67a>
    }
    else
    {
      ret = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif
    
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	665a      	str	r2, [r3, #100]	; 0x64
  
  return ret;
 80047ca:	7cfb      	ldrb	r3, [r7, #19]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3720      	adds	r7, #32
 80047d0:	46bd      	mov	sp, r7
 80047d2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80047d6:	bf00      	nop
 80047d8:	f4240000 	.word	0xf4240000

080047dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
  }
  
  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	605a      	str	r2, [r3, #4]
  }
  
  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00a      	beq.n	800484a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
  }
  
  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	605a      	str	r2, [r3, #4]
  }
  
  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	f003 0310 	and.w	r3, r3, #16
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00a      	beq.n	800488e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	609a      	str	r2, [r3, #8]
  }
  
  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	609a      	str	r2, [r3, #8]
  }
  
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d01a      	beq.n	80048f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048da:	d10a      	bne.n	80048f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	605a      	str	r2, [r3, #4]
  }
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af02      	add	r7, sp, #8
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004928:	2300      	movs	r3, #0
 800492a:	60fb      	str	r3, [r7, #12]
  
  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	675a      	str	r2, [r3, #116]	; 0x74
  
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004932:	f7fc ffc1 	bl	80018b8 <HAL_GetTick>
 8004936:	60f8      	str	r0, [r7, #12]
  
  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0308 	and.w	r3, r3, #8
 8004942:	2b08      	cmp	r3, #8
 8004944:	d10e      	bne.n	8004964 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004946:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f82c 	bl	80049b2 <UART_WaitOnFlagUntilTimeout>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e022      	b.n	80049aa <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0304 	and.w	r3, r3, #4
 800496e:	2b04      	cmp	r3, #4
 8004970:	d10e      	bne.n	8004990 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004972:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f816 	bl	80049b2 <UART_WaitOnFlagUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e00c      	b.n	80049aa <UART_CheckIdleState+0x8a>
    }
  }
  
  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2220      	movs	r2, #32
 8004994:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  huart->RxState= HAL_UART_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2220      	movs	r2, #32
 800499c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
  
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b084      	sub	sp, #16
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	60f8      	str	r0, [r7, #12]
 80049ba:	60b9      	str	r1, [r7, #8]
 80049bc:	603b      	str	r3, [r7, #0]
 80049be:	4613      	mov	r3, r2
 80049c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049c2:	e02c      	b.n	8004a1e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ca:	d028      	beq.n	8004a1e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d007      	beq.n	80049e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80049d2:	f7fc ff71 	bl	80018b8 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d21d      	bcs.n	8004a1e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049f0:	601a      	str	r2, [r3, #0]
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0201 	bic.w	r2, r2, #1
 8004a00:	609a      	str	r2, [r3, #8]
        
        huart->gState = HAL_UART_STATE_READY;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        
        return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e00f      	b.n	8004a3e <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69da      	ldr	r2, [r3, #28]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	4013      	ands	r3, r2
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	bf0c      	ite	eq
 8004a2e:	2301      	moveq	r3, #1
 8004a30:	2300      	movne	r3, #0
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	461a      	mov	r2, r3
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d0c3      	beq.n	80049c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08a      	sub	sp, #40	; 0x28
 8004a4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a4e:	4b40      	ldr	r3, [pc, #256]	; (8004b50 <MX_GPIO_Init+0x108>)
 8004a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a52:	4a3f      	ldr	r2, [pc, #252]	; (8004b50 <MX_GPIO_Init+0x108>)
 8004a54:	f043 0304 	orr.w	r3, r3, #4
 8004a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a5a:	4b3d      	ldr	r3, [pc, #244]	; (8004b50 <MX_GPIO_Init+0x108>)
 8004a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5e:	f003 0304 	and.w	r3, r3, #4
 8004a62:	613b      	str	r3, [r7, #16]
 8004a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004a66:	4b3a      	ldr	r3, [pc, #232]	; (8004b50 <MX_GPIO_Init+0x108>)
 8004a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a6a:	4a39      	ldr	r2, [pc, #228]	; (8004b50 <MX_GPIO_Init+0x108>)
 8004a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a72:	4b37      	ldr	r3, [pc, #220]	; (8004b50 <MX_GPIO_Init+0x108>)
 8004a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7a:	60fb      	str	r3, [r7, #12]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a7e:	4b34      	ldr	r3, [pc, #208]	; (8004b50 <MX_GPIO_Init+0x108>)
 8004a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a82:	4a33      	ldr	r2, [pc, #204]	; (8004b50 <MX_GPIO_Init+0x108>)
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a8a:	4b31      	ldr	r3, [pc, #196]	; (8004b50 <MX_GPIO_Init+0x108>)
 8004a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	60bb      	str	r3, [r7, #8]
 8004a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a96:	4b2e      	ldr	r3, [pc, #184]	; (8004b50 <MX_GPIO_Init+0x108>)
 8004a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a9a:	4a2d      	ldr	r2, [pc, #180]	; (8004b50 <MX_GPIO_Init+0x108>)
 8004a9c:	f043 0302 	orr.w	r3, r3, #2
 8004aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004aa2:	4b2b      	ldr	r3, [pc, #172]	; (8004b50 <MX_GPIO_Init+0x108>)
 8004aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	607b      	str	r3, [r7, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004aae:	4b28      	ldr	r3, [pc, #160]	; (8004b50 <MX_GPIO_Init+0x108>)
 8004ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab2:	4a27      	ldr	r2, [pc, #156]	; (8004b50 <MX_GPIO_Init+0x108>)
 8004ab4:	f043 0308 	orr.w	r3, r3, #8
 8004ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004aba:	4b25      	ldr	r3, [pc, #148]	; (8004b50 <MX_GPIO_Init+0x108>)
 8004abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004abe:	f003 0308 	and.w	r3, r3, #8
 8004ac2:	603b      	str	r3, [r7, #0]
 8004ac4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC13 PC0 PC1 PC2 
                           PC3 PC4 PC5 PC6 
                           PC7 PC8 PC9 PC10 
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
 8004ac6:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8004aca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004acc:	2303      	movs	r3, #3
 8004ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ad4:	f107 0314 	add.w	r3, r7, #20
 8004ad8:	4619      	mov	r1, r3
 8004ada:	481e      	ldr	r0, [pc, #120]	; (8004b54 <MX_GPIO_Init+0x10c>)
 8004adc:	f7fd f826 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004aec:	f107 0314 	add.w	r3, r7, #20
 8004af0:	4619      	mov	r1, r3
 8004af2:	4819      	ldr	r0, [pc, #100]	; (8004b58 <MX_GPIO_Init+0x110>)
 8004af4:	f7fd f81a 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5 
                           PA6 PA7 PA8 PA9 
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8004af8:	f649 73f3 	movw	r3, #40947	; 0x9ff3
 8004afc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004afe:	2303      	movs	r3, #3
 8004b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b02:	2300      	movs	r3, #0
 8004b04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b06:	f107 0314 	add.w	r3, r7, #20
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b10:	f7fd f80c 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB6 
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8004b14:	f64f 43f7 	movw	r3, #64759	; 0xfcf7
 8004b18:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b22:	f107 0314 	add.w	r3, r7, #20
 8004b26:	4619      	mov	r1, r3
 8004b28:	480c      	ldr	r0, [pc, #48]	; (8004b5c <MX_GPIO_Init+0x114>)
 8004b2a:	f7fc ffff 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004b2e:	2304      	movs	r3, #4
 8004b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b32:	2303      	movs	r3, #3
 8004b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b3a:	f107 0314 	add.w	r3, r7, #20
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4807      	ldr	r0, [pc, #28]	; (8004b60 <MX_GPIO_Init+0x118>)
 8004b42:	f7fc fff3 	bl	8001b2c <HAL_GPIO_Init>

}
 8004b46:	bf00      	nop
 8004b48:	3728      	adds	r7, #40	; 0x28
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	40021000 	.word	0x40021000
 8004b54:	48000800 	.word	0x48000800
 8004b58:	48001c00 	.word	0x48001c00
 8004b5c:	48000400 	.word	0x48000400
 8004b60:	48000c00 	.word	0x48000c00

08004b64 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8004b68:	4b1e      	ldr	r3, [pc, #120]	; (8004be4 <MX_I2C1_Init+0x80>)
 8004b6a:	4a1f      	ldr	r2, [pc, #124]	; (8004be8 <MX_I2C1_Init+0x84>)
 8004b6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x4040415A;
 8004b6e:	4b1d      	ldr	r3, [pc, #116]	; (8004be4 <MX_I2C1_Init+0x80>)
 8004b70:	4a1e      	ldr	r2, [pc, #120]	; (8004bec <MX_I2C1_Init+0x88>)
 8004b72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004b74:	4b1b      	ldr	r3, [pc, #108]	; (8004be4 <MX_I2C1_Init+0x80>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b7a:	4b1a      	ldr	r3, [pc, #104]	; (8004be4 <MX_I2C1_Init+0x80>)
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b80:	4b18      	ldr	r3, [pc, #96]	; (8004be4 <MX_I2C1_Init+0x80>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004b86:	4b17      	ldr	r3, [pc, #92]	; (8004be4 <MX_I2C1_Init+0x80>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004b8c:	4b15      	ldr	r3, [pc, #84]	; (8004be4 <MX_I2C1_Init+0x80>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b92:	4b14      	ldr	r3, [pc, #80]	; (8004be4 <MX_I2C1_Init+0x80>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b98:	4b12      	ldr	r3, [pc, #72]	; (8004be4 <MX_I2C1_Init+0x80>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004b9e:	4811      	ldr	r0, [pc, #68]	; (8004be4 <MX_I2C1_Init+0x80>)
 8004ba0:	f7fd f970 	bl	8001e84 <HAL_I2C_Init>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <MX_I2C1_Init+0x4e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004baa:	2142      	movs	r1, #66	; 0x42
 8004bac:	4810      	ldr	r0, [pc, #64]	; (8004bf0 <MX_I2C1_Init+0x8c>)
 8004bae:	f000 f96f 	bl	8004e90 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	480b      	ldr	r0, [pc, #44]	; (8004be4 <MX_I2C1_Init+0x80>)
 8004bb6:	f7fd fe67 	bl	8002888 <HAL_I2CEx_ConfigAnalogFilter>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <MX_I2C1_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004bc0:	2149      	movs	r1, #73	; 0x49
 8004bc2:	480b      	ldr	r0, [pc, #44]	; (8004bf0 <MX_I2C1_Init+0x8c>)
 8004bc4:	f000 f964 	bl	8004e90 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004bc8:	2100      	movs	r1, #0
 8004bca:	4806      	ldr	r0, [pc, #24]	; (8004be4 <MX_I2C1_Init+0x80>)
 8004bcc:	f7fd fea7 	bl	800291e <HAL_I2CEx_ConfigDigitalFilter>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <MX_I2C1_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004bd6:	2150      	movs	r1, #80	; 0x50
 8004bd8:	4805      	ldr	r0, [pc, #20]	; (8004bf0 <MX_I2C1_Init+0x8c>)
 8004bda:	f000 f959 	bl	8004e90 <_Error_Handler>
  }

}
 8004bde:	bf00      	nop
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	20000098 	.word	0x20000098
 8004be8:	40005400 	.word	0x40005400
 8004bec:	4040415a 	.word	0x4040415a
 8004bf0:	08006174 	.word	0x08006174

08004bf4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a11      	ldr	r2, [pc, #68]	; (8004c48 <HAL_I2C_MspInit+0x54>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d11c      	bne.n	8004c40 <HAL_I2C_MspInit+0x4c>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004c06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004c0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c0c:	2312      	movs	r3, #18
 8004c0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c10:	2301      	movs	r3, #1
 8004c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c14:	2303      	movs	r3, #3
 8004c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c18:	2304      	movs	r3, #4
 8004c1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c1c:	f107 030c 	add.w	r3, r7, #12
 8004c20:	4619      	mov	r1, r3
 8004c22:	480a      	ldr	r0, [pc, #40]	; (8004c4c <HAL_I2C_MspInit+0x58>)
 8004c24:	f7fc ff82 	bl	8001b2c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004c28:	4b09      	ldr	r3, [pc, #36]	; (8004c50 <HAL_I2C_MspInit+0x5c>)
 8004c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c2c:	4a08      	ldr	r2, [pc, #32]	; (8004c50 <HAL_I2C_MspInit+0x5c>)
 8004c2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c32:	6593      	str	r3, [r2, #88]	; 0x58
 8004c34:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <HAL_I2C_MspInit+0x5c>)
 8004c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c3c:	60bb      	str	r3, [r7, #8]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004c40:	bf00      	nop
 8004c42:	3720      	adds	r7, #32
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	40005400 	.word	0x40005400
 8004c4c:	48000400 	.word	0x48000400
 8004c50:	40021000 	.word	0x40021000

08004c54 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE {
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8004c5c:	1d39      	adds	r1, r7, #4
 8004c5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c62:	2201      	movs	r2, #1
 8004c64:	4803      	ldr	r0, [pc, #12]	; (8004c74 <__io_putchar+0x20>)
 8004c66:	f7ff f9e0 	bl	800402a <HAL_UART_Transmit>

	return ch;
 8004c6a:	687b      	ldr	r3, [r7, #4]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	20000138 	.word	0x20000138

08004c78 <main>:

/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void) {
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004c7c:	f7fc fde4 	bl	8001848 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004c80:	f000 f874 	bl	8004d6c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004c84:	f7ff fee0 	bl	8004a48 <MX_GPIO_Init>
	//MX_WWDG_Init();
	MX_USART2_UART_Init();
 8004c88:	f000 fa56 	bl	8005138 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8004c8c:	f7ff ff6a 	bl	8004b64 <MX_I2C1_Init>

	/* USER CODE BEGIN 2 */
	BSP_MMA845x_Init();
 8004c90:	f000 f848 	bl	8004d24 <BSP_MMA845x_Init>
	/* USER CODE END 2 */
	printf("Ready\r\n");
 8004c94:	4804      	ldr	r0, [pc, #16]	; (8004ca8 <main+0x30>)
 8004c96:	f000 fb7b 	bl	8005390 <puts>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		Drv_MMA845x_MainFunction(&hMMA8452Q);
 8004c9a:	4804      	ldr	r0, [pc, #16]	; (8004cac <main+0x34>)
 8004c9c:	f7fb feac 	bl	80009f8 <Drv_MMA845x_MainFunction>
		HAL_Delay(10);
 8004ca0:	200a      	movs	r0, #10
 8004ca2:	f7fc fe15 	bl	80018d0 <HAL_Delay>
		Drv_MMA845x_MainFunction(&hMMA8452Q);
 8004ca6:	e7f8      	b.n	8004c9a <main+0x22>
 8004ca8:	08006184 	.word	0x08006184
 8004cac:	200000e4 	.word	0x200000e4

08004cb0 <Drv_MMA845x_RxXYZCpltCallback>:

	}
	/* USER CODE END 3 */

}
void Drv_MMA845x_RxXYZCpltCallback(MMA845x_HandleTypeDef *handle) {
 8004cb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004cb4:	b086      	sub	sp, #24
 8004cb6:	af04      	add	r7, sp, #16
 8004cb8:	6078      	str	r0, [r7, #4]

	printf("Counts -> X: %d Y: %d Z: %d \r\n", handle->Data.x, handle->Data.y, handle->Data.z);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8004cc8:	461a      	mov	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8004cd0:	4812      	ldr	r0, [pc, #72]	; (8004d1c <Drv_MMA845x_RxXYZCpltCallback+0x6c>)
 8004cd2:	f000 fae9 	bl	80052a8 <iprintf>
	printf("Gs     -> X: %.4f [mg] Y: %.4f [mg] Z: %.4f [mg]\r\n", handle->Data.gx, handle->Data.gy, handle->Data.gz);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fb fc2c 	bl	8000538 <__aeabi_f2d>
 8004ce0:	4680      	mov	r8, r0
 8004ce2:	4689      	mov	r9, r1
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7fb fc25 	bl	8000538 <__aeabi_f2d>
 8004cee:	4604      	mov	r4, r0
 8004cf0:	460d      	mov	r5, r1
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fb fc1e 	bl	8000538 <__aeabi_f2d>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d04:	e9cd 4500 	strd	r4, r5, [sp]
 8004d08:	4642      	mov	r2, r8
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	4804      	ldr	r0, [pc, #16]	; (8004d20 <Drv_MMA845x_RxXYZCpltCallback+0x70>)
 8004d0e:	f000 facb 	bl	80052a8 <iprintf>

}
 8004d12:	bf00      	nop
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004d1c:	0800618c 	.word	0x0800618c
 8004d20:	080061ac 	.word	0x080061ac

08004d24 <BSP_MMA845x_Init>:

void BSP_MMA845x_Init(void) {
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0

	hMMA8452Q.Instance = MMA845X_INSTANCE2;
 8004d28:	4b0e      	ldr	r3, [pc, #56]	; (8004d64 <BSP_MMA845x_Init+0x40>)
 8004d2a:	223a      	movs	r2, #58	; 0x3a
 8004d2c:	715a      	strb	r2, [r3, #5]
	hMMA8452Q.Init.DataRate = HAL_MMA845x_DATA_RATE_800Hz;
 8004d2e:	4b0d      	ldr	r3, [pc, #52]	; (8004d64 <BSP_MMA845x_Init+0x40>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	701a      	strb	r2, [r3, #0]
	hMMA8452Q.Init.ActiveSamplingMode = HAL_MMA845x_OVSM_HIGH_RESOLUTION;
 8004d34:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <BSP_MMA845x_Init+0x40>)
 8004d36:	2202      	movs	r2, #2
 8004d38:	709a      	strb	r2, [r3, #2]
	hMMA8452Q.Init.SleepSamplingMode = HAL_MMA845x_OVSM_HIGH_RESOLUTION;
 8004d3a:	4b0a      	ldr	r3, [pc, #40]	; (8004d64 <BSP_MMA845x_Init+0x40>)
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	705a      	strb	r2, [r3, #1]
	hMMA8452Q.Init.DynamicRange = HAL_MMA845x_FULL_SCALE_2G;
 8004d40:	4b08      	ldr	r3, [pc, #32]	; (8004d64 <BSP_MMA845x_Init+0x40>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	711a      	strb	r2, [r3, #4]
	hMMA8452Q.Init.SleepRate = HAL_MMA845x_ASLP_RATE_50Hz;
 8004d46:	4b07      	ldr	r3, [pc, #28]	; (8004d64 <BSP_MMA845x_Init+0x40>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	70da      	strb	r2, [r3, #3]

	if (Drv_MMA845x_Init(&hMMA8452Q) != E_OK) {
 8004d4c:	4805      	ldr	r0, [pc, #20]	; (8004d64 <BSP_MMA845x_Init+0x40>)
 8004d4e:	f7fb fdcb 	bl	80008e8 <Drv_MMA845x_Init>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d003      	beq.n	8004d60 <BSP_MMA845x_Init+0x3c>
		_Error_Handler(__FILE__, __LINE__);
 8004d58:	2194      	movs	r1, #148	; 0x94
 8004d5a:	4803      	ldr	r0, [pc, #12]	; (8004d68 <BSP_MMA845x_Init+0x44>)
 8004d5c:	f000 f898 	bl	8004e90 <_Error_Handler>
	}

}
 8004d60:	bf00      	nop
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	200000e4 	.word	0x200000e4
 8004d68:	080061e0 	.word	0x080061e0

08004d6c <SystemClock_Config>:

/** System Clock Configuration
 */
void SystemClock_Config(void) {
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b0b8      	sub	sp, #224	; 0xe0
 8004d70:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Configure LSE Drive Capability
	 */
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004d72:	4b44      	ldr	r3, [pc, #272]	; (8004e84 <SystemClock_Config+0x118>)
 8004d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d78:	4a42      	ldr	r2, [pc, #264]	; (8004e84 <SystemClock_Config+0x118>)
 8004d7a:	f023 0318 	bic.w	r3, r3, #24
 8004d7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8004d82:	2314      	movs	r3, #20
 8004d84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8004d94:	2300      	movs	r3, #0
 8004d96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004d9a:	2360      	movs	r3, #96	; 0x60
 8004d9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004da0:	2302      	movs	r3, #2
 8004da2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004da6:	2301      	movs	r3, #1
 8004da8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 1;
 8004dac:	2301      	movs	r3, #1
 8004dae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 40;
 8004db2:	2328      	movs	r3, #40	; 0x28
 8004db4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004db8:	2307      	movs	r3, #7
 8004dba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004dca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fd fe58 	bl	8002a84 <HAL_RCC_OscConfig>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <SystemClock_Config+0x76>
		_Error_Handler(__FILE__, __LINE__);
 8004dda:	21b5      	movs	r1, #181	; 0xb5
 8004ddc:	482a      	ldr	r0, [pc, #168]	; (8004e88 <SystemClock_Config+0x11c>)
 8004dde:	f000 f857 	bl	8004e90 <_Error_Handler>
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004de2:	230f      	movs	r3, #15
 8004de4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004de8:	2303      	movs	r3, #3
 8004dea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004dee:	2300      	movs	r3, #0
 8004df0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004df4:	2300      	movs	r3, #0
 8004df6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8004e00:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004e04:	2103      	movs	r1, #3
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fe f99e 	bl	8003148 <HAL_RCC_ClockConfig>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <SystemClock_Config+0xae>
		_Error_Handler(__FILE__, __LINE__);
 8004e12:	21c2      	movs	r1, #194	; 0xc2
 8004e14:	481c      	ldr	r0, [pc, #112]	; (8004e88 <SystemClock_Config+0x11c>)
 8004e16:	f000 f83b 	bl	8004e90 <_Error_Handler>
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 8004e1a:	2342      	movs	r3, #66	; 0x42
 8004e1c:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004e22:	2300      	movs	r3, #0
 8004e24:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8004e26:	463b      	mov	r3, r7
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7fe fbeb 	bl	8003604 <HAL_RCCEx_PeriphCLKConfig>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <SystemClock_Config+0xd0>
		_Error_Handler(__FILE__, __LINE__);
 8004e34:	21ca      	movs	r1, #202	; 0xca
 8004e36:	4814      	ldr	r0, [pc, #80]	; (8004e88 <SystemClock_Config+0x11c>)
 8004e38:	f000 f82a 	bl	8004e90 <_Error_Handler>
	}

	/**Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e3c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004e40:	f7fd fdca 	bl	80029d8 <HAL_PWREx_ControlVoltageScaling>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <SystemClock_Config+0xe6>
			!= HAL_OK) {
		_Error_Handler(__FILE__, __LINE__);
 8004e4a:	21d1      	movs	r1, #209	; 0xd1
 8004e4c:	480e      	ldr	r0, [pc, #56]	; (8004e88 <SystemClock_Config+0x11c>)
 8004e4e:	f000 f81f 	bl	8004e90 <_Error_Handler>
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8004e52:	f7fe fb41 	bl	80034d8 <HAL_RCC_GetHCLKFreq>
 8004e56:	4602      	mov	r2, r0
 8004e58:	4b0c      	ldr	r3, [pc, #48]	; (8004e8c <SystemClock_Config+0x120>)
 8004e5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e5e:	099b      	lsrs	r3, r3, #6
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7fc fe2c 	bl	8001abe <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004e66:	2004      	movs	r0, #4
 8004e68:	f7fc fe36 	bl	8001ad8 <HAL_SYSTICK_CLKSourceConfig>

	/**Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8004e6c:	f7fe feae 	bl	8003bcc <HAL_RCCEx_EnableMSIPLLMode>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004e70:	2200      	movs	r2, #0
 8004e72:	2100      	movs	r1, #0
 8004e74:	f04f 30ff 	mov.w	r0, #4294967295
 8004e78:	f7fc fe05 	bl	8001a86 <HAL_NVIC_SetPriority>
}
 8004e7c:	bf00      	nop
 8004e7e:	37e0      	adds	r7, #224	; 0xe0
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	40021000 	.word	0x40021000
 8004e88:	080061e0 	.word	0x080061e0
 8004e8c:	10624dd3 	.word	0x10624dd3

08004e90 <_Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void _Error_Handler(char * file, int line) {
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 8004e9a:	e7fe      	b.n	8004e9a <_Error_Handler+0xa>

08004e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ea2:	4b24      	ldr	r3, [pc, #144]	; (8004f34 <HAL_MspInit+0x98>)
 8004ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ea6:	4a23      	ldr	r2, [pc, #140]	; (8004f34 <HAL_MspInit+0x98>)
 8004ea8:	f043 0301 	orr.w	r3, r3, #1
 8004eac:	6613      	str	r3, [r2, #96]	; 0x60
 8004eae:	4b21      	ldr	r3, [pc, #132]	; (8004f34 <HAL_MspInit+0x98>)
 8004eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	607b      	str	r3, [r7, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004eba:	4b1e      	ldr	r3, [pc, #120]	; (8004f34 <HAL_MspInit+0x98>)
 8004ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ebe:	4a1d      	ldr	r2, [pc, #116]	; (8004f34 <HAL_MspInit+0x98>)
 8004ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec4:	6593      	str	r3, [r2, #88]	; 0x58
 8004ec6:	4b1b      	ldr	r3, [pc, #108]	; (8004f34 <HAL_MspInit+0x98>)
 8004ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ece:	603b      	str	r3, [r7, #0]
 8004ed0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ed2:	2003      	movs	r0, #3
 8004ed4:	f7fc fdcc 	bl	8001a70 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8004ed8:	2200      	movs	r2, #0
 8004eda:	2100      	movs	r1, #0
 8004edc:	f06f 000b 	mvn.w	r0, #11
 8004ee0:	f7fc fdd1 	bl	8001a86 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	f06f 000a 	mvn.w	r0, #10
 8004eec:	f7fc fdcb 	bl	8001a86 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	f06f 0009 	mvn.w	r0, #9
 8004ef8:	f7fc fdc5 	bl	8001a86 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8004efc:	2200      	movs	r2, #0
 8004efe:	2100      	movs	r1, #0
 8004f00:	f06f 0004 	mvn.w	r0, #4
 8004f04:	f7fc fdbf 	bl	8001a86 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004f08:	2200      	movs	r2, #0
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	f06f 0003 	mvn.w	r0, #3
 8004f10:	f7fc fdb9 	bl	8001a86 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8004f14:	2200      	movs	r2, #0
 8004f16:	2100      	movs	r1, #0
 8004f18:	f06f 0001 	mvn.w	r0, #1
 8004f1c:	f7fc fdb3 	bl	8001a86 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004f20:	2200      	movs	r2, #0
 8004f22:	2100      	movs	r1, #0
 8004f24:	f04f 30ff 	mov.w	r0, #4294967295
 8004f28:	f7fc fdad 	bl	8001a86 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f2c:	bf00      	nop
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	40021000 	.word	0x40021000

08004f38 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004f3c:	bf00      	nop
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8004f46:	b480      	push	{r7}
 8004f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f4a:	e7fe      	b.n	8004f4a <HardFault_Handler+0x4>

08004f4c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f50:	e7fe      	b.n	8004f50 <MemManage_Handler+0x4>

08004f52 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8004f52:	b480      	push	{r7}
 8004f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f56:	e7fe      	b.n	8004f56 <BusFault_Handler+0x4>

08004f58 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f5c:	e7fe      	b.n	8004f5c <UsageFault_Handler+0x4>

08004f5e <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f62:	bf00      	nop
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f70:	bf00      	nop
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f7e:	bf00      	nop
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f8c:	f7fc fc86 	bl	800189c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8004f90:	f7fc fdbe 	bl	8001b10 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f94:	bf00      	nop
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	617b      	str	r3, [r7, #20]
 8004fa8:	e00a      	b.n	8004fc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004faa:	f3af 8000 	nop.w
 8004fae:	4601      	mov	r1, r0
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	60ba      	str	r2, [r7, #8]
 8004fb6:	b2ca      	uxtb	r2, r1
 8004fb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	dbf0      	blt.n	8004faa <_read+0x12>
	}

return len;
 8004fc8:	687b      	ldr	r3, [r7, #4]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <_write>:

int _write(int file, char *ptr, int len)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b086      	sub	sp, #24
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	60f8      	str	r0, [r7, #12]
 8004fda:	60b9      	str	r1, [r7, #8]
 8004fdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fde:	2300      	movs	r3, #0
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	e009      	b.n	8004ff8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	60ba      	str	r2, [r7, #8]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7ff fe31 	bl	8004c54 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	dbf1      	blt.n	8004fe4 <_write+0x12>
	}
	return len;
 8005000:	687b      	ldr	r3, [r7, #4]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3718      	adds	r7, #24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
	...

0800500c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
	extern char end __asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005014:	4b11      	ldr	r3, [pc, #68]	; (800505c <_sbrk+0x50>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d102      	bne.n	8005022 <_sbrk+0x16>
		heap_end = &end;
 800501c:	4b0f      	ldr	r3, [pc, #60]	; (800505c <_sbrk+0x50>)
 800501e:	4a10      	ldr	r2, [pc, #64]	; (8005060 <_sbrk+0x54>)
 8005020:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005022:	4b0e      	ldr	r3, [pc, #56]	; (800505c <_sbrk+0x50>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005028:	4b0c      	ldr	r3, [pc, #48]	; (800505c <_sbrk+0x50>)
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4413      	add	r3, r2
 8005030:	466a      	mov	r2, sp
 8005032:	4293      	cmp	r3, r2
 8005034:	d907      	bls.n	8005046 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8005036:	f000 f905 	bl	8005244 <__errno>
 800503a:	4602      	mov	r2, r0
 800503c:	230c      	movs	r3, #12
 800503e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005040:	f04f 33ff 	mov.w	r3, #4294967295
 8005044:	e006      	b.n	8005054 <_sbrk+0x48>
	}

	heap_end += incr;
 8005046:	4b05      	ldr	r3, [pc, #20]	; (800505c <_sbrk+0x50>)
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4413      	add	r3, r2
 800504e:	4a03      	ldr	r2, [pc, #12]	; (800505c <_sbrk+0x50>)
 8005050:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005052:	68fb      	ldr	r3, [r7, #12]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	20000088 	.word	0x20000088
 8005060:	200001b8 	.word	0x200001b8

08005064 <_close>:

int _close(int file)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
	return -1;
 800506c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005070:	4618      	mov	r0, r3
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800508c:	605a      	str	r2, [r3, #4]
	return 0;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <_isatty>:

int _isatty(int file)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
	return 1;
 80050a4:	2301      	movs	r3, #1
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b085      	sub	sp, #20
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	60b9      	str	r1, [r7, #8]
 80050bc:	607a      	str	r2, [r7, #4]
	return 0;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80050d0:	4b17      	ldr	r3, [pc, #92]	; (8005130 <SystemInit+0x64>)
 80050d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d6:	4a16      	ldr	r2, [pc, #88]	; (8005130 <SystemInit+0x64>)
 80050d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80050e0:	4b14      	ldr	r3, [pc, #80]	; (8005134 <SystemInit+0x68>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a13      	ldr	r2, [pc, #76]	; (8005134 <SystemInit+0x68>)
 80050e6:	f043 0301 	orr.w	r3, r3, #1
 80050ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80050ec:	4b11      	ldr	r3, [pc, #68]	; (8005134 <SystemInit+0x68>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80050f2:	4b10      	ldr	r3, [pc, #64]	; (8005134 <SystemInit+0x68>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a0f      	ldr	r2, [pc, #60]	; (8005134 <SystemInit+0x68>)
 80050f8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80050fc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005100:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005102:	4b0c      	ldr	r3, [pc, #48]	; (8005134 <SystemInit+0x68>)
 8005104:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005108:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800510a:	4b0a      	ldr	r3, [pc, #40]	; (8005134 <SystemInit+0x68>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a09      	ldr	r2, [pc, #36]	; (8005134 <SystemInit+0x68>)
 8005110:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005114:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005116:	4b07      	ldr	r3, [pc, #28]	; (8005134 <SystemInit+0x68>)
 8005118:	2200      	movs	r2, #0
 800511a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800511c:	4b04      	ldr	r3, [pc, #16]	; (8005130 <SystemInit+0x64>)
 800511e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005122:	609a      	str	r2, [r3, #8]
#endif
}
 8005124:	bf00      	nop
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	e000ed00 	.word	0xe000ed00
 8005134:	40021000 	.word	0x40021000

08005138 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800513c:	4b15      	ldr	r3, [pc, #84]	; (8005194 <MX_USART2_UART_Init+0x5c>)
 800513e:	4a16      	ldr	r2, [pc, #88]	; (8005198 <MX_USART2_UART_Init+0x60>)
 8005140:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005142:	4b14      	ldr	r3, [pc, #80]	; (8005194 <MX_USART2_UART_Init+0x5c>)
 8005144:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005148:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800514a:	4b12      	ldr	r3, [pc, #72]	; (8005194 <MX_USART2_UART_Init+0x5c>)
 800514c:	2200      	movs	r2, #0
 800514e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005150:	4b10      	ldr	r3, [pc, #64]	; (8005194 <MX_USART2_UART_Init+0x5c>)
 8005152:	2200      	movs	r2, #0
 8005154:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005156:	4b0f      	ldr	r3, [pc, #60]	; (8005194 <MX_USART2_UART_Init+0x5c>)
 8005158:	2200      	movs	r2, #0
 800515a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800515c:	4b0d      	ldr	r3, [pc, #52]	; (8005194 <MX_USART2_UART_Init+0x5c>)
 800515e:	220c      	movs	r2, #12
 8005160:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005162:	4b0c      	ldr	r3, [pc, #48]	; (8005194 <MX_USART2_UART_Init+0x5c>)
 8005164:	2200      	movs	r2, #0
 8005166:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005168:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <MX_USART2_UART_Init+0x5c>)
 800516a:	2200      	movs	r2, #0
 800516c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800516e:	4b09      	ldr	r3, [pc, #36]	; (8005194 <MX_USART2_UART_Init+0x5c>)
 8005170:	2200      	movs	r2, #0
 8005172:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005174:	4b07      	ldr	r3, [pc, #28]	; (8005194 <MX_USART2_UART_Init+0x5c>)
 8005176:	2200      	movs	r2, #0
 8005178:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800517a:	4806      	ldr	r0, [pc, #24]	; (8005194 <MX_USART2_UART_Init+0x5c>)
 800517c:	f7fe ff04 	bl	8003f88 <HAL_UART_Init>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <MX_USART2_UART_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005186:	2144      	movs	r1, #68	; 0x44
 8005188:	4804      	ldr	r0, [pc, #16]	; (800519c <MX_USART2_UART_Init+0x64>)
 800518a:	f7ff fe81 	bl	8004e90 <_Error_Handler>
  }

}
 800518e:	bf00      	nop
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20000138 	.word	0x20000138
 8005198:	40004400 	.word	0x40004400
 800519c:	08006238 	.word	0x08006238

080051a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b088      	sub	sp, #32
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a11      	ldr	r2, [pc, #68]	; (80051f4 <HAL_UART_MspInit+0x54>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d11c      	bne.n	80051ec <HAL_UART_MspInit+0x4c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80051b2:	4b11      	ldr	r3, [pc, #68]	; (80051f8 <HAL_UART_MspInit+0x58>)
 80051b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b6:	4a10      	ldr	r2, [pc, #64]	; (80051f8 <HAL_UART_MspInit+0x58>)
 80051b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051bc:	6593      	str	r3, [r2, #88]	; 0x58
 80051be:	4b0e      	ldr	r3, [pc, #56]	; (80051f8 <HAL_UART_MspInit+0x58>)
 80051c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c6:	60bb      	str	r3, [r7, #8]
 80051c8:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80051ca:	230c      	movs	r3, #12
 80051cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ce:	2302      	movs	r3, #2
 80051d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051d2:	2301      	movs	r3, #1
 80051d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051d6:	2303      	movs	r3, #3
 80051d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80051da:	2307      	movs	r3, #7
 80051dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051de:	f107 030c 	add.w	r3, r7, #12
 80051e2:	4619      	mov	r1, r3
 80051e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051e8:	f7fc fca0 	bl	8001b2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80051ec:	bf00      	nop
 80051ee:	3720      	adds	r7, #32
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	40004400 	.word	0x40004400
 80051f8:	40021000 	.word	0x40021000

080051fc <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80051fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80051fe:	e003      	b.n	8005208 <LoopCopyDataInit>

08005200 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005200:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <LoopForever+0x2>)
	ldr	r3, [r3, r1]
 8005202:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005204:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005206:	3104      	adds	r1, #4

08005208 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005208:	480a      	ldr	r0, [pc, #40]	; (8005234 <LoopForever+0x6>)
	ldr	r3, =_edata
 800520a:	4b0b      	ldr	r3, [pc, #44]	; (8005238 <LoopForever+0xa>)
	adds	r2, r0, r1
 800520c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800520e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005210:	d3f6      	bcc.n	8005200 <CopyDataInit>
	ldr	r2, =_sbss
 8005212:	4a0a      	ldr	r2, [pc, #40]	; (800523c <LoopForever+0xe>)
	b	LoopFillZerobss
 8005214:	e002      	b.n	800521c <LoopFillZerobss>

08005216 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs r3, #0
 8005216:	2300      	movs	r3, #0
 	str  r3, [r2]
 8005218:	6013      	str	r3, [r2, #0]
	adds r2, r2, #4
 800521a:	3204      	adds	r2, #4

0800521c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800521c:	4b08      	ldr	r3, [pc, #32]	; (8005240 <LoopForever+0x12>)
	cmp	r2, r3
 800521e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005220:	d3f9      	bcc.n	8005216 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005222:	f7ff ff53 	bl	80050cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005226:	f000 f813 	bl	8005250 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800522a:	f7ff fd25 	bl	8004c78 <main>

0800522e <LoopForever>:

LoopForever:
    b LoopForever
 800522e:	e7fe      	b.n	800522e <LoopForever>
	ldr	r3, =_sidata
 8005230:	080062f0 	.word	0x080062f0
	ldr	r0, =_sdata
 8005234:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005238:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 800523c:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8005240:	200001b4 	.word	0x200001b4

08005244 <__errno>:
 8005244:	4b01      	ldr	r3, [pc, #4]	; (800524c <__errno+0x8>)
 8005246:	6818      	ldr	r0, [r3, #0]
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	20000004 	.word	0x20000004

08005250 <__libc_init_array>:
 8005250:	b570      	push	{r4, r5, r6, lr}
 8005252:	4e0d      	ldr	r6, [pc, #52]	; (8005288 <__libc_init_array+0x38>)
 8005254:	4c0d      	ldr	r4, [pc, #52]	; (800528c <__libc_init_array+0x3c>)
 8005256:	1ba4      	subs	r4, r4, r6
 8005258:	10a4      	asrs	r4, r4, #2
 800525a:	2500      	movs	r5, #0
 800525c:	42a5      	cmp	r5, r4
 800525e:	d109      	bne.n	8005274 <__libc_init_array+0x24>
 8005260:	4e0b      	ldr	r6, [pc, #44]	; (8005290 <__libc_init_array+0x40>)
 8005262:	4c0c      	ldr	r4, [pc, #48]	; (8005294 <__libc_init_array+0x44>)
 8005264:	f000 ff68 	bl	8006138 <_init>
 8005268:	1ba4      	subs	r4, r4, r6
 800526a:	10a4      	asrs	r4, r4, #2
 800526c:	2500      	movs	r5, #0
 800526e:	42a5      	cmp	r5, r4
 8005270:	d105      	bne.n	800527e <__libc_init_array+0x2e>
 8005272:	bd70      	pop	{r4, r5, r6, pc}
 8005274:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005278:	4798      	blx	r3
 800527a:	3501      	adds	r5, #1
 800527c:	e7ee      	b.n	800525c <__libc_init_array+0xc>
 800527e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005282:	4798      	blx	r3
 8005284:	3501      	adds	r5, #1
 8005286:	e7f2      	b.n	800526e <__libc_init_array+0x1e>
 8005288:	080062e8 	.word	0x080062e8
 800528c:	080062e8 	.word	0x080062e8
 8005290:	080062e8 	.word	0x080062e8
 8005294:	080062ec 	.word	0x080062ec

08005298 <memset>:
 8005298:	4402      	add	r2, r0
 800529a:	4603      	mov	r3, r0
 800529c:	4293      	cmp	r3, r2
 800529e:	d100      	bne.n	80052a2 <memset+0xa>
 80052a0:	4770      	bx	lr
 80052a2:	f803 1b01 	strb.w	r1, [r3], #1
 80052a6:	e7f9      	b.n	800529c <memset+0x4>

080052a8 <iprintf>:
 80052a8:	b40f      	push	{r0, r1, r2, r3}
 80052aa:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <iprintf+0x2c>)
 80052ac:	b513      	push	{r0, r1, r4, lr}
 80052ae:	681c      	ldr	r4, [r3, #0]
 80052b0:	b124      	cbz	r4, 80052bc <iprintf+0x14>
 80052b2:	69a3      	ldr	r3, [r4, #24]
 80052b4:	b913      	cbnz	r3, 80052bc <iprintf+0x14>
 80052b6:	4620      	mov	r0, r4
 80052b8:	f000 fa22 	bl	8005700 <__sinit>
 80052bc:	ab05      	add	r3, sp, #20
 80052be:	9a04      	ldr	r2, [sp, #16]
 80052c0:	68a1      	ldr	r1, [r4, #8]
 80052c2:	9301      	str	r3, [sp, #4]
 80052c4:	4620      	mov	r0, r4
 80052c6:	f000 fbdb 	bl	8005a80 <_vfiprintf_r>
 80052ca:	b002      	add	sp, #8
 80052cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052d0:	b004      	add	sp, #16
 80052d2:	4770      	bx	lr
 80052d4:	20000004 	.word	0x20000004

080052d8 <_puts_r>:
 80052d8:	b570      	push	{r4, r5, r6, lr}
 80052da:	460e      	mov	r6, r1
 80052dc:	4605      	mov	r5, r0
 80052de:	b118      	cbz	r0, 80052e8 <_puts_r+0x10>
 80052e0:	6983      	ldr	r3, [r0, #24]
 80052e2:	b90b      	cbnz	r3, 80052e8 <_puts_r+0x10>
 80052e4:	f000 fa0c 	bl	8005700 <__sinit>
 80052e8:	69ab      	ldr	r3, [r5, #24]
 80052ea:	68ac      	ldr	r4, [r5, #8]
 80052ec:	b913      	cbnz	r3, 80052f4 <_puts_r+0x1c>
 80052ee:	4628      	mov	r0, r5
 80052f0:	f000 fa06 	bl	8005700 <__sinit>
 80052f4:	4b23      	ldr	r3, [pc, #140]	; (8005384 <_puts_r+0xac>)
 80052f6:	429c      	cmp	r4, r3
 80052f8:	d117      	bne.n	800532a <_puts_r+0x52>
 80052fa:	686c      	ldr	r4, [r5, #4]
 80052fc:	89a3      	ldrh	r3, [r4, #12]
 80052fe:	071b      	lsls	r3, r3, #28
 8005300:	d51d      	bpl.n	800533e <_puts_r+0x66>
 8005302:	6923      	ldr	r3, [r4, #16]
 8005304:	b1db      	cbz	r3, 800533e <_puts_r+0x66>
 8005306:	3e01      	subs	r6, #1
 8005308:	68a3      	ldr	r3, [r4, #8]
 800530a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800530e:	3b01      	subs	r3, #1
 8005310:	60a3      	str	r3, [r4, #8]
 8005312:	b9e9      	cbnz	r1, 8005350 <_puts_r+0x78>
 8005314:	2b00      	cmp	r3, #0
 8005316:	da2e      	bge.n	8005376 <_puts_r+0x9e>
 8005318:	4622      	mov	r2, r4
 800531a:	210a      	movs	r1, #10
 800531c:	4628      	mov	r0, r5
 800531e:	f000 f83f 	bl	80053a0 <__swbuf_r>
 8005322:	3001      	adds	r0, #1
 8005324:	d011      	beq.n	800534a <_puts_r+0x72>
 8005326:	200a      	movs	r0, #10
 8005328:	e011      	b.n	800534e <_puts_r+0x76>
 800532a:	4b17      	ldr	r3, [pc, #92]	; (8005388 <_puts_r+0xb0>)
 800532c:	429c      	cmp	r4, r3
 800532e:	d101      	bne.n	8005334 <_puts_r+0x5c>
 8005330:	68ac      	ldr	r4, [r5, #8]
 8005332:	e7e3      	b.n	80052fc <_puts_r+0x24>
 8005334:	4b15      	ldr	r3, [pc, #84]	; (800538c <_puts_r+0xb4>)
 8005336:	429c      	cmp	r4, r3
 8005338:	bf08      	it	eq
 800533a:	68ec      	ldreq	r4, [r5, #12]
 800533c:	e7de      	b.n	80052fc <_puts_r+0x24>
 800533e:	4621      	mov	r1, r4
 8005340:	4628      	mov	r0, r5
 8005342:	f000 f87f 	bl	8005444 <__swsetup_r>
 8005346:	2800      	cmp	r0, #0
 8005348:	d0dd      	beq.n	8005306 <_puts_r+0x2e>
 800534a:	f04f 30ff 	mov.w	r0, #4294967295
 800534e:	bd70      	pop	{r4, r5, r6, pc}
 8005350:	2b00      	cmp	r3, #0
 8005352:	da04      	bge.n	800535e <_puts_r+0x86>
 8005354:	69a2      	ldr	r2, [r4, #24]
 8005356:	429a      	cmp	r2, r3
 8005358:	dc06      	bgt.n	8005368 <_puts_r+0x90>
 800535a:	290a      	cmp	r1, #10
 800535c:	d004      	beq.n	8005368 <_puts_r+0x90>
 800535e:	6823      	ldr	r3, [r4, #0]
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	6022      	str	r2, [r4, #0]
 8005364:	7019      	strb	r1, [r3, #0]
 8005366:	e7cf      	b.n	8005308 <_puts_r+0x30>
 8005368:	4622      	mov	r2, r4
 800536a:	4628      	mov	r0, r5
 800536c:	f000 f818 	bl	80053a0 <__swbuf_r>
 8005370:	3001      	adds	r0, #1
 8005372:	d1c9      	bne.n	8005308 <_puts_r+0x30>
 8005374:	e7e9      	b.n	800534a <_puts_r+0x72>
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	200a      	movs	r0, #10
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	6022      	str	r2, [r4, #0]
 800537e:	7018      	strb	r0, [r3, #0]
 8005380:	e7e5      	b.n	800534e <_puts_r+0x76>
 8005382:	bf00      	nop
 8005384:	0800626c 	.word	0x0800626c
 8005388:	0800628c 	.word	0x0800628c
 800538c:	0800624c 	.word	0x0800624c

08005390 <puts>:
 8005390:	4b02      	ldr	r3, [pc, #8]	; (800539c <puts+0xc>)
 8005392:	4601      	mov	r1, r0
 8005394:	6818      	ldr	r0, [r3, #0]
 8005396:	f7ff bf9f 	b.w	80052d8 <_puts_r>
 800539a:	bf00      	nop
 800539c:	20000004 	.word	0x20000004

080053a0 <__swbuf_r>:
 80053a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a2:	460e      	mov	r6, r1
 80053a4:	4614      	mov	r4, r2
 80053a6:	4605      	mov	r5, r0
 80053a8:	b118      	cbz	r0, 80053b2 <__swbuf_r+0x12>
 80053aa:	6983      	ldr	r3, [r0, #24]
 80053ac:	b90b      	cbnz	r3, 80053b2 <__swbuf_r+0x12>
 80053ae:	f000 f9a7 	bl	8005700 <__sinit>
 80053b2:	4b21      	ldr	r3, [pc, #132]	; (8005438 <__swbuf_r+0x98>)
 80053b4:	429c      	cmp	r4, r3
 80053b6:	d12a      	bne.n	800540e <__swbuf_r+0x6e>
 80053b8:	686c      	ldr	r4, [r5, #4]
 80053ba:	69a3      	ldr	r3, [r4, #24]
 80053bc:	60a3      	str	r3, [r4, #8]
 80053be:	89a3      	ldrh	r3, [r4, #12]
 80053c0:	071a      	lsls	r2, r3, #28
 80053c2:	d52e      	bpl.n	8005422 <__swbuf_r+0x82>
 80053c4:	6923      	ldr	r3, [r4, #16]
 80053c6:	b363      	cbz	r3, 8005422 <__swbuf_r+0x82>
 80053c8:	6923      	ldr	r3, [r4, #16]
 80053ca:	6820      	ldr	r0, [r4, #0]
 80053cc:	1ac0      	subs	r0, r0, r3
 80053ce:	6963      	ldr	r3, [r4, #20]
 80053d0:	b2f6      	uxtb	r6, r6
 80053d2:	4283      	cmp	r3, r0
 80053d4:	4637      	mov	r7, r6
 80053d6:	dc04      	bgt.n	80053e2 <__swbuf_r+0x42>
 80053d8:	4621      	mov	r1, r4
 80053da:	4628      	mov	r0, r5
 80053dc:	f000 f926 	bl	800562c <_fflush_r>
 80053e0:	bb28      	cbnz	r0, 800542e <__swbuf_r+0x8e>
 80053e2:	68a3      	ldr	r3, [r4, #8]
 80053e4:	3b01      	subs	r3, #1
 80053e6:	60a3      	str	r3, [r4, #8]
 80053e8:	6823      	ldr	r3, [r4, #0]
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	6022      	str	r2, [r4, #0]
 80053ee:	701e      	strb	r6, [r3, #0]
 80053f0:	6963      	ldr	r3, [r4, #20]
 80053f2:	3001      	adds	r0, #1
 80053f4:	4283      	cmp	r3, r0
 80053f6:	d004      	beq.n	8005402 <__swbuf_r+0x62>
 80053f8:	89a3      	ldrh	r3, [r4, #12]
 80053fa:	07db      	lsls	r3, r3, #31
 80053fc:	d519      	bpl.n	8005432 <__swbuf_r+0x92>
 80053fe:	2e0a      	cmp	r6, #10
 8005400:	d117      	bne.n	8005432 <__swbuf_r+0x92>
 8005402:	4621      	mov	r1, r4
 8005404:	4628      	mov	r0, r5
 8005406:	f000 f911 	bl	800562c <_fflush_r>
 800540a:	b190      	cbz	r0, 8005432 <__swbuf_r+0x92>
 800540c:	e00f      	b.n	800542e <__swbuf_r+0x8e>
 800540e:	4b0b      	ldr	r3, [pc, #44]	; (800543c <__swbuf_r+0x9c>)
 8005410:	429c      	cmp	r4, r3
 8005412:	d101      	bne.n	8005418 <__swbuf_r+0x78>
 8005414:	68ac      	ldr	r4, [r5, #8]
 8005416:	e7d0      	b.n	80053ba <__swbuf_r+0x1a>
 8005418:	4b09      	ldr	r3, [pc, #36]	; (8005440 <__swbuf_r+0xa0>)
 800541a:	429c      	cmp	r4, r3
 800541c:	bf08      	it	eq
 800541e:	68ec      	ldreq	r4, [r5, #12]
 8005420:	e7cb      	b.n	80053ba <__swbuf_r+0x1a>
 8005422:	4621      	mov	r1, r4
 8005424:	4628      	mov	r0, r5
 8005426:	f000 f80d 	bl	8005444 <__swsetup_r>
 800542a:	2800      	cmp	r0, #0
 800542c:	d0cc      	beq.n	80053c8 <__swbuf_r+0x28>
 800542e:	f04f 37ff 	mov.w	r7, #4294967295
 8005432:	4638      	mov	r0, r7
 8005434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005436:	bf00      	nop
 8005438:	0800626c 	.word	0x0800626c
 800543c:	0800628c 	.word	0x0800628c
 8005440:	0800624c 	.word	0x0800624c

08005444 <__swsetup_r>:
 8005444:	4b32      	ldr	r3, [pc, #200]	; (8005510 <__swsetup_r+0xcc>)
 8005446:	b570      	push	{r4, r5, r6, lr}
 8005448:	681d      	ldr	r5, [r3, #0]
 800544a:	4606      	mov	r6, r0
 800544c:	460c      	mov	r4, r1
 800544e:	b125      	cbz	r5, 800545a <__swsetup_r+0x16>
 8005450:	69ab      	ldr	r3, [r5, #24]
 8005452:	b913      	cbnz	r3, 800545a <__swsetup_r+0x16>
 8005454:	4628      	mov	r0, r5
 8005456:	f000 f953 	bl	8005700 <__sinit>
 800545a:	4b2e      	ldr	r3, [pc, #184]	; (8005514 <__swsetup_r+0xd0>)
 800545c:	429c      	cmp	r4, r3
 800545e:	d10f      	bne.n	8005480 <__swsetup_r+0x3c>
 8005460:	686c      	ldr	r4, [r5, #4]
 8005462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005466:	b29a      	uxth	r2, r3
 8005468:	0715      	lsls	r5, r2, #28
 800546a:	d42c      	bmi.n	80054c6 <__swsetup_r+0x82>
 800546c:	06d0      	lsls	r0, r2, #27
 800546e:	d411      	bmi.n	8005494 <__swsetup_r+0x50>
 8005470:	2209      	movs	r2, #9
 8005472:	6032      	str	r2, [r6, #0]
 8005474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005478:	81a3      	strh	r3, [r4, #12]
 800547a:	f04f 30ff 	mov.w	r0, #4294967295
 800547e:	e03e      	b.n	80054fe <__swsetup_r+0xba>
 8005480:	4b25      	ldr	r3, [pc, #148]	; (8005518 <__swsetup_r+0xd4>)
 8005482:	429c      	cmp	r4, r3
 8005484:	d101      	bne.n	800548a <__swsetup_r+0x46>
 8005486:	68ac      	ldr	r4, [r5, #8]
 8005488:	e7eb      	b.n	8005462 <__swsetup_r+0x1e>
 800548a:	4b24      	ldr	r3, [pc, #144]	; (800551c <__swsetup_r+0xd8>)
 800548c:	429c      	cmp	r4, r3
 800548e:	bf08      	it	eq
 8005490:	68ec      	ldreq	r4, [r5, #12]
 8005492:	e7e6      	b.n	8005462 <__swsetup_r+0x1e>
 8005494:	0751      	lsls	r1, r2, #29
 8005496:	d512      	bpl.n	80054be <__swsetup_r+0x7a>
 8005498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800549a:	b141      	cbz	r1, 80054ae <__swsetup_r+0x6a>
 800549c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054a0:	4299      	cmp	r1, r3
 80054a2:	d002      	beq.n	80054aa <__swsetup_r+0x66>
 80054a4:	4630      	mov	r0, r6
 80054a6:	f000 fa19 	bl	80058dc <_free_r>
 80054aa:	2300      	movs	r3, #0
 80054ac:	6363      	str	r3, [r4, #52]	; 0x34
 80054ae:	89a3      	ldrh	r3, [r4, #12]
 80054b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80054b4:	81a3      	strh	r3, [r4, #12]
 80054b6:	2300      	movs	r3, #0
 80054b8:	6063      	str	r3, [r4, #4]
 80054ba:	6923      	ldr	r3, [r4, #16]
 80054bc:	6023      	str	r3, [r4, #0]
 80054be:	89a3      	ldrh	r3, [r4, #12]
 80054c0:	f043 0308 	orr.w	r3, r3, #8
 80054c4:	81a3      	strh	r3, [r4, #12]
 80054c6:	6923      	ldr	r3, [r4, #16]
 80054c8:	b94b      	cbnz	r3, 80054de <__swsetup_r+0x9a>
 80054ca:	89a3      	ldrh	r3, [r4, #12]
 80054cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80054d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054d4:	d003      	beq.n	80054de <__swsetup_r+0x9a>
 80054d6:	4621      	mov	r1, r4
 80054d8:	4630      	mov	r0, r6
 80054da:	f000 f9bf 	bl	800585c <__smakebuf_r>
 80054de:	89a2      	ldrh	r2, [r4, #12]
 80054e0:	f012 0301 	ands.w	r3, r2, #1
 80054e4:	d00c      	beq.n	8005500 <__swsetup_r+0xbc>
 80054e6:	2300      	movs	r3, #0
 80054e8:	60a3      	str	r3, [r4, #8]
 80054ea:	6963      	ldr	r3, [r4, #20]
 80054ec:	425b      	negs	r3, r3
 80054ee:	61a3      	str	r3, [r4, #24]
 80054f0:	6923      	ldr	r3, [r4, #16]
 80054f2:	b953      	cbnz	r3, 800550a <__swsetup_r+0xc6>
 80054f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054f8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80054fc:	d1ba      	bne.n	8005474 <__swsetup_r+0x30>
 80054fe:	bd70      	pop	{r4, r5, r6, pc}
 8005500:	0792      	lsls	r2, r2, #30
 8005502:	bf58      	it	pl
 8005504:	6963      	ldrpl	r3, [r4, #20]
 8005506:	60a3      	str	r3, [r4, #8]
 8005508:	e7f2      	b.n	80054f0 <__swsetup_r+0xac>
 800550a:	2000      	movs	r0, #0
 800550c:	e7f7      	b.n	80054fe <__swsetup_r+0xba>
 800550e:	bf00      	nop
 8005510:	20000004 	.word	0x20000004
 8005514:	0800626c 	.word	0x0800626c
 8005518:	0800628c 	.word	0x0800628c
 800551c:	0800624c 	.word	0x0800624c

08005520 <__sflush_r>:
 8005520:	898a      	ldrh	r2, [r1, #12]
 8005522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005526:	4605      	mov	r5, r0
 8005528:	0710      	lsls	r0, r2, #28
 800552a:	460c      	mov	r4, r1
 800552c:	d458      	bmi.n	80055e0 <__sflush_r+0xc0>
 800552e:	684b      	ldr	r3, [r1, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	dc05      	bgt.n	8005540 <__sflush_r+0x20>
 8005534:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005536:	2b00      	cmp	r3, #0
 8005538:	dc02      	bgt.n	8005540 <__sflush_r+0x20>
 800553a:	2000      	movs	r0, #0
 800553c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005540:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005542:	2e00      	cmp	r6, #0
 8005544:	d0f9      	beq.n	800553a <__sflush_r+0x1a>
 8005546:	2300      	movs	r3, #0
 8005548:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800554c:	682f      	ldr	r7, [r5, #0]
 800554e:	6a21      	ldr	r1, [r4, #32]
 8005550:	602b      	str	r3, [r5, #0]
 8005552:	d032      	beq.n	80055ba <__sflush_r+0x9a>
 8005554:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005556:	89a3      	ldrh	r3, [r4, #12]
 8005558:	075a      	lsls	r2, r3, #29
 800555a:	d505      	bpl.n	8005568 <__sflush_r+0x48>
 800555c:	6863      	ldr	r3, [r4, #4]
 800555e:	1ac0      	subs	r0, r0, r3
 8005560:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005562:	b10b      	cbz	r3, 8005568 <__sflush_r+0x48>
 8005564:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005566:	1ac0      	subs	r0, r0, r3
 8005568:	2300      	movs	r3, #0
 800556a:	4602      	mov	r2, r0
 800556c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800556e:	6a21      	ldr	r1, [r4, #32]
 8005570:	4628      	mov	r0, r5
 8005572:	47b0      	blx	r6
 8005574:	1c43      	adds	r3, r0, #1
 8005576:	89a3      	ldrh	r3, [r4, #12]
 8005578:	d106      	bne.n	8005588 <__sflush_r+0x68>
 800557a:	6829      	ldr	r1, [r5, #0]
 800557c:	291d      	cmp	r1, #29
 800557e:	d848      	bhi.n	8005612 <__sflush_r+0xf2>
 8005580:	4a29      	ldr	r2, [pc, #164]	; (8005628 <__sflush_r+0x108>)
 8005582:	40ca      	lsrs	r2, r1
 8005584:	07d6      	lsls	r6, r2, #31
 8005586:	d544      	bpl.n	8005612 <__sflush_r+0xf2>
 8005588:	2200      	movs	r2, #0
 800558a:	6062      	str	r2, [r4, #4]
 800558c:	04d9      	lsls	r1, r3, #19
 800558e:	6922      	ldr	r2, [r4, #16]
 8005590:	6022      	str	r2, [r4, #0]
 8005592:	d504      	bpl.n	800559e <__sflush_r+0x7e>
 8005594:	1c42      	adds	r2, r0, #1
 8005596:	d101      	bne.n	800559c <__sflush_r+0x7c>
 8005598:	682b      	ldr	r3, [r5, #0]
 800559a:	b903      	cbnz	r3, 800559e <__sflush_r+0x7e>
 800559c:	6560      	str	r0, [r4, #84]	; 0x54
 800559e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055a0:	602f      	str	r7, [r5, #0]
 80055a2:	2900      	cmp	r1, #0
 80055a4:	d0c9      	beq.n	800553a <__sflush_r+0x1a>
 80055a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055aa:	4299      	cmp	r1, r3
 80055ac:	d002      	beq.n	80055b4 <__sflush_r+0x94>
 80055ae:	4628      	mov	r0, r5
 80055b0:	f000 f994 	bl	80058dc <_free_r>
 80055b4:	2000      	movs	r0, #0
 80055b6:	6360      	str	r0, [r4, #52]	; 0x34
 80055b8:	e7c0      	b.n	800553c <__sflush_r+0x1c>
 80055ba:	2301      	movs	r3, #1
 80055bc:	4628      	mov	r0, r5
 80055be:	47b0      	blx	r6
 80055c0:	1c41      	adds	r1, r0, #1
 80055c2:	d1c8      	bne.n	8005556 <__sflush_r+0x36>
 80055c4:	682b      	ldr	r3, [r5, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0c5      	beq.n	8005556 <__sflush_r+0x36>
 80055ca:	2b1d      	cmp	r3, #29
 80055cc:	d001      	beq.n	80055d2 <__sflush_r+0xb2>
 80055ce:	2b16      	cmp	r3, #22
 80055d0:	d101      	bne.n	80055d6 <__sflush_r+0xb6>
 80055d2:	602f      	str	r7, [r5, #0]
 80055d4:	e7b1      	b.n	800553a <__sflush_r+0x1a>
 80055d6:	89a3      	ldrh	r3, [r4, #12]
 80055d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055dc:	81a3      	strh	r3, [r4, #12]
 80055de:	e7ad      	b.n	800553c <__sflush_r+0x1c>
 80055e0:	690f      	ldr	r7, [r1, #16]
 80055e2:	2f00      	cmp	r7, #0
 80055e4:	d0a9      	beq.n	800553a <__sflush_r+0x1a>
 80055e6:	0793      	lsls	r3, r2, #30
 80055e8:	680e      	ldr	r6, [r1, #0]
 80055ea:	bf08      	it	eq
 80055ec:	694b      	ldreq	r3, [r1, #20]
 80055ee:	600f      	str	r7, [r1, #0]
 80055f0:	bf18      	it	ne
 80055f2:	2300      	movne	r3, #0
 80055f4:	eba6 0807 	sub.w	r8, r6, r7
 80055f8:	608b      	str	r3, [r1, #8]
 80055fa:	f1b8 0f00 	cmp.w	r8, #0
 80055fe:	dd9c      	ble.n	800553a <__sflush_r+0x1a>
 8005600:	4643      	mov	r3, r8
 8005602:	463a      	mov	r2, r7
 8005604:	6a21      	ldr	r1, [r4, #32]
 8005606:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005608:	4628      	mov	r0, r5
 800560a:	47b0      	blx	r6
 800560c:	2800      	cmp	r0, #0
 800560e:	dc06      	bgt.n	800561e <__sflush_r+0xfe>
 8005610:	89a3      	ldrh	r3, [r4, #12]
 8005612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005616:	81a3      	strh	r3, [r4, #12]
 8005618:	f04f 30ff 	mov.w	r0, #4294967295
 800561c:	e78e      	b.n	800553c <__sflush_r+0x1c>
 800561e:	4407      	add	r7, r0
 8005620:	eba8 0800 	sub.w	r8, r8, r0
 8005624:	e7e9      	b.n	80055fa <__sflush_r+0xda>
 8005626:	bf00      	nop
 8005628:	20400001 	.word	0x20400001

0800562c <_fflush_r>:
 800562c:	b538      	push	{r3, r4, r5, lr}
 800562e:	690b      	ldr	r3, [r1, #16]
 8005630:	4605      	mov	r5, r0
 8005632:	460c      	mov	r4, r1
 8005634:	b1db      	cbz	r3, 800566e <_fflush_r+0x42>
 8005636:	b118      	cbz	r0, 8005640 <_fflush_r+0x14>
 8005638:	6983      	ldr	r3, [r0, #24]
 800563a:	b90b      	cbnz	r3, 8005640 <_fflush_r+0x14>
 800563c:	f000 f860 	bl	8005700 <__sinit>
 8005640:	4b0c      	ldr	r3, [pc, #48]	; (8005674 <_fflush_r+0x48>)
 8005642:	429c      	cmp	r4, r3
 8005644:	d109      	bne.n	800565a <_fflush_r+0x2e>
 8005646:	686c      	ldr	r4, [r5, #4]
 8005648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800564c:	b17b      	cbz	r3, 800566e <_fflush_r+0x42>
 800564e:	4621      	mov	r1, r4
 8005650:	4628      	mov	r0, r5
 8005652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005656:	f7ff bf63 	b.w	8005520 <__sflush_r>
 800565a:	4b07      	ldr	r3, [pc, #28]	; (8005678 <_fflush_r+0x4c>)
 800565c:	429c      	cmp	r4, r3
 800565e:	d101      	bne.n	8005664 <_fflush_r+0x38>
 8005660:	68ac      	ldr	r4, [r5, #8]
 8005662:	e7f1      	b.n	8005648 <_fflush_r+0x1c>
 8005664:	4b05      	ldr	r3, [pc, #20]	; (800567c <_fflush_r+0x50>)
 8005666:	429c      	cmp	r4, r3
 8005668:	bf08      	it	eq
 800566a:	68ec      	ldreq	r4, [r5, #12]
 800566c:	e7ec      	b.n	8005648 <_fflush_r+0x1c>
 800566e:	2000      	movs	r0, #0
 8005670:	bd38      	pop	{r3, r4, r5, pc}
 8005672:	bf00      	nop
 8005674:	0800626c 	.word	0x0800626c
 8005678:	0800628c 	.word	0x0800628c
 800567c:	0800624c 	.word	0x0800624c

08005680 <std>:
 8005680:	2300      	movs	r3, #0
 8005682:	b510      	push	{r4, lr}
 8005684:	4604      	mov	r4, r0
 8005686:	e9c0 3300 	strd	r3, r3, [r0]
 800568a:	6083      	str	r3, [r0, #8]
 800568c:	8181      	strh	r1, [r0, #12]
 800568e:	6643      	str	r3, [r0, #100]	; 0x64
 8005690:	81c2      	strh	r2, [r0, #14]
 8005692:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005696:	6183      	str	r3, [r0, #24]
 8005698:	4619      	mov	r1, r3
 800569a:	2208      	movs	r2, #8
 800569c:	305c      	adds	r0, #92	; 0x5c
 800569e:	f7ff fdfb 	bl	8005298 <memset>
 80056a2:	4b05      	ldr	r3, [pc, #20]	; (80056b8 <std+0x38>)
 80056a4:	6263      	str	r3, [r4, #36]	; 0x24
 80056a6:	4b05      	ldr	r3, [pc, #20]	; (80056bc <std+0x3c>)
 80056a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80056aa:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <std+0x40>)
 80056ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056ae:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <std+0x44>)
 80056b0:	6224      	str	r4, [r4, #32]
 80056b2:	6323      	str	r3, [r4, #48]	; 0x30
 80056b4:	bd10      	pop	{r4, pc}
 80056b6:	bf00      	nop
 80056b8:	08005fdd 	.word	0x08005fdd
 80056bc:	08005fff 	.word	0x08005fff
 80056c0:	08006037 	.word	0x08006037
 80056c4:	0800605b 	.word	0x0800605b

080056c8 <_cleanup_r>:
 80056c8:	4901      	ldr	r1, [pc, #4]	; (80056d0 <_cleanup_r+0x8>)
 80056ca:	f000 b885 	b.w	80057d8 <_fwalk_reent>
 80056ce:	bf00      	nop
 80056d0:	0800562d 	.word	0x0800562d

080056d4 <__sfmoreglue>:
 80056d4:	b570      	push	{r4, r5, r6, lr}
 80056d6:	1e4a      	subs	r2, r1, #1
 80056d8:	2568      	movs	r5, #104	; 0x68
 80056da:	4355      	muls	r5, r2
 80056dc:	460e      	mov	r6, r1
 80056de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80056e2:	f000 f949 	bl	8005978 <_malloc_r>
 80056e6:	4604      	mov	r4, r0
 80056e8:	b140      	cbz	r0, 80056fc <__sfmoreglue+0x28>
 80056ea:	2100      	movs	r1, #0
 80056ec:	e9c0 1600 	strd	r1, r6, [r0]
 80056f0:	300c      	adds	r0, #12
 80056f2:	60a0      	str	r0, [r4, #8]
 80056f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80056f8:	f7ff fdce 	bl	8005298 <memset>
 80056fc:	4620      	mov	r0, r4
 80056fe:	bd70      	pop	{r4, r5, r6, pc}

08005700 <__sinit>:
 8005700:	6983      	ldr	r3, [r0, #24]
 8005702:	b510      	push	{r4, lr}
 8005704:	4604      	mov	r4, r0
 8005706:	bb33      	cbnz	r3, 8005756 <__sinit+0x56>
 8005708:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800570c:	6503      	str	r3, [r0, #80]	; 0x50
 800570e:	4b12      	ldr	r3, [pc, #72]	; (8005758 <__sinit+0x58>)
 8005710:	4a12      	ldr	r2, [pc, #72]	; (800575c <__sinit+0x5c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6282      	str	r2, [r0, #40]	; 0x28
 8005716:	4298      	cmp	r0, r3
 8005718:	bf04      	itt	eq
 800571a:	2301      	moveq	r3, #1
 800571c:	6183      	streq	r3, [r0, #24]
 800571e:	f000 f81f 	bl	8005760 <__sfp>
 8005722:	6060      	str	r0, [r4, #4]
 8005724:	4620      	mov	r0, r4
 8005726:	f000 f81b 	bl	8005760 <__sfp>
 800572a:	60a0      	str	r0, [r4, #8]
 800572c:	4620      	mov	r0, r4
 800572e:	f000 f817 	bl	8005760 <__sfp>
 8005732:	2200      	movs	r2, #0
 8005734:	60e0      	str	r0, [r4, #12]
 8005736:	2104      	movs	r1, #4
 8005738:	6860      	ldr	r0, [r4, #4]
 800573a:	f7ff ffa1 	bl	8005680 <std>
 800573e:	2201      	movs	r2, #1
 8005740:	2109      	movs	r1, #9
 8005742:	68a0      	ldr	r0, [r4, #8]
 8005744:	f7ff ff9c 	bl	8005680 <std>
 8005748:	2202      	movs	r2, #2
 800574a:	2112      	movs	r1, #18
 800574c:	68e0      	ldr	r0, [r4, #12]
 800574e:	f7ff ff97 	bl	8005680 <std>
 8005752:	2301      	movs	r3, #1
 8005754:	61a3      	str	r3, [r4, #24]
 8005756:	bd10      	pop	{r4, pc}
 8005758:	08006248 	.word	0x08006248
 800575c:	080056c9 	.word	0x080056c9

08005760 <__sfp>:
 8005760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005762:	4b1b      	ldr	r3, [pc, #108]	; (80057d0 <__sfp+0x70>)
 8005764:	681e      	ldr	r6, [r3, #0]
 8005766:	69b3      	ldr	r3, [r6, #24]
 8005768:	4607      	mov	r7, r0
 800576a:	b913      	cbnz	r3, 8005772 <__sfp+0x12>
 800576c:	4630      	mov	r0, r6
 800576e:	f7ff ffc7 	bl	8005700 <__sinit>
 8005772:	3648      	adds	r6, #72	; 0x48
 8005774:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005778:	3b01      	subs	r3, #1
 800577a:	d503      	bpl.n	8005784 <__sfp+0x24>
 800577c:	6833      	ldr	r3, [r6, #0]
 800577e:	b133      	cbz	r3, 800578e <__sfp+0x2e>
 8005780:	6836      	ldr	r6, [r6, #0]
 8005782:	e7f7      	b.n	8005774 <__sfp+0x14>
 8005784:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005788:	b16d      	cbz	r5, 80057a6 <__sfp+0x46>
 800578a:	3468      	adds	r4, #104	; 0x68
 800578c:	e7f4      	b.n	8005778 <__sfp+0x18>
 800578e:	2104      	movs	r1, #4
 8005790:	4638      	mov	r0, r7
 8005792:	f7ff ff9f 	bl	80056d4 <__sfmoreglue>
 8005796:	6030      	str	r0, [r6, #0]
 8005798:	2800      	cmp	r0, #0
 800579a:	d1f1      	bne.n	8005780 <__sfp+0x20>
 800579c:	230c      	movs	r3, #12
 800579e:	603b      	str	r3, [r7, #0]
 80057a0:	4604      	mov	r4, r0
 80057a2:	4620      	mov	r0, r4
 80057a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057a6:	4b0b      	ldr	r3, [pc, #44]	; (80057d4 <__sfp+0x74>)
 80057a8:	6665      	str	r5, [r4, #100]	; 0x64
 80057aa:	e9c4 5500 	strd	r5, r5, [r4]
 80057ae:	60a5      	str	r5, [r4, #8]
 80057b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80057b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80057b8:	2208      	movs	r2, #8
 80057ba:	4629      	mov	r1, r5
 80057bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80057c0:	f7ff fd6a 	bl	8005298 <memset>
 80057c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80057c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80057cc:	e7e9      	b.n	80057a2 <__sfp+0x42>
 80057ce:	bf00      	nop
 80057d0:	08006248 	.word	0x08006248
 80057d4:	ffff0001 	.word	0xffff0001

080057d8 <_fwalk_reent>:
 80057d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057dc:	4680      	mov	r8, r0
 80057de:	4689      	mov	r9, r1
 80057e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80057e4:	2600      	movs	r6, #0
 80057e6:	b914      	cbnz	r4, 80057ee <_fwalk_reent+0x16>
 80057e8:	4630      	mov	r0, r6
 80057ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057ee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80057f2:	3f01      	subs	r7, #1
 80057f4:	d501      	bpl.n	80057fa <_fwalk_reent+0x22>
 80057f6:	6824      	ldr	r4, [r4, #0]
 80057f8:	e7f5      	b.n	80057e6 <_fwalk_reent+0xe>
 80057fa:	89ab      	ldrh	r3, [r5, #12]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d907      	bls.n	8005810 <_fwalk_reent+0x38>
 8005800:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005804:	3301      	adds	r3, #1
 8005806:	d003      	beq.n	8005810 <_fwalk_reent+0x38>
 8005808:	4629      	mov	r1, r5
 800580a:	4640      	mov	r0, r8
 800580c:	47c8      	blx	r9
 800580e:	4306      	orrs	r6, r0
 8005810:	3568      	adds	r5, #104	; 0x68
 8005812:	e7ee      	b.n	80057f2 <_fwalk_reent+0x1a>

08005814 <__swhatbuf_r>:
 8005814:	b570      	push	{r4, r5, r6, lr}
 8005816:	460e      	mov	r6, r1
 8005818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800581c:	2900      	cmp	r1, #0
 800581e:	b096      	sub	sp, #88	; 0x58
 8005820:	4614      	mov	r4, r2
 8005822:	461d      	mov	r5, r3
 8005824:	da07      	bge.n	8005836 <__swhatbuf_r+0x22>
 8005826:	2300      	movs	r3, #0
 8005828:	602b      	str	r3, [r5, #0]
 800582a:	89b3      	ldrh	r3, [r6, #12]
 800582c:	061a      	lsls	r2, r3, #24
 800582e:	d410      	bmi.n	8005852 <__swhatbuf_r+0x3e>
 8005830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005834:	e00e      	b.n	8005854 <__swhatbuf_r+0x40>
 8005836:	466a      	mov	r2, sp
 8005838:	f000 fc36 	bl	80060a8 <_fstat_r>
 800583c:	2800      	cmp	r0, #0
 800583e:	dbf2      	blt.n	8005826 <__swhatbuf_r+0x12>
 8005840:	9a01      	ldr	r2, [sp, #4]
 8005842:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005846:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800584a:	425a      	negs	r2, r3
 800584c:	415a      	adcs	r2, r3
 800584e:	602a      	str	r2, [r5, #0]
 8005850:	e7ee      	b.n	8005830 <__swhatbuf_r+0x1c>
 8005852:	2340      	movs	r3, #64	; 0x40
 8005854:	2000      	movs	r0, #0
 8005856:	6023      	str	r3, [r4, #0]
 8005858:	b016      	add	sp, #88	; 0x58
 800585a:	bd70      	pop	{r4, r5, r6, pc}

0800585c <__smakebuf_r>:
 800585c:	898b      	ldrh	r3, [r1, #12]
 800585e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005860:	079d      	lsls	r5, r3, #30
 8005862:	4606      	mov	r6, r0
 8005864:	460c      	mov	r4, r1
 8005866:	d507      	bpl.n	8005878 <__smakebuf_r+0x1c>
 8005868:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800586c:	6023      	str	r3, [r4, #0]
 800586e:	6123      	str	r3, [r4, #16]
 8005870:	2301      	movs	r3, #1
 8005872:	6163      	str	r3, [r4, #20]
 8005874:	b002      	add	sp, #8
 8005876:	bd70      	pop	{r4, r5, r6, pc}
 8005878:	ab01      	add	r3, sp, #4
 800587a:	466a      	mov	r2, sp
 800587c:	f7ff ffca 	bl	8005814 <__swhatbuf_r>
 8005880:	9900      	ldr	r1, [sp, #0]
 8005882:	4605      	mov	r5, r0
 8005884:	4630      	mov	r0, r6
 8005886:	f000 f877 	bl	8005978 <_malloc_r>
 800588a:	b948      	cbnz	r0, 80058a0 <__smakebuf_r+0x44>
 800588c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005890:	059a      	lsls	r2, r3, #22
 8005892:	d4ef      	bmi.n	8005874 <__smakebuf_r+0x18>
 8005894:	f023 0303 	bic.w	r3, r3, #3
 8005898:	f043 0302 	orr.w	r3, r3, #2
 800589c:	81a3      	strh	r3, [r4, #12]
 800589e:	e7e3      	b.n	8005868 <__smakebuf_r+0xc>
 80058a0:	4b0d      	ldr	r3, [pc, #52]	; (80058d8 <__smakebuf_r+0x7c>)
 80058a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80058a4:	89a3      	ldrh	r3, [r4, #12]
 80058a6:	6020      	str	r0, [r4, #0]
 80058a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ac:	81a3      	strh	r3, [r4, #12]
 80058ae:	9b00      	ldr	r3, [sp, #0]
 80058b0:	6163      	str	r3, [r4, #20]
 80058b2:	9b01      	ldr	r3, [sp, #4]
 80058b4:	6120      	str	r0, [r4, #16]
 80058b6:	b15b      	cbz	r3, 80058d0 <__smakebuf_r+0x74>
 80058b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058bc:	4630      	mov	r0, r6
 80058be:	f000 fc05 	bl	80060cc <_isatty_r>
 80058c2:	b128      	cbz	r0, 80058d0 <__smakebuf_r+0x74>
 80058c4:	89a3      	ldrh	r3, [r4, #12]
 80058c6:	f023 0303 	bic.w	r3, r3, #3
 80058ca:	f043 0301 	orr.w	r3, r3, #1
 80058ce:	81a3      	strh	r3, [r4, #12]
 80058d0:	89a3      	ldrh	r3, [r4, #12]
 80058d2:	431d      	orrs	r5, r3
 80058d4:	81a5      	strh	r5, [r4, #12]
 80058d6:	e7cd      	b.n	8005874 <__smakebuf_r+0x18>
 80058d8:	080056c9 	.word	0x080056c9

080058dc <_free_r>:
 80058dc:	b538      	push	{r3, r4, r5, lr}
 80058de:	4605      	mov	r5, r0
 80058e0:	2900      	cmp	r1, #0
 80058e2:	d045      	beq.n	8005970 <_free_r+0x94>
 80058e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058e8:	1f0c      	subs	r4, r1, #4
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	bfb8      	it	lt
 80058ee:	18e4      	addlt	r4, r4, r3
 80058f0:	f000 fc0e 	bl	8006110 <__malloc_lock>
 80058f4:	4a1f      	ldr	r2, [pc, #124]	; (8005974 <_free_r+0x98>)
 80058f6:	6813      	ldr	r3, [r2, #0]
 80058f8:	4610      	mov	r0, r2
 80058fa:	b933      	cbnz	r3, 800590a <_free_r+0x2e>
 80058fc:	6063      	str	r3, [r4, #4]
 80058fe:	6014      	str	r4, [r2, #0]
 8005900:	4628      	mov	r0, r5
 8005902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005906:	f000 bc04 	b.w	8006112 <__malloc_unlock>
 800590a:	42a3      	cmp	r3, r4
 800590c:	d90c      	bls.n	8005928 <_free_r+0x4c>
 800590e:	6821      	ldr	r1, [r4, #0]
 8005910:	1862      	adds	r2, r4, r1
 8005912:	4293      	cmp	r3, r2
 8005914:	bf04      	itt	eq
 8005916:	681a      	ldreq	r2, [r3, #0]
 8005918:	685b      	ldreq	r3, [r3, #4]
 800591a:	6063      	str	r3, [r4, #4]
 800591c:	bf04      	itt	eq
 800591e:	1852      	addeq	r2, r2, r1
 8005920:	6022      	streq	r2, [r4, #0]
 8005922:	6004      	str	r4, [r0, #0]
 8005924:	e7ec      	b.n	8005900 <_free_r+0x24>
 8005926:	4613      	mov	r3, r2
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	b10a      	cbz	r2, 8005930 <_free_r+0x54>
 800592c:	42a2      	cmp	r2, r4
 800592e:	d9fa      	bls.n	8005926 <_free_r+0x4a>
 8005930:	6819      	ldr	r1, [r3, #0]
 8005932:	1858      	adds	r0, r3, r1
 8005934:	42a0      	cmp	r0, r4
 8005936:	d10b      	bne.n	8005950 <_free_r+0x74>
 8005938:	6820      	ldr	r0, [r4, #0]
 800593a:	4401      	add	r1, r0
 800593c:	1858      	adds	r0, r3, r1
 800593e:	4282      	cmp	r2, r0
 8005940:	6019      	str	r1, [r3, #0]
 8005942:	d1dd      	bne.n	8005900 <_free_r+0x24>
 8005944:	6810      	ldr	r0, [r2, #0]
 8005946:	6852      	ldr	r2, [r2, #4]
 8005948:	605a      	str	r2, [r3, #4]
 800594a:	4401      	add	r1, r0
 800594c:	6019      	str	r1, [r3, #0]
 800594e:	e7d7      	b.n	8005900 <_free_r+0x24>
 8005950:	d902      	bls.n	8005958 <_free_r+0x7c>
 8005952:	230c      	movs	r3, #12
 8005954:	602b      	str	r3, [r5, #0]
 8005956:	e7d3      	b.n	8005900 <_free_r+0x24>
 8005958:	6820      	ldr	r0, [r4, #0]
 800595a:	1821      	adds	r1, r4, r0
 800595c:	428a      	cmp	r2, r1
 800595e:	bf04      	itt	eq
 8005960:	6811      	ldreq	r1, [r2, #0]
 8005962:	6852      	ldreq	r2, [r2, #4]
 8005964:	6062      	str	r2, [r4, #4]
 8005966:	bf04      	itt	eq
 8005968:	1809      	addeq	r1, r1, r0
 800596a:	6021      	streq	r1, [r4, #0]
 800596c:	605c      	str	r4, [r3, #4]
 800596e:	e7c7      	b.n	8005900 <_free_r+0x24>
 8005970:	bd38      	pop	{r3, r4, r5, pc}
 8005972:	bf00      	nop
 8005974:	2000008c 	.word	0x2000008c

08005978 <_malloc_r>:
 8005978:	b570      	push	{r4, r5, r6, lr}
 800597a:	1ccd      	adds	r5, r1, #3
 800597c:	f025 0503 	bic.w	r5, r5, #3
 8005980:	3508      	adds	r5, #8
 8005982:	2d0c      	cmp	r5, #12
 8005984:	bf38      	it	cc
 8005986:	250c      	movcc	r5, #12
 8005988:	2d00      	cmp	r5, #0
 800598a:	4606      	mov	r6, r0
 800598c:	db01      	blt.n	8005992 <_malloc_r+0x1a>
 800598e:	42a9      	cmp	r1, r5
 8005990:	d903      	bls.n	800599a <_malloc_r+0x22>
 8005992:	230c      	movs	r3, #12
 8005994:	6033      	str	r3, [r6, #0]
 8005996:	2000      	movs	r0, #0
 8005998:	bd70      	pop	{r4, r5, r6, pc}
 800599a:	f000 fbb9 	bl	8006110 <__malloc_lock>
 800599e:	4a21      	ldr	r2, [pc, #132]	; (8005a24 <_malloc_r+0xac>)
 80059a0:	6814      	ldr	r4, [r2, #0]
 80059a2:	4621      	mov	r1, r4
 80059a4:	b991      	cbnz	r1, 80059cc <_malloc_r+0x54>
 80059a6:	4c20      	ldr	r4, [pc, #128]	; (8005a28 <_malloc_r+0xb0>)
 80059a8:	6823      	ldr	r3, [r4, #0]
 80059aa:	b91b      	cbnz	r3, 80059b4 <_malloc_r+0x3c>
 80059ac:	4630      	mov	r0, r6
 80059ae:	f000 fb05 	bl	8005fbc <_sbrk_r>
 80059b2:	6020      	str	r0, [r4, #0]
 80059b4:	4629      	mov	r1, r5
 80059b6:	4630      	mov	r0, r6
 80059b8:	f000 fb00 	bl	8005fbc <_sbrk_r>
 80059bc:	1c43      	adds	r3, r0, #1
 80059be:	d124      	bne.n	8005a0a <_malloc_r+0x92>
 80059c0:	230c      	movs	r3, #12
 80059c2:	6033      	str	r3, [r6, #0]
 80059c4:	4630      	mov	r0, r6
 80059c6:	f000 fba4 	bl	8006112 <__malloc_unlock>
 80059ca:	e7e4      	b.n	8005996 <_malloc_r+0x1e>
 80059cc:	680b      	ldr	r3, [r1, #0]
 80059ce:	1b5b      	subs	r3, r3, r5
 80059d0:	d418      	bmi.n	8005a04 <_malloc_r+0x8c>
 80059d2:	2b0b      	cmp	r3, #11
 80059d4:	d90f      	bls.n	80059f6 <_malloc_r+0x7e>
 80059d6:	600b      	str	r3, [r1, #0]
 80059d8:	50cd      	str	r5, [r1, r3]
 80059da:	18cc      	adds	r4, r1, r3
 80059dc:	4630      	mov	r0, r6
 80059de:	f000 fb98 	bl	8006112 <__malloc_unlock>
 80059e2:	f104 000b 	add.w	r0, r4, #11
 80059e6:	1d23      	adds	r3, r4, #4
 80059e8:	f020 0007 	bic.w	r0, r0, #7
 80059ec:	1ac3      	subs	r3, r0, r3
 80059ee:	d0d3      	beq.n	8005998 <_malloc_r+0x20>
 80059f0:	425a      	negs	r2, r3
 80059f2:	50e2      	str	r2, [r4, r3]
 80059f4:	e7d0      	b.n	8005998 <_malloc_r+0x20>
 80059f6:	428c      	cmp	r4, r1
 80059f8:	684b      	ldr	r3, [r1, #4]
 80059fa:	bf16      	itet	ne
 80059fc:	6063      	strne	r3, [r4, #4]
 80059fe:	6013      	streq	r3, [r2, #0]
 8005a00:	460c      	movne	r4, r1
 8005a02:	e7eb      	b.n	80059dc <_malloc_r+0x64>
 8005a04:	460c      	mov	r4, r1
 8005a06:	6849      	ldr	r1, [r1, #4]
 8005a08:	e7cc      	b.n	80059a4 <_malloc_r+0x2c>
 8005a0a:	1cc4      	adds	r4, r0, #3
 8005a0c:	f024 0403 	bic.w	r4, r4, #3
 8005a10:	42a0      	cmp	r0, r4
 8005a12:	d005      	beq.n	8005a20 <_malloc_r+0xa8>
 8005a14:	1a21      	subs	r1, r4, r0
 8005a16:	4630      	mov	r0, r6
 8005a18:	f000 fad0 	bl	8005fbc <_sbrk_r>
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	d0cf      	beq.n	80059c0 <_malloc_r+0x48>
 8005a20:	6025      	str	r5, [r4, #0]
 8005a22:	e7db      	b.n	80059dc <_malloc_r+0x64>
 8005a24:	2000008c 	.word	0x2000008c
 8005a28:	20000090 	.word	0x20000090

08005a2c <__sfputc_r>:
 8005a2c:	6893      	ldr	r3, [r2, #8]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	b410      	push	{r4}
 8005a34:	6093      	str	r3, [r2, #8]
 8005a36:	da08      	bge.n	8005a4a <__sfputc_r+0x1e>
 8005a38:	6994      	ldr	r4, [r2, #24]
 8005a3a:	42a3      	cmp	r3, r4
 8005a3c:	db01      	blt.n	8005a42 <__sfputc_r+0x16>
 8005a3e:	290a      	cmp	r1, #10
 8005a40:	d103      	bne.n	8005a4a <__sfputc_r+0x1e>
 8005a42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a46:	f7ff bcab 	b.w	80053a0 <__swbuf_r>
 8005a4a:	6813      	ldr	r3, [r2, #0]
 8005a4c:	1c58      	adds	r0, r3, #1
 8005a4e:	6010      	str	r0, [r2, #0]
 8005a50:	7019      	strb	r1, [r3, #0]
 8005a52:	4608      	mov	r0, r1
 8005a54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <__sfputs_r>:
 8005a5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5c:	4606      	mov	r6, r0
 8005a5e:	460f      	mov	r7, r1
 8005a60:	4614      	mov	r4, r2
 8005a62:	18d5      	adds	r5, r2, r3
 8005a64:	42ac      	cmp	r4, r5
 8005a66:	d101      	bne.n	8005a6c <__sfputs_r+0x12>
 8005a68:	2000      	movs	r0, #0
 8005a6a:	e007      	b.n	8005a7c <__sfputs_r+0x22>
 8005a6c:	463a      	mov	r2, r7
 8005a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a72:	4630      	mov	r0, r6
 8005a74:	f7ff ffda 	bl	8005a2c <__sfputc_r>
 8005a78:	1c43      	adds	r3, r0, #1
 8005a7a:	d1f3      	bne.n	8005a64 <__sfputs_r+0xa>
 8005a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a80 <_vfiprintf_r>:
 8005a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a84:	460c      	mov	r4, r1
 8005a86:	b09d      	sub	sp, #116	; 0x74
 8005a88:	4617      	mov	r7, r2
 8005a8a:	461d      	mov	r5, r3
 8005a8c:	4606      	mov	r6, r0
 8005a8e:	b118      	cbz	r0, 8005a98 <_vfiprintf_r+0x18>
 8005a90:	6983      	ldr	r3, [r0, #24]
 8005a92:	b90b      	cbnz	r3, 8005a98 <_vfiprintf_r+0x18>
 8005a94:	f7ff fe34 	bl	8005700 <__sinit>
 8005a98:	4b7c      	ldr	r3, [pc, #496]	; (8005c8c <_vfiprintf_r+0x20c>)
 8005a9a:	429c      	cmp	r4, r3
 8005a9c:	d158      	bne.n	8005b50 <_vfiprintf_r+0xd0>
 8005a9e:	6874      	ldr	r4, [r6, #4]
 8005aa0:	89a3      	ldrh	r3, [r4, #12]
 8005aa2:	0718      	lsls	r0, r3, #28
 8005aa4:	d55e      	bpl.n	8005b64 <_vfiprintf_r+0xe4>
 8005aa6:	6923      	ldr	r3, [r4, #16]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d05b      	beq.n	8005b64 <_vfiprintf_r+0xe4>
 8005aac:	2300      	movs	r3, #0
 8005aae:	9309      	str	r3, [sp, #36]	; 0x24
 8005ab0:	2320      	movs	r3, #32
 8005ab2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ab6:	2330      	movs	r3, #48	; 0x30
 8005ab8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005abc:	9503      	str	r5, [sp, #12]
 8005abe:	f04f 0b01 	mov.w	fp, #1
 8005ac2:	46b8      	mov	r8, r7
 8005ac4:	4645      	mov	r5, r8
 8005ac6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005aca:	b10b      	cbz	r3, 8005ad0 <_vfiprintf_r+0x50>
 8005acc:	2b25      	cmp	r3, #37	; 0x25
 8005ace:	d154      	bne.n	8005b7a <_vfiprintf_r+0xfa>
 8005ad0:	ebb8 0a07 	subs.w	sl, r8, r7
 8005ad4:	d00b      	beq.n	8005aee <_vfiprintf_r+0x6e>
 8005ad6:	4653      	mov	r3, sl
 8005ad8:	463a      	mov	r2, r7
 8005ada:	4621      	mov	r1, r4
 8005adc:	4630      	mov	r0, r6
 8005ade:	f7ff ffbc 	bl	8005a5a <__sfputs_r>
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	f000 80c2 	beq.w	8005c6c <_vfiprintf_r+0x1ec>
 8005ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aea:	4453      	add	r3, sl
 8005aec:	9309      	str	r3, [sp, #36]	; 0x24
 8005aee:	f898 3000 	ldrb.w	r3, [r8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 80ba 	beq.w	8005c6c <_vfiprintf_r+0x1ec>
 8005af8:	2300      	movs	r3, #0
 8005afa:	f04f 32ff 	mov.w	r2, #4294967295
 8005afe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b02:	9304      	str	r3, [sp, #16]
 8005b04:	9307      	str	r3, [sp, #28]
 8005b06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b0a:	931a      	str	r3, [sp, #104]	; 0x68
 8005b0c:	46a8      	mov	r8, r5
 8005b0e:	2205      	movs	r2, #5
 8005b10:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005b14:	485e      	ldr	r0, [pc, #376]	; (8005c90 <_vfiprintf_r+0x210>)
 8005b16:	f7fa fb5b 	bl	80001d0 <memchr>
 8005b1a:	9b04      	ldr	r3, [sp, #16]
 8005b1c:	bb78      	cbnz	r0, 8005b7e <_vfiprintf_r+0xfe>
 8005b1e:	06d9      	lsls	r1, r3, #27
 8005b20:	bf44      	itt	mi
 8005b22:	2220      	movmi	r2, #32
 8005b24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005b28:	071a      	lsls	r2, r3, #28
 8005b2a:	bf44      	itt	mi
 8005b2c:	222b      	movmi	r2, #43	; 0x2b
 8005b2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005b32:	782a      	ldrb	r2, [r5, #0]
 8005b34:	2a2a      	cmp	r2, #42	; 0x2a
 8005b36:	d02a      	beq.n	8005b8e <_vfiprintf_r+0x10e>
 8005b38:	9a07      	ldr	r2, [sp, #28]
 8005b3a:	46a8      	mov	r8, r5
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	250a      	movs	r5, #10
 8005b40:	4641      	mov	r1, r8
 8005b42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b46:	3b30      	subs	r3, #48	; 0x30
 8005b48:	2b09      	cmp	r3, #9
 8005b4a:	d969      	bls.n	8005c20 <_vfiprintf_r+0x1a0>
 8005b4c:	b360      	cbz	r0, 8005ba8 <_vfiprintf_r+0x128>
 8005b4e:	e024      	b.n	8005b9a <_vfiprintf_r+0x11a>
 8005b50:	4b50      	ldr	r3, [pc, #320]	; (8005c94 <_vfiprintf_r+0x214>)
 8005b52:	429c      	cmp	r4, r3
 8005b54:	d101      	bne.n	8005b5a <_vfiprintf_r+0xda>
 8005b56:	68b4      	ldr	r4, [r6, #8]
 8005b58:	e7a2      	b.n	8005aa0 <_vfiprintf_r+0x20>
 8005b5a:	4b4f      	ldr	r3, [pc, #316]	; (8005c98 <_vfiprintf_r+0x218>)
 8005b5c:	429c      	cmp	r4, r3
 8005b5e:	bf08      	it	eq
 8005b60:	68f4      	ldreq	r4, [r6, #12]
 8005b62:	e79d      	b.n	8005aa0 <_vfiprintf_r+0x20>
 8005b64:	4621      	mov	r1, r4
 8005b66:	4630      	mov	r0, r6
 8005b68:	f7ff fc6c 	bl	8005444 <__swsetup_r>
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	d09d      	beq.n	8005aac <_vfiprintf_r+0x2c>
 8005b70:	f04f 30ff 	mov.w	r0, #4294967295
 8005b74:	b01d      	add	sp, #116	; 0x74
 8005b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b7a:	46a8      	mov	r8, r5
 8005b7c:	e7a2      	b.n	8005ac4 <_vfiprintf_r+0x44>
 8005b7e:	4a44      	ldr	r2, [pc, #272]	; (8005c90 <_vfiprintf_r+0x210>)
 8005b80:	1a80      	subs	r0, r0, r2
 8005b82:	fa0b f000 	lsl.w	r0, fp, r0
 8005b86:	4318      	orrs	r0, r3
 8005b88:	9004      	str	r0, [sp, #16]
 8005b8a:	4645      	mov	r5, r8
 8005b8c:	e7be      	b.n	8005b0c <_vfiprintf_r+0x8c>
 8005b8e:	9a03      	ldr	r2, [sp, #12]
 8005b90:	1d11      	adds	r1, r2, #4
 8005b92:	6812      	ldr	r2, [r2, #0]
 8005b94:	9103      	str	r1, [sp, #12]
 8005b96:	2a00      	cmp	r2, #0
 8005b98:	db01      	blt.n	8005b9e <_vfiprintf_r+0x11e>
 8005b9a:	9207      	str	r2, [sp, #28]
 8005b9c:	e004      	b.n	8005ba8 <_vfiprintf_r+0x128>
 8005b9e:	4252      	negs	r2, r2
 8005ba0:	f043 0302 	orr.w	r3, r3, #2
 8005ba4:	9207      	str	r2, [sp, #28]
 8005ba6:	9304      	str	r3, [sp, #16]
 8005ba8:	f898 3000 	ldrb.w	r3, [r8]
 8005bac:	2b2e      	cmp	r3, #46	; 0x2e
 8005bae:	d10e      	bne.n	8005bce <_vfiprintf_r+0x14e>
 8005bb0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005bb4:	2b2a      	cmp	r3, #42	; 0x2a
 8005bb6:	d138      	bne.n	8005c2a <_vfiprintf_r+0x1aa>
 8005bb8:	9b03      	ldr	r3, [sp, #12]
 8005bba:	1d1a      	adds	r2, r3, #4
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	9203      	str	r2, [sp, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	bfb8      	it	lt
 8005bc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005bc8:	f108 0802 	add.w	r8, r8, #2
 8005bcc:	9305      	str	r3, [sp, #20]
 8005bce:	4d33      	ldr	r5, [pc, #204]	; (8005c9c <_vfiprintf_r+0x21c>)
 8005bd0:	f898 1000 	ldrb.w	r1, [r8]
 8005bd4:	2203      	movs	r2, #3
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	f7fa fafa 	bl	80001d0 <memchr>
 8005bdc:	b140      	cbz	r0, 8005bf0 <_vfiprintf_r+0x170>
 8005bde:	2340      	movs	r3, #64	; 0x40
 8005be0:	1b40      	subs	r0, r0, r5
 8005be2:	fa03 f000 	lsl.w	r0, r3, r0
 8005be6:	9b04      	ldr	r3, [sp, #16]
 8005be8:	4303      	orrs	r3, r0
 8005bea:	f108 0801 	add.w	r8, r8, #1
 8005bee:	9304      	str	r3, [sp, #16]
 8005bf0:	f898 1000 	ldrb.w	r1, [r8]
 8005bf4:	482a      	ldr	r0, [pc, #168]	; (8005ca0 <_vfiprintf_r+0x220>)
 8005bf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bfa:	2206      	movs	r2, #6
 8005bfc:	f108 0701 	add.w	r7, r8, #1
 8005c00:	f7fa fae6 	bl	80001d0 <memchr>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	d037      	beq.n	8005c78 <_vfiprintf_r+0x1f8>
 8005c08:	4b26      	ldr	r3, [pc, #152]	; (8005ca4 <_vfiprintf_r+0x224>)
 8005c0a:	bb1b      	cbnz	r3, 8005c54 <_vfiprintf_r+0x1d4>
 8005c0c:	9b03      	ldr	r3, [sp, #12]
 8005c0e:	3307      	adds	r3, #7
 8005c10:	f023 0307 	bic.w	r3, r3, #7
 8005c14:	3308      	adds	r3, #8
 8005c16:	9303      	str	r3, [sp, #12]
 8005c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c1a:	444b      	add	r3, r9
 8005c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c1e:	e750      	b.n	8005ac2 <_vfiprintf_r+0x42>
 8005c20:	fb05 3202 	mla	r2, r5, r2, r3
 8005c24:	2001      	movs	r0, #1
 8005c26:	4688      	mov	r8, r1
 8005c28:	e78a      	b.n	8005b40 <_vfiprintf_r+0xc0>
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	f108 0801 	add.w	r8, r8, #1
 8005c30:	9305      	str	r3, [sp, #20]
 8005c32:	4619      	mov	r1, r3
 8005c34:	250a      	movs	r5, #10
 8005c36:	4640      	mov	r0, r8
 8005c38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c3c:	3a30      	subs	r2, #48	; 0x30
 8005c3e:	2a09      	cmp	r2, #9
 8005c40:	d903      	bls.n	8005c4a <_vfiprintf_r+0x1ca>
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d0c3      	beq.n	8005bce <_vfiprintf_r+0x14e>
 8005c46:	9105      	str	r1, [sp, #20]
 8005c48:	e7c1      	b.n	8005bce <_vfiprintf_r+0x14e>
 8005c4a:	fb05 2101 	mla	r1, r5, r1, r2
 8005c4e:	2301      	movs	r3, #1
 8005c50:	4680      	mov	r8, r0
 8005c52:	e7f0      	b.n	8005c36 <_vfiprintf_r+0x1b6>
 8005c54:	ab03      	add	r3, sp, #12
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	4622      	mov	r2, r4
 8005c5a:	4b13      	ldr	r3, [pc, #76]	; (8005ca8 <_vfiprintf_r+0x228>)
 8005c5c:	a904      	add	r1, sp, #16
 8005c5e:	4630      	mov	r0, r6
 8005c60:	f3af 8000 	nop.w
 8005c64:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005c68:	4681      	mov	r9, r0
 8005c6a:	d1d5      	bne.n	8005c18 <_vfiprintf_r+0x198>
 8005c6c:	89a3      	ldrh	r3, [r4, #12]
 8005c6e:	065b      	lsls	r3, r3, #25
 8005c70:	f53f af7e 	bmi.w	8005b70 <_vfiprintf_r+0xf0>
 8005c74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c76:	e77d      	b.n	8005b74 <_vfiprintf_r+0xf4>
 8005c78:	ab03      	add	r3, sp, #12
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	4622      	mov	r2, r4
 8005c7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ca8 <_vfiprintf_r+0x228>)
 8005c80:	a904      	add	r1, sp, #16
 8005c82:	4630      	mov	r0, r6
 8005c84:	f000 f888 	bl	8005d98 <_printf_i>
 8005c88:	e7ec      	b.n	8005c64 <_vfiprintf_r+0x1e4>
 8005c8a:	bf00      	nop
 8005c8c:	0800626c 	.word	0x0800626c
 8005c90:	080062ac 	.word	0x080062ac
 8005c94:	0800628c 	.word	0x0800628c
 8005c98:	0800624c 	.word	0x0800624c
 8005c9c:	080062b2 	.word	0x080062b2
 8005ca0:	080062b6 	.word	0x080062b6
 8005ca4:	00000000 	.word	0x00000000
 8005ca8:	08005a5b 	.word	0x08005a5b

08005cac <_printf_common>:
 8005cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cb0:	4691      	mov	r9, r2
 8005cb2:	461f      	mov	r7, r3
 8005cb4:	688a      	ldr	r2, [r1, #8]
 8005cb6:	690b      	ldr	r3, [r1, #16]
 8005cb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	bfb8      	it	lt
 8005cc0:	4613      	movlt	r3, r2
 8005cc2:	f8c9 3000 	str.w	r3, [r9]
 8005cc6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cca:	4606      	mov	r6, r0
 8005ccc:	460c      	mov	r4, r1
 8005cce:	b112      	cbz	r2, 8005cd6 <_printf_common+0x2a>
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	f8c9 3000 	str.w	r3, [r9]
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	0699      	lsls	r1, r3, #26
 8005cda:	bf42      	ittt	mi
 8005cdc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005ce0:	3302      	addmi	r3, #2
 8005ce2:	f8c9 3000 	strmi.w	r3, [r9]
 8005ce6:	6825      	ldr	r5, [r4, #0]
 8005ce8:	f015 0506 	ands.w	r5, r5, #6
 8005cec:	d107      	bne.n	8005cfe <_printf_common+0x52>
 8005cee:	f104 0a19 	add.w	sl, r4, #25
 8005cf2:	68e3      	ldr	r3, [r4, #12]
 8005cf4:	f8d9 2000 	ldr.w	r2, [r9]
 8005cf8:	1a9b      	subs	r3, r3, r2
 8005cfa:	42ab      	cmp	r3, r5
 8005cfc:	dc28      	bgt.n	8005d50 <_printf_common+0xa4>
 8005cfe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005d02:	6822      	ldr	r2, [r4, #0]
 8005d04:	3300      	adds	r3, #0
 8005d06:	bf18      	it	ne
 8005d08:	2301      	movne	r3, #1
 8005d0a:	0692      	lsls	r2, r2, #26
 8005d0c:	d42d      	bmi.n	8005d6a <_printf_common+0xbe>
 8005d0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d12:	4639      	mov	r1, r7
 8005d14:	4630      	mov	r0, r6
 8005d16:	47c0      	blx	r8
 8005d18:	3001      	adds	r0, #1
 8005d1a:	d020      	beq.n	8005d5e <_printf_common+0xb2>
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	68e5      	ldr	r5, [r4, #12]
 8005d20:	f8d9 2000 	ldr.w	r2, [r9]
 8005d24:	f003 0306 	and.w	r3, r3, #6
 8005d28:	2b04      	cmp	r3, #4
 8005d2a:	bf08      	it	eq
 8005d2c:	1aad      	subeq	r5, r5, r2
 8005d2e:	68a3      	ldr	r3, [r4, #8]
 8005d30:	6922      	ldr	r2, [r4, #16]
 8005d32:	bf0c      	ite	eq
 8005d34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d38:	2500      	movne	r5, #0
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	bfc4      	itt	gt
 8005d3e:	1a9b      	subgt	r3, r3, r2
 8005d40:	18ed      	addgt	r5, r5, r3
 8005d42:	f04f 0900 	mov.w	r9, #0
 8005d46:	341a      	adds	r4, #26
 8005d48:	454d      	cmp	r5, r9
 8005d4a:	d11a      	bne.n	8005d82 <_printf_common+0xd6>
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	e008      	b.n	8005d62 <_printf_common+0xb6>
 8005d50:	2301      	movs	r3, #1
 8005d52:	4652      	mov	r2, sl
 8005d54:	4639      	mov	r1, r7
 8005d56:	4630      	mov	r0, r6
 8005d58:	47c0      	blx	r8
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	d103      	bne.n	8005d66 <_printf_common+0xba>
 8005d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d66:	3501      	adds	r5, #1
 8005d68:	e7c3      	b.n	8005cf2 <_printf_common+0x46>
 8005d6a:	18e1      	adds	r1, r4, r3
 8005d6c:	1c5a      	adds	r2, r3, #1
 8005d6e:	2030      	movs	r0, #48	; 0x30
 8005d70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d74:	4422      	add	r2, r4
 8005d76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d7e:	3302      	adds	r3, #2
 8005d80:	e7c5      	b.n	8005d0e <_printf_common+0x62>
 8005d82:	2301      	movs	r3, #1
 8005d84:	4622      	mov	r2, r4
 8005d86:	4639      	mov	r1, r7
 8005d88:	4630      	mov	r0, r6
 8005d8a:	47c0      	blx	r8
 8005d8c:	3001      	adds	r0, #1
 8005d8e:	d0e6      	beq.n	8005d5e <_printf_common+0xb2>
 8005d90:	f109 0901 	add.w	r9, r9, #1
 8005d94:	e7d8      	b.n	8005d48 <_printf_common+0x9c>
	...

08005d98 <_printf_i>:
 8005d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d9c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005da0:	460c      	mov	r4, r1
 8005da2:	7e09      	ldrb	r1, [r1, #24]
 8005da4:	b085      	sub	sp, #20
 8005da6:	296e      	cmp	r1, #110	; 0x6e
 8005da8:	4617      	mov	r7, r2
 8005daa:	4606      	mov	r6, r0
 8005dac:	4698      	mov	r8, r3
 8005dae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005db0:	f000 80b3 	beq.w	8005f1a <_printf_i+0x182>
 8005db4:	d822      	bhi.n	8005dfc <_printf_i+0x64>
 8005db6:	2963      	cmp	r1, #99	; 0x63
 8005db8:	d036      	beq.n	8005e28 <_printf_i+0x90>
 8005dba:	d80a      	bhi.n	8005dd2 <_printf_i+0x3a>
 8005dbc:	2900      	cmp	r1, #0
 8005dbe:	f000 80b9 	beq.w	8005f34 <_printf_i+0x19c>
 8005dc2:	2958      	cmp	r1, #88	; 0x58
 8005dc4:	f000 8083 	beq.w	8005ece <_printf_i+0x136>
 8005dc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dcc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005dd0:	e032      	b.n	8005e38 <_printf_i+0xa0>
 8005dd2:	2964      	cmp	r1, #100	; 0x64
 8005dd4:	d001      	beq.n	8005dda <_printf_i+0x42>
 8005dd6:	2969      	cmp	r1, #105	; 0x69
 8005dd8:	d1f6      	bne.n	8005dc8 <_printf_i+0x30>
 8005dda:	6820      	ldr	r0, [r4, #0]
 8005ddc:	6813      	ldr	r3, [r2, #0]
 8005dde:	0605      	lsls	r5, r0, #24
 8005de0:	f103 0104 	add.w	r1, r3, #4
 8005de4:	d52a      	bpl.n	8005e3c <_printf_i+0xa4>
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6011      	str	r1, [r2, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	da03      	bge.n	8005df6 <_printf_i+0x5e>
 8005dee:	222d      	movs	r2, #45	; 0x2d
 8005df0:	425b      	negs	r3, r3
 8005df2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005df6:	486f      	ldr	r0, [pc, #444]	; (8005fb4 <_printf_i+0x21c>)
 8005df8:	220a      	movs	r2, #10
 8005dfa:	e039      	b.n	8005e70 <_printf_i+0xd8>
 8005dfc:	2973      	cmp	r1, #115	; 0x73
 8005dfe:	f000 809d 	beq.w	8005f3c <_printf_i+0x1a4>
 8005e02:	d808      	bhi.n	8005e16 <_printf_i+0x7e>
 8005e04:	296f      	cmp	r1, #111	; 0x6f
 8005e06:	d020      	beq.n	8005e4a <_printf_i+0xb2>
 8005e08:	2970      	cmp	r1, #112	; 0x70
 8005e0a:	d1dd      	bne.n	8005dc8 <_printf_i+0x30>
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	f043 0320 	orr.w	r3, r3, #32
 8005e12:	6023      	str	r3, [r4, #0]
 8005e14:	e003      	b.n	8005e1e <_printf_i+0x86>
 8005e16:	2975      	cmp	r1, #117	; 0x75
 8005e18:	d017      	beq.n	8005e4a <_printf_i+0xb2>
 8005e1a:	2978      	cmp	r1, #120	; 0x78
 8005e1c:	d1d4      	bne.n	8005dc8 <_printf_i+0x30>
 8005e1e:	2378      	movs	r3, #120	; 0x78
 8005e20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e24:	4864      	ldr	r0, [pc, #400]	; (8005fb8 <_printf_i+0x220>)
 8005e26:	e055      	b.n	8005ed4 <_printf_i+0x13c>
 8005e28:	6813      	ldr	r3, [r2, #0]
 8005e2a:	1d19      	adds	r1, r3, #4
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6011      	str	r1, [r2, #0]
 8005e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e08c      	b.n	8005f56 <_printf_i+0x1be>
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6011      	str	r1, [r2, #0]
 8005e40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e44:	bf18      	it	ne
 8005e46:	b21b      	sxthne	r3, r3
 8005e48:	e7cf      	b.n	8005dea <_printf_i+0x52>
 8005e4a:	6813      	ldr	r3, [r2, #0]
 8005e4c:	6825      	ldr	r5, [r4, #0]
 8005e4e:	1d18      	adds	r0, r3, #4
 8005e50:	6010      	str	r0, [r2, #0]
 8005e52:	0628      	lsls	r0, r5, #24
 8005e54:	d501      	bpl.n	8005e5a <_printf_i+0xc2>
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	e002      	b.n	8005e60 <_printf_i+0xc8>
 8005e5a:	0668      	lsls	r0, r5, #25
 8005e5c:	d5fb      	bpl.n	8005e56 <_printf_i+0xbe>
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	4854      	ldr	r0, [pc, #336]	; (8005fb4 <_printf_i+0x21c>)
 8005e62:	296f      	cmp	r1, #111	; 0x6f
 8005e64:	bf14      	ite	ne
 8005e66:	220a      	movne	r2, #10
 8005e68:	2208      	moveq	r2, #8
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e70:	6865      	ldr	r5, [r4, #4]
 8005e72:	60a5      	str	r5, [r4, #8]
 8005e74:	2d00      	cmp	r5, #0
 8005e76:	f2c0 8095 	blt.w	8005fa4 <_printf_i+0x20c>
 8005e7a:	6821      	ldr	r1, [r4, #0]
 8005e7c:	f021 0104 	bic.w	r1, r1, #4
 8005e80:	6021      	str	r1, [r4, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d13d      	bne.n	8005f02 <_printf_i+0x16a>
 8005e86:	2d00      	cmp	r5, #0
 8005e88:	f040 808e 	bne.w	8005fa8 <_printf_i+0x210>
 8005e8c:	4665      	mov	r5, ip
 8005e8e:	2a08      	cmp	r2, #8
 8005e90:	d10b      	bne.n	8005eaa <_printf_i+0x112>
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	07db      	lsls	r3, r3, #31
 8005e96:	d508      	bpl.n	8005eaa <_printf_i+0x112>
 8005e98:	6923      	ldr	r3, [r4, #16]
 8005e9a:	6862      	ldr	r2, [r4, #4]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	bfde      	ittt	le
 8005ea0:	2330      	movle	r3, #48	; 0x30
 8005ea2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ea6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005eaa:	ebac 0305 	sub.w	r3, ip, r5
 8005eae:	6123      	str	r3, [r4, #16]
 8005eb0:	f8cd 8000 	str.w	r8, [sp]
 8005eb4:	463b      	mov	r3, r7
 8005eb6:	aa03      	add	r2, sp, #12
 8005eb8:	4621      	mov	r1, r4
 8005eba:	4630      	mov	r0, r6
 8005ebc:	f7ff fef6 	bl	8005cac <_printf_common>
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	d14d      	bne.n	8005f60 <_printf_i+0x1c8>
 8005ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec8:	b005      	add	sp, #20
 8005eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ece:	4839      	ldr	r0, [pc, #228]	; (8005fb4 <_printf_i+0x21c>)
 8005ed0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005ed4:	6813      	ldr	r3, [r2, #0]
 8005ed6:	6821      	ldr	r1, [r4, #0]
 8005ed8:	1d1d      	adds	r5, r3, #4
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6015      	str	r5, [r2, #0]
 8005ede:	060a      	lsls	r2, r1, #24
 8005ee0:	d50b      	bpl.n	8005efa <_printf_i+0x162>
 8005ee2:	07ca      	lsls	r2, r1, #31
 8005ee4:	bf44      	itt	mi
 8005ee6:	f041 0120 	orrmi.w	r1, r1, #32
 8005eea:	6021      	strmi	r1, [r4, #0]
 8005eec:	b91b      	cbnz	r3, 8005ef6 <_printf_i+0x15e>
 8005eee:	6822      	ldr	r2, [r4, #0]
 8005ef0:	f022 0220 	bic.w	r2, r2, #32
 8005ef4:	6022      	str	r2, [r4, #0]
 8005ef6:	2210      	movs	r2, #16
 8005ef8:	e7b7      	b.n	8005e6a <_printf_i+0xd2>
 8005efa:	064d      	lsls	r5, r1, #25
 8005efc:	bf48      	it	mi
 8005efe:	b29b      	uxthmi	r3, r3
 8005f00:	e7ef      	b.n	8005ee2 <_printf_i+0x14a>
 8005f02:	4665      	mov	r5, ip
 8005f04:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f08:	fb02 3311 	mls	r3, r2, r1, r3
 8005f0c:	5cc3      	ldrb	r3, [r0, r3]
 8005f0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005f12:	460b      	mov	r3, r1
 8005f14:	2900      	cmp	r1, #0
 8005f16:	d1f5      	bne.n	8005f04 <_printf_i+0x16c>
 8005f18:	e7b9      	b.n	8005e8e <_printf_i+0xf6>
 8005f1a:	6813      	ldr	r3, [r2, #0]
 8005f1c:	6825      	ldr	r5, [r4, #0]
 8005f1e:	6961      	ldr	r1, [r4, #20]
 8005f20:	1d18      	adds	r0, r3, #4
 8005f22:	6010      	str	r0, [r2, #0]
 8005f24:	0628      	lsls	r0, r5, #24
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	d501      	bpl.n	8005f2e <_printf_i+0x196>
 8005f2a:	6019      	str	r1, [r3, #0]
 8005f2c:	e002      	b.n	8005f34 <_printf_i+0x19c>
 8005f2e:	066a      	lsls	r2, r5, #25
 8005f30:	d5fb      	bpl.n	8005f2a <_printf_i+0x192>
 8005f32:	8019      	strh	r1, [r3, #0]
 8005f34:	2300      	movs	r3, #0
 8005f36:	6123      	str	r3, [r4, #16]
 8005f38:	4665      	mov	r5, ip
 8005f3a:	e7b9      	b.n	8005eb0 <_printf_i+0x118>
 8005f3c:	6813      	ldr	r3, [r2, #0]
 8005f3e:	1d19      	adds	r1, r3, #4
 8005f40:	6011      	str	r1, [r2, #0]
 8005f42:	681d      	ldr	r5, [r3, #0]
 8005f44:	6862      	ldr	r2, [r4, #4]
 8005f46:	2100      	movs	r1, #0
 8005f48:	4628      	mov	r0, r5
 8005f4a:	f7fa f941 	bl	80001d0 <memchr>
 8005f4e:	b108      	cbz	r0, 8005f54 <_printf_i+0x1bc>
 8005f50:	1b40      	subs	r0, r0, r5
 8005f52:	6060      	str	r0, [r4, #4]
 8005f54:	6863      	ldr	r3, [r4, #4]
 8005f56:	6123      	str	r3, [r4, #16]
 8005f58:	2300      	movs	r3, #0
 8005f5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f5e:	e7a7      	b.n	8005eb0 <_printf_i+0x118>
 8005f60:	6923      	ldr	r3, [r4, #16]
 8005f62:	462a      	mov	r2, r5
 8005f64:	4639      	mov	r1, r7
 8005f66:	4630      	mov	r0, r6
 8005f68:	47c0      	blx	r8
 8005f6a:	3001      	adds	r0, #1
 8005f6c:	d0aa      	beq.n	8005ec4 <_printf_i+0x12c>
 8005f6e:	6823      	ldr	r3, [r4, #0]
 8005f70:	079b      	lsls	r3, r3, #30
 8005f72:	d413      	bmi.n	8005f9c <_printf_i+0x204>
 8005f74:	68e0      	ldr	r0, [r4, #12]
 8005f76:	9b03      	ldr	r3, [sp, #12]
 8005f78:	4298      	cmp	r0, r3
 8005f7a:	bfb8      	it	lt
 8005f7c:	4618      	movlt	r0, r3
 8005f7e:	e7a3      	b.n	8005ec8 <_printf_i+0x130>
 8005f80:	2301      	movs	r3, #1
 8005f82:	464a      	mov	r2, r9
 8005f84:	4639      	mov	r1, r7
 8005f86:	4630      	mov	r0, r6
 8005f88:	47c0      	blx	r8
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	d09a      	beq.n	8005ec4 <_printf_i+0x12c>
 8005f8e:	3501      	adds	r5, #1
 8005f90:	68e3      	ldr	r3, [r4, #12]
 8005f92:	9a03      	ldr	r2, [sp, #12]
 8005f94:	1a9b      	subs	r3, r3, r2
 8005f96:	42ab      	cmp	r3, r5
 8005f98:	dcf2      	bgt.n	8005f80 <_printf_i+0x1e8>
 8005f9a:	e7eb      	b.n	8005f74 <_printf_i+0x1dc>
 8005f9c:	2500      	movs	r5, #0
 8005f9e:	f104 0919 	add.w	r9, r4, #25
 8005fa2:	e7f5      	b.n	8005f90 <_printf_i+0x1f8>
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1ac      	bne.n	8005f02 <_printf_i+0x16a>
 8005fa8:	7803      	ldrb	r3, [r0, #0]
 8005faa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fb2:	e76c      	b.n	8005e8e <_printf_i+0xf6>
 8005fb4:	080062bd 	.word	0x080062bd
 8005fb8:	080062ce 	.word	0x080062ce

08005fbc <_sbrk_r>:
 8005fbc:	b538      	push	{r3, r4, r5, lr}
 8005fbe:	4c06      	ldr	r4, [pc, #24]	; (8005fd8 <_sbrk_r+0x1c>)
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	4605      	mov	r5, r0
 8005fc4:	4608      	mov	r0, r1
 8005fc6:	6023      	str	r3, [r4, #0]
 8005fc8:	f7ff f820 	bl	800500c <_sbrk>
 8005fcc:	1c43      	adds	r3, r0, #1
 8005fce:	d102      	bne.n	8005fd6 <_sbrk_r+0x1a>
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	b103      	cbz	r3, 8005fd6 <_sbrk_r+0x1a>
 8005fd4:	602b      	str	r3, [r5, #0]
 8005fd6:	bd38      	pop	{r3, r4, r5, pc}
 8005fd8:	200001b0 	.word	0x200001b0

08005fdc <__sread>:
 8005fdc:	b510      	push	{r4, lr}
 8005fde:	460c      	mov	r4, r1
 8005fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe4:	f000 f896 	bl	8006114 <_read_r>
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	bfab      	itete	ge
 8005fec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fee:	89a3      	ldrhlt	r3, [r4, #12]
 8005ff0:	181b      	addge	r3, r3, r0
 8005ff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ff6:	bfac      	ite	ge
 8005ff8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ffa:	81a3      	strhlt	r3, [r4, #12]
 8005ffc:	bd10      	pop	{r4, pc}

08005ffe <__swrite>:
 8005ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006002:	461f      	mov	r7, r3
 8006004:	898b      	ldrh	r3, [r1, #12]
 8006006:	05db      	lsls	r3, r3, #23
 8006008:	4605      	mov	r5, r0
 800600a:	460c      	mov	r4, r1
 800600c:	4616      	mov	r6, r2
 800600e:	d505      	bpl.n	800601c <__swrite+0x1e>
 8006010:	2302      	movs	r3, #2
 8006012:	2200      	movs	r2, #0
 8006014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006018:	f000 f868 	bl	80060ec <_lseek_r>
 800601c:	89a3      	ldrh	r3, [r4, #12]
 800601e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006026:	81a3      	strh	r3, [r4, #12]
 8006028:	4632      	mov	r2, r6
 800602a:	463b      	mov	r3, r7
 800602c:	4628      	mov	r0, r5
 800602e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006032:	f000 b817 	b.w	8006064 <_write_r>

08006036 <__sseek>:
 8006036:	b510      	push	{r4, lr}
 8006038:	460c      	mov	r4, r1
 800603a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800603e:	f000 f855 	bl	80060ec <_lseek_r>
 8006042:	1c43      	adds	r3, r0, #1
 8006044:	89a3      	ldrh	r3, [r4, #12]
 8006046:	bf15      	itete	ne
 8006048:	6560      	strne	r0, [r4, #84]	; 0x54
 800604a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800604e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006052:	81a3      	strheq	r3, [r4, #12]
 8006054:	bf18      	it	ne
 8006056:	81a3      	strhne	r3, [r4, #12]
 8006058:	bd10      	pop	{r4, pc}

0800605a <__sclose>:
 800605a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800605e:	f000 b813 	b.w	8006088 <_close_r>
	...

08006064 <_write_r>:
 8006064:	b538      	push	{r3, r4, r5, lr}
 8006066:	4c07      	ldr	r4, [pc, #28]	; (8006084 <_write_r+0x20>)
 8006068:	4605      	mov	r5, r0
 800606a:	4608      	mov	r0, r1
 800606c:	4611      	mov	r1, r2
 800606e:	2200      	movs	r2, #0
 8006070:	6022      	str	r2, [r4, #0]
 8006072:	461a      	mov	r2, r3
 8006074:	f7fe ffad 	bl	8004fd2 <_write>
 8006078:	1c43      	adds	r3, r0, #1
 800607a:	d102      	bne.n	8006082 <_write_r+0x1e>
 800607c:	6823      	ldr	r3, [r4, #0]
 800607e:	b103      	cbz	r3, 8006082 <_write_r+0x1e>
 8006080:	602b      	str	r3, [r5, #0]
 8006082:	bd38      	pop	{r3, r4, r5, pc}
 8006084:	200001b0 	.word	0x200001b0

08006088 <_close_r>:
 8006088:	b538      	push	{r3, r4, r5, lr}
 800608a:	4c06      	ldr	r4, [pc, #24]	; (80060a4 <_close_r+0x1c>)
 800608c:	2300      	movs	r3, #0
 800608e:	4605      	mov	r5, r0
 8006090:	4608      	mov	r0, r1
 8006092:	6023      	str	r3, [r4, #0]
 8006094:	f7fe ffe6 	bl	8005064 <_close>
 8006098:	1c43      	adds	r3, r0, #1
 800609a:	d102      	bne.n	80060a2 <_close_r+0x1a>
 800609c:	6823      	ldr	r3, [r4, #0]
 800609e:	b103      	cbz	r3, 80060a2 <_close_r+0x1a>
 80060a0:	602b      	str	r3, [r5, #0]
 80060a2:	bd38      	pop	{r3, r4, r5, pc}
 80060a4:	200001b0 	.word	0x200001b0

080060a8 <_fstat_r>:
 80060a8:	b538      	push	{r3, r4, r5, lr}
 80060aa:	4c07      	ldr	r4, [pc, #28]	; (80060c8 <_fstat_r+0x20>)
 80060ac:	2300      	movs	r3, #0
 80060ae:	4605      	mov	r5, r0
 80060b0:	4608      	mov	r0, r1
 80060b2:	4611      	mov	r1, r2
 80060b4:	6023      	str	r3, [r4, #0]
 80060b6:	f7fe ffe1 	bl	800507c <_fstat>
 80060ba:	1c43      	adds	r3, r0, #1
 80060bc:	d102      	bne.n	80060c4 <_fstat_r+0x1c>
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	b103      	cbz	r3, 80060c4 <_fstat_r+0x1c>
 80060c2:	602b      	str	r3, [r5, #0]
 80060c4:	bd38      	pop	{r3, r4, r5, pc}
 80060c6:	bf00      	nop
 80060c8:	200001b0 	.word	0x200001b0

080060cc <_isatty_r>:
 80060cc:	b538      	push	{r3, r4, r5, lr}
 80060ce:	4c06      	ldr	r4, [pc, #24]	; (80060e8 <_isatty_r+0x1c>)
 80060d0:	2300      	movs	r3, #0
 80060d2:	4605      	mov	r5, r0
 80060d4:	4608      	mov	r0, r1
 80060d6:	6023      	str	r3, [r4, #0]
 80060d8:	f7fe ffe0 	bl	800509c <_isatty>
 80060dc:	1c43      	adds	r3, r0, #1
 80060de:	d102      	bne.n	80060e6 <_isatty_r+0x1a>
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	b103      	cbz	r3, 80060e6 <_isatty_r+0x1a>
 80060e4:	602b      	str	r3, [r5, #0]
 80060e6:	bd38      	pop	{r3, r4, r5, pc}
 80060e8:	200001b0 	.word	0x200001b0

080060ec <_lseek_r>:
 80060ec:	b538      	push	{r3, r4, r5, lr}
 80060ee:	4c07      	ldr	r4, [pc, #28]	; (800610c <_lseek_r+0x20>)
 80060f0:	4605      	mov	r5, r0
 80060f2:	4608      	mov	r0, r1
 80060f4:	4611      	mov	r1, r2
 80060f6:	2200      	movs	r2, #0
 80060f8:	6022      	str	r2, [r4, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	f7fe ffd9 	bl	80050b2 <_lseek>
 8006100:	1c43      	adds	r3, r0, #1
 8006102:	d102      	bne.n	800610a <_lseek_r+0x1e>
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	b103      	cbz	r3, 800610a <_lseek_r+0x1e>
 8006108:	602b      	str	r3, [r5, #0]
 800610a:	bd38      	pop	{r3, r4, r5, pc}
 800610c:	200001b0 	.word	0x200001b0

08006110 <__malloc_lock>:
 8006110:	4770      	bx	lr

08006112 <__malloc_unlock>:
 8006112:	4770      	bx	lr

08006114 <_read_r>:
 8006114:	b538      	push	{r3, r4, r5, lr}
 8006116:	4c07      	ldr	r4, [pc, #28]	; (8006134 <_read_r+0x20>)
 8006118:	4605      	mov	r5, r0
 800611a:	4608      	mov	r0, r1
 800611c:	4611      	mov	r1, r2
 800611e:	2200      	movs	r2, #0
 8006120:	6022      	str	r2, [r4, #0]
 8006122:	461a      	mov	r2, r3
 8006124:	f7fe ff38 	bl	8004f98 <_read>
 8006128:	1c43      	adds	r3, r0, #1
 800612a:	d102      	bne.n	8006132 <_read_r+0x1e>
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	b103      	cbz	r3, 8006132 <_read_r+0x1e>
 8006130:	602b      	str	r3, [r5, #0]
 8006132:	bd38      	pop	{r3, r4, r5, pc}
 8006134:	200001b0 	.word	0x200001b0

08006138 <_init>:
 8006138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613a:	bf00      	nop
 800613c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800613e:	bc08      	pop	{r3}
 8006140:	469e      	mov	lr, r3
 8006142:	4770      	bx	lr

08006144 <_fini>:
 8006144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006146:	bf00      	nop
 8006148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800614a:	bc08      	pop	{r3}
 800614c:	469e      	mov	lr, r3
 800614e:	4770      	bx	lr
